
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00002b7c  00002c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000ea  008000ea  00002c9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00002d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033ad  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e76  00000000  00000000  00006331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f78  00000000  00000000  000071a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  00009120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a33  00000000  00000000  0000984c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bc8  00000000  00000000  0000a27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000ce47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_1>
       8:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_2>
       c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_3>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <LCD_enuSetPosition+0x18>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__trampolines_end>:
      d6:	4e 41       	sbci	r20, 0x1E	; 30
      d8:	4e 49       	Address 0x000000d8 is out of bounds.
.word	0xffff	; ????

000000d9 <pstr_inity>:
      d9:	49 4e 49 54 59                                      INITY

000000de <pstr_inf>:
      de:	49 4e 46                                            INF

000000e1 <pwr_m10>:
      e1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      f1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000f9 <pwr_p10>:
      f9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     109:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf e5       	ldi	r28, 0x5F	; 95
     118:	d8 e0       	ldi	r29, 0x08	; 8
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	10 e0       	ldi	r17, 0x00	; 0
     120:	a0 e6       	ldi	r26, 0x60	; 96
     122:	b0 e0       	ldi	r27, 0x00	; 0
     124:	ec e7       	ldi	r30, 0x7C	; 124
     126:	fb e2       	ldi	r31, 0x2B	; 43
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	aa 3e       	cpi	r26, 0xEA	; 234
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	aa ee       	ldi	r26, 0xEA	; 234
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	ad 3f       	cpi	r26, 0xFD	; 253
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 12 0b 	call	0x1624	; 0x1624 <main>
     148:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <DIO_Enu_Init>:
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
     150:	8f ef       	ldi	r24, 0xFF	; 255
     152:	8a bb       	out	0x1a, r24	; 26
     154:	87 bb       	out	0x17, r24	; 23
     156:	14 ba       	out	0x14, r1	; 20
     158:	98 ef       	ldi	r25, 0xF8	; 248
     15a:	91 bb       	out	0x11, r25	; 17
     15c:	1b ba       	out	0x1b, r1	; 27
     15e:	18 ba       	out	0x18, r1	; 24
     160:	85 bb       	out	0x15, r24	; 21
     162:	87 e0       	ldi	r24, 0x07	; 7
     164:	82 bb       	out	0x12, r24	; 18
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	08 95       	ret

0000016a <DIO_Enu_SetPinDirection>:
     16a:	84 30       	cpi	r24, 0x04	; 4
     16c:	08 f0       	brcs	.+2      	; 0x170 <DIO_Enu_SetPinDirection+0x6>
     16e:	67 c0       	rjmp	.+206    	; 0x23e <DIO_Enu_SetPinDirection+0xd4>
     170:	68 30       	cpi	r22, 0x08	; 8
     172:	08 f0       	brcs	.+2      	; 0x176 <DIO_Enu_SetPinDirection+0xc>
     174:	66 c0       	rjmp	.+204    	; 0x242 <DIO_Enu_SetPinDirection+0xd8>
     176:	42 30       	cpi	r20, 0x02	; 2
     178:	08 f0       	brcs	.+2      	; 0x17c <DIO_Enu_SetPinDirection+0x12>
     17a:	65 c0       	rjmp	.+202    	; 0x246 <DIO_Enu_SetPinDirection+0xdc>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	e9 f0       	breq	.+58     	; 0x1ba <DIO_Enu_SetPinDirection+0x50>
     180:	30 f0       	brcs	.+12     	; 0x18e <DIO_Enu_SetPinDirection+0x24>
     182:	82 30       	cpi	r24, 0x02	; 2
     184:	81 f1       	breq	.+96     	; 0x1e6 <DIO_Enu_SetPinDirection+0x7c>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	09 f4       	brne	.+2      	; 0x18c <DIO_Enu_SetPinDirection+0x22>
     18a:	43 c0       	rjmp	.+134    	; 0x212 <DIO_Enu_SetPinDirection+0xa8>
     18c:	5e c0       	rjmp	.+188    	; 0x24a <DIO_Enu_SetPinDirection+0xe0>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	06 2e       	mov	r0, r22
     194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_Enu_SetPinDirection+0x30>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	0a 94       	dec	r0
     19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_Enu_SetPinDirection+0x2c>
     19e:	80 95       	com	r24
     1a0:	2a b3       	in	r18, 0x1a	; 26
     1a2:	28 23       	and	r18, r24
     1a4:	84 2f       	mov	r24, r20
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_Enu_SetPinDirection+0x44>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_Enu_SetPinDirection+0x40>
     1b2:	82 2b       	or	r24, r18
     1b4:	8a bb       	out	0x1a, r24	; 26
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	08 95       	ret
     1ba:	21 e0       	ldi	r18, 0x01	; 1
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	06 2e       	mov	r0, r22
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_Enu_SetPinDirection+0x5c>
     1c2:	22 0f       	add	r18, r18
     1c4:	33 1f       	adc	r19, r19
     1c6:	0a 94       	dec	r0
     1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_Enu_SetPinDirection+0x58>
     1ca:	20 95       	com	r18
     1cc:	87 b3       	in	r24, 0x17	; 23
     1ce:	28 23       	and	r18, r24
     1d0:	84 2f       	mov	r24, r20
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_Enu_SetPinDirection+0x70>
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	6a 95       	dec	r22
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_Enu_SetPinDirection+0x6c>
     1de:	82 2b       	or	r24, r18
     1e0:	87 bb       	out	0x17, r24	; 23
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	08 95       	ret
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	06 2e       	mov	r0, r22
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_Enu_SetPinDirection+0x88>
     1ee:	22 0f       	add	r18, r18
     1f0:	33 1f       	adc	r19, r19
     1f2:	0a 94       	dec	r0
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_Enu_SetPinDirection+0x84>
     1f6:	20 95       	com	r18
     1f8:	84 b3       	in	r24, 0x14	; 20
     1fa:	28 23       	and	r18, r24
     1fc:	84 2f       	mov	r24, r20
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_Enu_SetPinDirection+0x9c>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	6a 95       	dec	r22
     208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_Enu_SetPinDirection+0x98>
     20a:	82 2b       	or	r24, r18
     20c:	84 bb       	out	0x14, r24	; 20
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	08 95       	ret
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	06 2e       	mov	r0, r22
     218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_Enu_SetPinDirection+0xb4>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	0a 94       	dec	r0
     220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_Enu_SetPinDirection+0xb0>
     222:	20 95       	com	r18
     224:	81 b3       	in	r24, 0x11	; 17
     226:	28 23       	and	r18, r24
     228:	84 2f       	mov	r24, r20
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_Enu_SetPinDirection+0xc8>
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	6a 95       	dec	r22
     234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_Enu_SetPinDirection+0xc4>
     236:	82 2b       	or	r24, r18
     238:	81 bb       	out	0x11, r24	; 17
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	08 95       	ret
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	08 95       	ret
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	08 95       	ret
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	08 95       	ret
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	08 95       	ret

0000024e <DIO_Enu_SetPinValue>:
     24e:	84 30       	cpi	r24, 0x04	; 4
     250:	08 f0       	brcs	.+2      	; 0x254 <DIO_Enu_SetPinValue+0x6>
     252:	67 c0       	rjmp	.+206    	; 0x322 <DIO_Enu_SetPinValue+0xd4>
     254:	68 30       	cpi	r22, 0x08	; 8
     256:	08 f0       	brcs	.+2      	; 0x25a <DIO_Enu_SetPinValue+0xc>
     258:	66 c0       	rjmp	.+204    	; 0x326 <DIO_Enu_SetPinValue+0xd8>
     25a:	42 30       	cpi	r20, 0x02	; 2
     25c:	08 f0       	brcs	.+2      	; 0x260 <DIO_Enu_SetPinValue+0x12>
     25e:	65 c0       	rjmp	.+202    	; 0x32a <DIO_Enu_SetPinValue+0xdc>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	e9 f0       	breq	.+58     	; 0x29e <DIO_Enu_SetPinValue+0x50>
     264:	30 f0       	brcs	.+12     	; 0x272 <DIO_Enu_SetPinValue+0x24>
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	81 f1       	breq	.+96     	; 0x2ca <DIO_Enu_SetPinValue+0x7c>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	09 f4       	brne	.+2      	; 0x270 <DIO_Enu_SetPinValue+0x22>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <DIO_Enu_SetPinValue+0xa8>
     270:	5e c0       	rjmp	.+188    	; 0x32e <DIO_Enu_SetPinValue+0xe0>
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	06 2e       	mov	r0, r22
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_Enu_SetPinValue+0x30>
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	0a 94       	dec	r0
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_Enu_SetPinValue+0x2c>
     282:	80 95       	com	r24
     284:	2b b3       	in	r18, 0x1b	; 27
     286:	28 23       	and	r18, r24
     288:	84 2f       	mov	r24, r20
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_Enu_SetPinValue+0x44>
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	6a 95       	dec	r22
     294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_Enu_SetPinValue+0x40>
     296:	82 2b       	or	r24, r18
     298:	8b bb       	out	0x1b, r24	; 27
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	08 95       	ret
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	06 2e       	mov	r0, r22
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_Enu_SetPinValue+0x5c>
     2a6:	22 0f       	add	r18, r18
     2a8:	33 1f       	adc	r19, r19
     2aa:	0a 94       	dec	r0
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_Enu_SetPinValue+0x58>
     2ae:	20 95       	com	r18
     2b0:	88 b3       	in	r24, 0x18	; 24
     2b2:	28 23       	and	r18, r24
     2b4:	84 2f       	mov	r24, r20
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_Enu_SetPinValue+0x70>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	6a 95       	dec	r22
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_Enu_SetPinValue+0x6c>
     2c2:	82 2b       	or	r24, r18
     2c4:	88 bb       	out	0x18, r24	; 24
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	08 95       	ret
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	06 2e       	mov	r0, r22
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_Enu_SetPinValue+0x88>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_Enu_SetPinValue+0x84>
     2da:	20 95       	com	r18
     2dc:	85 b3       	in	r24, 0x15	; 21
     2de:	28 23       	and	r18, r24
     2e0:	84 2f       	mov	r24, r20
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_Enu_SetPinValue+0x9c>
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_Enu_SetPinValue+0x98>
     2ee:	82 2b       	or	r24, r18
     2f0:	85 bb       	out	0x15, r24	; 21
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	08 95       	ret
     2f6:	21 e0       	ldi	r18, 0x01	; 1
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	06 2e       	mov	r0, r22
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_Enu_SetPinValue+0xb4>
     2fe:	22 0f       	add	r18, r18
     300:	33 1f       	adc	r19, r19
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_Enu_SetPinValue+0xb0>
     306:	20 95       	com	r18
     308:	82 b3       	in	r24, 0x12	; 18
     30a:	28 23       	and	r18, r24
     30c:	84 2f       	mov	r24, r20
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_Enu_SetPinValue+0xc8>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_Enu_SetPinValue+0xc4>
     31a:	82 2b       	or	r24, r18
     31c:	82 bb       	out	0x12, r24	; 18
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	08 95       	ret
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	08 95       	ret
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	08 95       	ret
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	08 95       	ret
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	08 95       	ret

00000332 <DIO_Enu_GetPinValue>:

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
     332:	41 15       	cp	r20, r1
     334:	51 05       	cpc	r21, r1
     336:	e1 f1       	breq	.+120    	; 0x3b0 <DIO_Enu_GetPinValue+0x7e>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
     338:	84 30       	cpi	r24, 0x04	; 4
     33a:	e0 f5       	brcc	.+120    	; 0x3b4 <DIO_Enu_GetPinValue+0x82>
     33c:	68 30       	cpi	r22, 0x08	; 8
     33e:	e0 f5       	brcc	.+120    	; 0x3b8 <DIO_Enu_GetPinValue+0x86>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	91 f0       	breq	.+36     	; 0x368 <DIO_Enu_GetPinValue+0x36>
     344:	28 f0       	brcs	.+10     	; 0x350 <DIO_Enu_GetPinValue+0x1e>
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	d9 f0       	breq	.+54     	; 0x380 <DIO_Enu_GetPinValue+0x4e>
     34a:	83 30       	cpi	r24, 0x03	; 3
     34c:	29 f1       	breq	.+74     	; 0x398 <DIO_Enu_GetPinValue+0x66>
     34e:	36 c0       	rjmp	.+108    	; 0x3bc <DIO_Enu_GetPinValue+0x8a>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
     350:	89 b3       	in	r24, 0x19	; 25
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_Enu_GetPinValue+0x28>
     356:	95 95       	asr	r25
     358:	87 95       	ror	r24
     35a:	6a 95       	dec	r22
     35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_Enu_GetPinValue+0x24>
     35e:	81 70       	andi	r24, 0x01	; 1
     360:	fa 01       	movw	r30, r20
     362:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     364:	81 e0       	ldi	r24, 0x01	; 1
        {
            switch (Copy_u8PortID)
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
     366:	08 95       	ret
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
     368:	86 b3       	in	r24, 0x16	; 22
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_Enu_GetPinValue+0x40>
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	6a 95       	dec	r22
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_Enu_GetPinValue+0x3c>
     376:	81 70       	andi	r24, 0x01	; 1
     378:	fa 01       	movw	r30, r20
     37a:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     37c:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
     37e:	08 95       	ret
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
     380:	83 b3       	in	r24, 0x13	; 19
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_Enu_GetPinValue+0x58>
     386:	95 95       	asr	r25
     388:	87 95       	ror	r24
     38a:	6a 95       	dec	r22
     38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_Enu_GetPinValue+0x54>
     38e:	81 70       	andi	r24, 0x01	; 1
     390:	fa 01       	movw	r30, r20
     392:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     394:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
     396:	08 95       	ret
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
     398:	80 b3       	in	r24, 0x10	; 16
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_Enu_GetPinValue+0x70>
     39e:	95 95       	asr	r25
     3a0:	87 95       	ror	r24
     3a2:	6a 95       	dec	r22
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_Enu_GetPinValue+0x6c>
     3a6:	81 70       	andi	r24, 0x01	; 1
     3a8:	fa 01       	movw	r30, r20
     3aa:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
     3ae:	08 95       	ret
            Local_EnuErrorState = ES_OUT_OF_RANGE;
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	08 95       	ret
            }
            Local_EnuErrorState = ES_OK;
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	08 95       	ret
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	08 95       	ret
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
     3be:	08 95       	ret

000003c0 <DIO_Enu_WriteHighNibbles>:
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID, u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

    if ((Copy_u8PortID <= DIO_PORTD))
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	10 f5       	brcc	.+68     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
    {
        Copy_u8Value = (Copy_u8Value << 4);
     3c4:	62 95       	swap	r22
     3c6:	60 7f       	andi	r22, 0xF0	; 240
        switch (Copy_u8PortID)
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	61 f0       	breq	.+24     	; 0x3e4 <DIO_Enu_WriteHighNibbles+0x24>
     3cc:	28 f0       	brcs	.+10     	; 0x3d8 <DIO_Enu_WriteHighNibbles+0x18>
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	79 f0       	breq	.+30     	; 0x3f0 <DIO_Enu_WriteHighNibbles+0x30>
     3d2:	83 30       	cpi	r24, 0x03	; 3
     3d4:	99 f0       	breq	.+38     	; 0x3fc <DIO_Enu_WriteHighNibbles+0x3c>
     3d6:	1a c0       	rjmp	.+52     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
        {
        case DIO_PORTA:
            PORTA &= 0x0f;
     3d8:	8b b3       	in	r24, 0x1b	; 27
     3da:	8f 70       	andi	r24, 0x0F	; 15
            PORTA |= Copy_u8Value;
     3dc:	68 2b       	or	r22, r24
     3de:	6b bb       	out	0x1b, r22	; 27
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     3e0:	81 e0       	ldi	r24, 0x01	; 1
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            PORTA &= 0x0f;
            PORTA |= Copy_u8Value;
            break;
     3e2:	08 95       	ret
        case DIO_PORTB:
            PORTB &= 0x0f;
     3e4:	88 b3       	in	r24, 0x18	; 24
     3e6:	8f 70       	andi	r24, 0x0F	; 15
            PORTB |= Copy_u8Value;
     3e8:	68 2b       	or	r22, r24
     3ea:	68 bb       	out	0x18, r22	; 24
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
            PORTA |= Copy_u8Value;
            break;
        case DIO_PORTB:
            PORTB &= 0x0f;
            PORTB |= Copy_u8Value;
            break;
     3ee:	08 95       	ret
        case DIO_PORTC:
            PORTC &= 0x0f;
     3f0:	85 b3       	in	r24, 0x15	; 21
     3f2:	8f 70       	andi	r24, 0x0F	; 15
            PORTC |= Copy_u8Value;
     3f4:	68 2b       	or	r22, r24
     3f6:	65 bb       	out	0x15, r22	; 21
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
            PORTB |= Copy_u8Value;
            break;
        case DIO_PORTC:
            PORTC &= 0x0f;
            PORTC |= Copy_u8Value;
            break;
     3fa:	08 95       	ret
        case DIO_PORTD:
            PORTD &= 0x0f;
     3fc:	82 b3       	in	r24, 0x12	; 18
     3fe:	8f 70       	andi	r24, 0x0F	; 15
            PORTD |= Copy_u8Value;
     400:	68 2b       	or	r22, r24
     402:	62 bb       	out	0x12, r22	; 18
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     404:	81 e0       	ldi	r24, 0x01	; 1
            PORTC |= Copy_u8Value;
            break;
        case DIO_PORTD:
            PORTD &= 0x0f;
            PORTD |= Copy_u8Value;
            break;
     406:	08 95       	ret
        }
        Local_EnuErrorState = ES_OK;
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	08 95       	ret
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     40c:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
     40e:	08 95       	ret

00000410 <EXI_SetCallBack>:
		break;
	case EX_INT1:
		CLR_BIT(GICR, INT1);
		break;
	case EX_INT2:
		CLR_BIT(GICR, INT2);
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	49 f0       	breq	.+18     	; 0x426 <EXI_SetCallBack+0x16>
     414:	18 f0       	brcs	.+6      	; 0x41c <EXI_SetCallBack+0xc>
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	59 f0       	breq	.+22     	; 0x430 <EXI_SetCallBack+0x20>
     41a:	08 95       	ret
     41c:	70 93 ef 00 	sts	0x00EF, r23	; 0x8000ef <INT0_Fptr+0x1>
     420:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <INT0_Fptr>
     424:	08 95       	ret
     426:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <INT1_Fptr+0x1>
     42a:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <INT1_Fptr>
     42e:	08 95       	ret
     430:	70 93 eb 00 	sts	0x00EB, r23	; 0x8000eb <__data_end+0x1>
     434:	60 93 ea 00 	sts	0x00EA, r22	; 0x8000ea <__data_end>
     438:	08 95       	ret

0000043a <EXI_Enable>:
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	41 f0       	breq	.+16     	; 0x44e <EXI_Enable+0x14>
     43e:	18 f0       	brcs	.+6      	; 0x446 <EXI_Enable+0xc>
     440:	82 30       	cpi	r24, 0x02	; 2
     442:	49 f0       	breq	.+18     	; 0x456 <EXI_Enable+0x1c>
     444:	08 95       	ret
     446:	8b b7       	in	r24, 0x3b	; 59
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	8b bf       	out	0x3b, r24	; 59
     44c:	08 95       	ret
     44e:	8b b7       	in	r24, 0x3b	; 59
     450:	80 68       	ori	r24, 0x80	; 128
     452:	8b bf       	out	0x3b, r24	; 59
     454:	08 95       	ret
     456:	8b b7       	in	r24, 0x3b	; 59
     458:	80 62       	ori	r24, 0x20	; 32
     45a:	8b bf       	out	0x3b, r24	; 59
     45c:	08 95       	ret

0000045e <EXI_TriggerEdge>:
	}
}
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt, TriggerEdge_type Edge)
{
	switch (Interrupt)
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	49 f1       	breq	.+82     	; 0x4b4 <EXI_TriggerEdge+0x56>
     462:	20 f0       	brcs	.+8      	; 0x46c <EXI_TriggerEdge+0xe>
     464:	82 30       	cpi	r24, 0x02	; 2
     466:	09 f4       	brne	.+2      	; 0x46a <EXI_TriggerEdge+0xc>
     468:	49 c0       	rjmp	.+146    	; 0x4fc <EXI_TriggerEdge+0x9e>
     46a:	08 95       	ret
	{
	case EX_INT0:
		switch (Edge)
     46c:	61 30       	cpi	r22, 0x01	; 1
     46e:	69 f0       	breq	.+26     	; 0x48a <EXI_TriggerEdge+0x2c>
     470:	28 f0       	brcs	.+10     	; 0x47c <EXI_TriggerEdge+0x1e>
     472:	62 30       	cpi	r22, 0x02	; 2
     474:	89 f0       	breq	.+34     	; 0x498 <EXI_TriggerEdge+0x3a>
     476:	63 30       	cpi	r22, 0x03	; 3
     478:	b1 f0       	breq	.+44     	; 0x4a6 <EXI_TriggerEdge+0x48>
     47a:	08 95       	ret
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC00);
     47c:	85 b7       	in	r24, 0x35	; 53
     47e:	8e 7f       	andi	r24, 0xFE	; 254
     480:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC01);
     482:	85 b7       	in	r24, 0x35	; 53
     484:	8d 7f       	andi	r24, 0xFD	; 253
     486:	85 bf       	out	0x35, r24	; 53
			break;
     488:	08 95       	ret
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR, ISC00);
     48a:	85 b7       	in	r24, 0x35	; 53
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC01);
     490:	85 b7       	in	r24, 0x35	; 53
     492:	8d 7f       	andi	r24, 0xFD	; 253
     494:	85 bf       	out	0x35, r24	; 53
			break;
     496:	08 95       	ret
		case FALLING_EDGE:
			CLR_BIT(MCUCR, ISC00);
     498:	85 b7       	in	r24, 0x35	; 53
     49a:	8e 7f       	andi	r24, 0xFE	; 254
     49c:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC01);
     49e:	85 b7       	in	r24, 0x35	; 53
     4a0:	82 60       	ori	r24, 0x02	; 2
     4a2:	85 bf       	out	0x35, r24	; 53
			break;
     4a4:	08 95       	ret
		case RISING_EDGE:
			SET_BIT(MCUCR, ISC00);
     4a6:	85 b7       	in	r24, 0x35	; 53
     4a8:	81 60       	ori	r24, 0x01	; 1
     4aa:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC01);
     4ac:	85 b7       	in	r24, 0x35	; 53
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	85 bf       	out	0x35, r24	; 53
			break;
     4b2:	08 95       	ret
		}
		break;
	case EX_INT1:
		switch (Edge)
     4b4:	61 30       	cpi	r22, 0x01	; 1
     4b6:	69 f0       	breq	.+26     	; 0x4d2 <EXI_TriggerEdge+0x74>
     4b8:	28 f0       	brcs	.+10     	; 0x4c4 <EXI_TriggerEdge+0x66>
     4ba:	62 30       	cpi	r22, 0x02	; 2
     4bc:	89 f0       	breq	.+34     	; 0x4e0 <EXI_TriggerEdge+0x82>
     4be:	63 30       	cpi	r22, 0x03	; 3
     4c0:	b1 f0       	breq	.+44     	; 0x4ee <EXI_TriggerEdge+0x90>
     4c2:	08 95       	ret
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC10);
     4c4:	85 b7       	in	r24, 0x35	; 53
     4c6:	8b 7f       	andi	r24, 0xFB	; 251
     4c8:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC11);
     4ca:	85 b7       	in	r24, 0x35	; 53
     4cc:	87 7f       	andi	r24, 0xF7	; 247
     4ce:	85 bf       	out	0x35, r24	; 53
			break;
     4d0:	08 95       	ret
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR, ISC10);
     4d2:	85 b7       	in	r24, 0x35	; 53
     4d4:	84 60       	ori	r24, 0x04	; 4
     4d6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC11);
     4d8:	85 b7       	in	r24, 0x35	; 53
     4da:	87 7f       	andi	r24, 0xF7	; 247
     4dc:	85 bf       	out	0x35, r24	; 53
			break;
     4de:	08 95       	ret
		case FALLING_EDGE:
			CLR_BIT(MCUCR, ISC10);
     4e0:	85 b7       	in	r24, 0x35	; 53
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
     4e4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC11);
     4e6:	85 b7       	in	r24, 0x35	; 53
     4e8:	88 60       	ori	r24, 0x08	; 8
     4ea:	85 bf       	out	0x35, r24	; 53
			break;
     4ec:	08 95       	ret
		case RISING_EDGE:
			SET_BIT(MCUCR, ISC10);
     4ee:	85 b7       	in	r24, 0x35	; 53
     4f0:	84 60       	ori	r24, 0x04	; 4
     4f2:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC11);
     4f4:	85 b7       	in	r24, 0x35	; 53
     4f6:	88 60       	ori	r24, 0x08	; 8
     4f8:	85 bf       	out	0x35, r24	; 53
			break;
     4fa:	08 95       	ret
		}
		break;
	case EX_INT2:
		switch (Edge)
     4fc:	62 30       	cpi	r22, 0x02	; 2
     4fe:	19 f0       	breq	.+6      	; 0x506 <EXI_TriggerEdge+0xa8>
     500:	63 30       	cpi	r22, 0x03	; 3
     502:	29 f0       	breq	.+10     	; 0x50e <EXI_TriggerEdge+0xb0>
     504:	08 c0       	rjmp	.+16     	; 0x516 <EXI_TriggerEdge+0xb8>
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR, ISC2);
     506:	84 b7       	in	r24, 0x34	; 52
     508:	8f 7b       	andi	r24, 0xBF	; 191
     50a:	84 bf       	out	0x34, r24	; 52
			break;
     50c:	08 95       	ret
		case RISING_EDGE:
			SET_BIT(MCUCSR, ISC2);
     50e:	84 b7       	in	r24, 0x34	; 52
     510:	80 64       	ori	r24, 0x40	; 64
     512:	84 bf       	out	0x34, r24	; 52
			break;
     514:	08 95       	ret
		default:
			CLR_BIT(MCUCSR, ISC2);
     516:	84 b7       	in	r24, 0x34	; 52
     518:	8f 7b       	andi	r24, 0xBF	; 191
     51a:	84 bf       	out	0x34, r24	; 52
     51c:	08 95       	ret

0000051e <__vector_1>:
		break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	0f 92       	push	r0
     526:	11 24       	eor	r1, r1
     528:	2f 93       	push	r18
     52a:	3f 93       	push	r19
     52c:	4f 93       	push	r20
     52e:	5f 93       	push	r21
     530:	6f 93       	push	r22
     532:	7f 93       	push	r23
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	af 93       	push	r26
     53a:	bf 93       	push	r27
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	if (INT0_Fptr != NULL)
     540:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <INT0_Fptr>
     544:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <INT0_Fptr+0x1>
     548:	30 97       	sbiw	r30, 0x00	; 0
     54a:	09 f0       	breq	.+2      	; 0x54e <__vector_1+0x30>
	{
		INT0_Fptr();
     54c:	09 95       	icall
	}
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_2>:
ISR(INT1_vect)
{
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
	if (INT1_Fptr != NULL)
     592:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <INT1_Fptr>
     596:	f0 91 ed 00 	lds	r31, 0x00ED	; 0x8000ed <INT1_Fptr+0x1>
     59a:	30 97       	sbiw	r30, 0x00	; 0
     59c:	09 f0       	breq	.+2      	; 0x5a0 <__vector_2+0x30>
	{
		INT1_Fptr();
     59e:	09 95       	icall
	}
}
     5a0:	ff 91       	pop	r31
     5a2:	ef 91       	pop	r30
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <__vector_3>:
ISR(INT2_vect)
{
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	2f 93       	push	r18
     5ce:	3f 93       	push	r19
     5d0:	4f 93       	push	r20
     5d2:	5f 93       	push	r21
     5d4:	6f 93       	push	r22
     5d6:	7f 93       	push	r23
     5d8:	8f 93       	push	r24
     5da:	9f 93       	push	r25
     5dc:	af 93       	push	r26
     5de:	bf 93       	push	r27
     5e0:	ef 93       	push	r30
     5e2:	ff 93       	push	r31
	if (INT2_Fptr != NULL)
     5e4:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <__data_end>
     5e8:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <__data_end+0x1>
     5ec:	30 97       	sbiw	r30, 0x00	; 0
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <__vector_3+0x30>
	{
		INT2_Fptr();
     5f0:	09 95       	icall
	}
}
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	bf 91       	pop	r27
     5f8:	af 91       	pop	r26
     5fa:	9f 91       	pop	r25
     5fc:	8f 91       	pop	r24
     5fe:	7f 91       	pop	r23
     600:	6f 91       	pop	r22
     602:	5f 91       	pop	r21
     604:	4f 91       	pop	r20
     606:	3f 91       	pop	r19
     608:	2f 91       	pop	r18
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <KPD_enu_Init>:
{
	ES_t Local_EnuErrorState = ES_NOT_OK;

	/*This code equivalent to connect pull up for the pins of the rows */

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R0, DIO_u8INPUT);
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R1, DIO_u8INPUT);
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R2, DIO_u8INPUT);
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	62 e0       	ldi	r22, 0x02	; 2
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R3, DIO_u8INPUT);
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	63 e0       	ldi	r22, 0x03	; 3
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_R0, DIO_u8HIGH);
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R1, DIO_u8HIGH);
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R2, DIO_u8HIGH);
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R3, DIO_u8HIGH);
     65a:	41 e0       	ldi	r20, 0x01	; 1
     65c:	63 e0       	ldi	r22, 0x03	; 3
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>

	/*connect the pins of the columns as output pins (HIGH)*/

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C0, DIO_u8OUTPUT);
     664:	41 e0       	ldi	r20, 0x01	; 1
     666:	64 e0       	ldi	r22, 0x04	; 4
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C1, DIO_u8OUTPUT);
     66e:	41 e0       	ldi	r20, 0x01	; 1
     670:	65 e0       	ldi	r22, 0x05	; 5
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C2, DIO_u8OUTPUT);
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	66 e0       	ldi	r22, 0x06	; 6
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C3, DIO_u8OUTPUT);
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	67 e0       	ldi	r22, 0x07	; 7
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_C0, DIO_u8HIGH);
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	64 e0       	ldi	r22, 0x04	; 4
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C1, DIO_u8HIGH);
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	65 e0       	ldi	r22, 0x05	; 5
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C2, DIO_u8HIGH);
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	66 e0       	ldi	r22, 0x06	; 6
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C3, DIO_u8HIGH);
     6aa:	41 e0       	ldi	r20, 0x01	; 1
     6ac:	67 e0       	ldi	r22, 0x07	; 7
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>

#if COLS_NUM == 6
	DIO_Enu_SetPinDirection(KPD_PORT_PLUS, KPD_C4, DIO_u8OUTPUT);
     6b4:	41 e0       	ldi	r20, 0x01	; 1
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT_PLUS, KPD_C5, DIO_u8OUTPUT);
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinValue(KPD_PORT_PLUS, KPD_C4, DIO_u8HIGH);
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT_PLUS, KPD_C5, DIO_u8HIGH);
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
#endif
	Local_EnuErrorState = ES_OK;

	return Local_EnuErrorState;
}
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	08 95       	ret

000006e0 <KPD_enu_GetPressed>:

ES_t KPD_enu_GetPressed(u8 *Copy_pu8Value)
{
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	1f 92       	push	r1
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	6c 01       	movw	r12, r24
#if COLS_NUM == 4
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
#elif COLS_NUM == 6
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3, KPD_C4, KPD_C5};
#endif
	*Copy_pu8Value = NOTPRESSED;
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	f6 01       	movw	r30, r12
     6fc:	80 83       	st	Z, r24
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
     6fe:	00 e0       	ldi	r16, 0x00	; 0
     700:	5c c0       	rjmp	.+184    	; 0x7ba <KPD_enu_GetPressed+0xda>
	{
#if COLS_NUM == 4
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
#elif COLS_NUM == 6
		if (LOC_u8ColumnIndex < 4)
     702:	04 30       	cpi	r16, 0x04	; 4
     704:	58 f4       	brcc	.+22     	; 0x71c <KPD_enu_GetPressed+0x3c>
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
     706:	e0 2f       	mov	r30, r16
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	e5 59       	subi	r30, 0x95	; 149
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	60 81       	ld	r22, Z
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>

	return Local_EnuErrorState;
}

ES_t KPD_enu_GetPressed(u8 *Copy_pu8Value)
{
     718:	10 e0       	ldi	r17, 0x00	; 0
     71a:	37 c0       	rjmp	.+110    	; 0x78a <KPD_enu_GetPressed+0xaa>
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
#elif COLS_NUM == 6
		if (LOC_u8ColumnIndex < 4)
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		else
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
     71c:	e0 2f       	mov	r30, r16
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	e5 59       	subi	r30, 0x95	; 149
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	60 81       	ld	r22, Z
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     72e:	f4 cf       	rjmp	.-24     	; 0x718 <KPD_enu_GetPressed+0x38>
#endif
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
     730:	e1 2e       	mov	r14, r17
     732:	f1 2c       	mov	r15, r1
     734:	f7 01       	movw	r30, r14
     736:	e9 59       	subi	r30, 0x99	; 153
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	ae 01       	movw	r20, r28
     73c:	4f 5f       	subi	r20, 0xFF	; 255
     73e:	5f 4f       	sbci	r21, 0xFF	; 255
     740:	60 81       	ld	r22, Z
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	0e 94 99 01 	call	0x332	; 0x332 <DIO_Enu_GetPinValue>
			if (LOC_u8PinState == DIO_u8LOW)
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	81 11       	cpse	r24, r1
     74c:	1d c0       	rjmp	.+58     	; 0x788 <KPD_enu_GetPressed+0xa8>
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
     74e:	f7 01       	movw	r30, r14
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ee 0d       	add	r30, r14
     756:	ff 1d       	adc	r31, r15
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	ef 58       	subi	r30, 0x8F	; 143
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	e0 0f       	add	r30, r16
     762:	f1 1d       	adc	r31, r1
     764:	80 81       	ld	r24, Z
     766:	f6 01       	movw	r30, r12
     768:	80 83       	st	Z, r24
				while (LOC_u8PinState == DIO_u8LOW)
     76a:	0a c0       	rjmp	.+20     	; 0x780 <KPD_enu_GetPressed+0xa0>
				{
					DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
     76c:	ae 01       	movw	r20, r28
     76e:	4f 5f       	subi	r20, 0xFF	; 255
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	f7 01       	movw	r30, r14
     774:	e9 59       	subi	r30, 0x99	; 153
     776:	ff 4f       	sbci	r31, 0xFF	; 255
     778:	60 81       	ld	r22, Z
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	0e 94 99 01 	call	0x332	; 0x332 <DIO_Enu_GetPinValue>
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
			if (LOC_u8PinState == DIO_u8LOW)
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
				while (LOC_u8PinState == DIO_u8LOW)
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	88 23       	and	r24, r24
     784:	99 f3       	breq	.-26     	; 0x76c <KPD_enu_GetPressed+0x8c>
     786:	1c c0       	rjmp	.+56     	; 0x7c0 <KPD_enu_GetPressed+0xe0>
		if (LOC_u8ColumnIndex < 4)
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		else
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
#endif
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
     788:	1f 5f       	subi	r17, 0xFF	; 255
     78a:	14 30       	cpi	r17, 0x04	; 4
     78c:	88 f2       	brcs	.-94     	; 0x730 <KPD_enu_GetPressed+0x50>
			}
		}
#if COLS_NUM == 4
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
#elif COLS_NUM == 6
		if (LOC_u8ColumnIndex < 4)
     78e:	04 30       	cpi	r16, 0x04	; 4
     790:	50 f4       	brcc	.+20     	; 0x7a6 <KPD_enu_GetPressed+0xc6>
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
     792:	e0 2f       	mov	r30, r16
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	e5 59       	subi	r30, 0x95	; 149
     798:	ff 4f       	sbci	r31, 0xFF	; 255
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	60 81       	ld	r22, Z
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <KPD_enu_GetPressed+0xd8>
		else
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
     7a6:	e0 2f       	mov	r30, r16
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	e5 59       	subi	r30, 0x95	; 149
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	41 e0       	ldi	r20, 0x01	; 1
     7b0:	60 81       	ld	r22, Z
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
#elif COLS_NUM == 6
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3, KPD_C4, KPD_C5};
#endif
	*Copy_pu8Value = NOTPRESSED;
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
     7b8:	0f 5f       	subi	r16, 0xFF	; 255
     7ba:	06 30       	cpi	r16, 0x06	; 6
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <KPD_enu_GetPressed+0xe0>
     7be:	a1 cf       	rjmp	.-190    	; 0x702 <KPD_enu_GetPressed+0x22>
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
#endif
	}
	Local_EnuErrorState = ES_OK;
	return Local_EnuErrorState;
}
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	08 95       	ret

000007d6 <LCD_voidSendFallingEdge>:
        LCD_enuSendData(LOC_u8Iterator);
    }
    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     7e0:	8f ec       	ldi	r24, 0xCF	; 207
     7e2:	97 e0       	ldi	r25, 0x07	; 7
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <LCD_voidSendFallingEdge+0xe>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <LCD_voidSendFallingEdge+0x14>
     7ea:	00 00       	nop
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	62 e0       	ldi	r22, 0x02	; 2
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     7f6:	8f ec       	ldi	r24, 0xCF	; 207
     7f8:	97 e0       	ldi	r25, 0x07	; 7
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_voidSendFallingEdge+0x24>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	00 00       	nop
     802:	08 95       	ret

00000804 <LCD_enuSendCommand>:
     804:	cf 93       	push	r28
     806:	c8 2f       	mov	r28, r24
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     81c:	6c 2f       	mov	r22, r28
     81e:	62 95       	swap	r22
     820:	6f 70       	andi	r22, 0x0F	; 15
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_Enu_WriteHighNibbles>
     828:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_voidSendFallingEdge>
     82c:	6c 2f       	mov	r22, r28
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_Enu_WriteHighNibbles>
     834:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_voidSendFallingEdge>
     838:	8f ec       	ldi	r24, 0xCF	; 207
     83a:	97 e0       	ldi	r25, 0x07	; 7
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <LCD_enuSendCommand+0x38>
     840:	00 c0       	rjmp	.+0      	; 0x842 <LCD_enuSendCommand+0x3e>
     842:	00 00       	nop
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <LCD_enuSendData>:
     84a:	cf 93       	push	r28
     84c:	c8 2f       	mov	r28, r24
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_Enu_SetPinValue>
     862:	6c 2f       	mov	r22, r28
     864:	62 95       	swap	r22
     866:	6f 70       	andi	r22, 0x0F	; 15
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_Enu_WriteHighNibbles>
     86e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_voidSendFallingEdge>
     872:	6c 2f       	mov	r22, r28
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_Enu_WriteHighNibbles>
     87a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCD_voidSendFallingEdge>
     87e:	8f ec       	ldi	r24, 0xCF	; 207
     880:	97 e0       	ldi	r25, 0x07	; 7
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <__stack+0x23>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
     888:	00 00       	nop
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <LCD_enuSendString>:
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	8c 01       	movw	r16, r24
     898:	c0 e0       	ldi	r28, 0x00	; 0
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <LCD_enuSendString+0x12>
     89c:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_enuSendData>
     8a0:	cf 5f       	subi	r28, 0xFF	; 255
     8a2:	f8 01       	movw	r30, r16
     8a4:	ec 0f       	add	r30, r28
     8a6:	f1 1d       	adc	r31, r1
     8a8:	80 81       	ld	r24, Z
     8aa:	81 11       	cpse	r24, r1
     8ac:	f7 cf       	rjmp	.-18     	; 0x89c <LCD_enuSendString+0xc>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	08 95       	ret

000008b8 <LCD_enuSetPosition>:
     8b8:	9f ef       	ldi	r25, 0xFF	; 255
     8ba:	98 0f       	add	r25, r24
     8bc:	92 30       	cpi	r25, 0x02	; 2
     8be:	70 f4       	brcc	.+28     	; 0x8dc <LCD_enuSetPosition+0x24>
     8c0:	61 31       	cpi	r22, 0x11	; 17
     8c2:	70 f4       	brcc	.+28     	; 0x8e0 <LCD_enuSetPosition+0x28>
     8c4:	66 23       	and	r22, r22
     8c6:	71 f0       	breq	.+28     	; 0x8e4 <LCD_enuSetPosition+0x2c>
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	19 f4       	brne	.+6      	; 0x8d2 <LCD_enuSetPosition+0x1a>
     8cc:	2f e7       	ldi	r18, 0x7F	; 127
     8ce:	26 0f       	add	r18, r22
     8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <LCD_enuSetPosition+0x2e>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	41 f4       	brne	.+16     	; 0x8e6 <LCD_enuSetPosition+0x2e>
     8d6:	2f eb       	ldi	r18, 0xBF	; 191
     8d8:	26 0f       	add	r18, r22
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <LCD_enuSetPosition+0x2e>
     8dc:	20 e8       	ldi	r18, 0x80	; 128
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <LCD_enuSetPosition+0x2e>
     8e0:	20 e8       	ldi	r18, 0x80	; 128
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <LCD_enuSetPosition+0x2e>
     8e4:	20 e8       	ldi	r18, 0x80	; 128
     8e6:	82 2f       	mov	r24, r18
     8e8:	0e 94 02 04 	call	0x804	; 0x804 <LCD_enuSendCommand>
     8ec:	8f ec       	ldi	r24, 0xCF	; 207
     8ee:	97 e0       	ldi	r25, 0x07	; 7
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCD_enuSetPosition+0x38>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <LCD_enuSetPosition+0x3e>
     8f6:	00 00       	nop
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	08 95       	ret

000008fc <LCD_enuClearScreen>:

ES_t LCD_enuClearScreen(void)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;
    LCD_enuSendCommand(lcd_Clear);
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	0e 94 02 04 	call	0x804	; 0x804 <LCD_enuSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     902:	8f e9       	ldi	r24, 0x9F	; 159
     904:	9f e0       	ldi	r25, 0x0F	; 15
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <LCD_enuClearScreen+0xa>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <LCD_enuClearScreen+0x10>
     90c:	00 00       	nop
    _delay_ms(2); // wait more than 1.53 ms

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	08 95       	ret

00000912 <LCD_enuInit>:
     912:	2f e7       	ldi	r18, 0x7F	; 127
     914:	88 e3       	ldi	r24, 0x38	; 56
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	21 50       	subi	r18, 0x01	; 1
     91a:	80 40       	sbci	r24, 0x00	; 0
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <LCD_enuInit+0x6>
     920:	00 c0       	rjmp	.+0      	; 0x922 <LCD_enuInit+0x10>
     922:	00 00       	nop

#elif LCD_MODE == 4

    // 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
    _delay_ms(50);
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN4, DIO_u8OUTPUT);
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	64 e0       	ldi	r22, 0x04	; 4
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN5, DIO_u8OUTPUT);
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	65 e0       	ldi	r22, 0x05	; 5
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN6, DIO_u8OUTPUT);
     938:	41 e0       	ldi	r20, 0x01	; 1
     93a:	66 e0       	ldi	r22, 0x06	; 6
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN7, DIO_u8OUTPUT);
     942:	41 e0       	ldi	r20, 0x01	; 1
     944:	67 e0       	ldi	r22, 0x07	; 7
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RS, DIO_u8OUTPUT);
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RW, DIO_u8OUTPUT);
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_EN, DIO_u8OUTPUT);
     960:	41 e0       	ldi	r20, 0x01	; 1
     962:	62 e0       	ldi	r22, 0x02	; 2
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Enu_SetPinDirection>

    /*return home*/
    LCD_enuSendCommand(lcd_Home);
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_enuSendCommand>
     970:	8f e5       	ldi	r24, 0x5F	; 95
     972:	9a ee       	ldi	r25, 0xEA	; 234
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <LCD_enuInit+0x62>
     978:	00 c0       	rjmp	.+0      	; 0x97a <LCD_enuInit+0x68>
     97a:	00 00       	nop
    _delay_ms(30);

    /*FUNCTION SET Command*/
    LCD_enuSendCommand(FOUR_BITS); // 4 Bit Mode
     97c:	88 e2       	ldi	r24, 0x28	; 40
     97e:	0e 94 02 04 	call	0x804	; 0x804 <LCD_enuSendCommand>
     982:	8f ec       	ldi	r24, 0xCF	; 207
     984:	97 e0       	ldi	r25, 0x07	; 7
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <LCD_enuInit+0x74>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <LCD_enuInit+0x7a>
     98c:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY & Cursor (ON / OFF) Control */
    LCD_enuSendCommand(lcd_DisplayOn_CursorOff);
     98e:	8c e0       	ldi	r24, 0x0C	; 12
     990:	0e 94 02 04 	call	0x804	; 0x804 <LCD_enuSendCommand>
     994:	8f ec       	ldi	r24, 0xCF	; 207
     996:	97 e0       	ldi	r25, 0x07	; 7
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <LCD_enuInit+0x86>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <LCD_enuInit+0x8c>
     99e:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY CLEAR */
    LCD_enuClearScreen();
     9a0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>

    /* ENTRY MODE  Set*/
    LCD_enuSendCommand(lcd_EntryMode);
     9a4:	86 e0       	ldi	r24, 0x06	; 6
     9a6:	0e 94 02 04 	call	0x804	; 0x804 <LCD_enuSendCommand>
     9aa:	8f ec       	ldi	r24, 0xCF	; 207
     9ac:	97 e0       	ldi	r25, 0x07	; 7
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <LCD_enuInit+0x9c>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <LCD_enuInit+0xa2>
     9b4:	00 00       	nop
#endif

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	08 95       	ret

000009ba <display>:
	}
}

void display(ELEMENT_TYPE ch)
{
	printf("%f  ", ch.f64_element);
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	7f 93       	push	r23
     9c0:	6f 93       	push	r22
     9c2:	89 e8       	ldi	r24, 0x89	; 137
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	0e 94 89 11 	call	0x2312	; 0x2312 <printf>
}
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	08 95       	ret

000009dc <reverse>:
#include "APP.h"
// A utility function to reverse a string
void reverse(char *str, int len)
{
	int i = 0, j = len - 1, temp;
     9dc:	61 50       	subi	r22, 0x01	; 1
     9de:	71 09       	sbc	r23, r1
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
	while (i < j)
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <reverse+0x26>
	{
		temp = str[i];
     9e6:	dc 01       	movw	r26, r24
     9e8:	a2 0f       	add	r26, r18
     9ea:	b3 1f       	adc	r27, r19
     9ec:	4c 91       	ld	r20, X
		str[i] = str[j];
     9ee:	fc 01       	movw	r30, r24
     9f0:	e6 0f       	add	r30, r22
     9f2:	f7 1f       	adc	r31, r23
     9f4:	50 81       	ld	r21, Z
     9f6:	5c 93       	st	X, r21
		str[j] = temp;
     9f8:	40 83       	st	Z, r20
		i++;
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
		j--;
     9fe:	61 50       	subi	r22, 0x01	; 1
     a00:	71 09       	sbc	r23, r1
#include "APP.h"
// A utility function to reverse a string
void reverse(char *str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j)
     a02:	26 17       	cp	r18, r22
     a04:	37 07       	cpc	r19, r23
     a06:	7c f3       	brlt	.-34     	; 0x9e6 <reverse+0xa>
		str[i] = str[j];
		str[j] = temp;
		i++;
		j--;
	}
}
     a08:	08 95       	ret

00000a0a <intToStr>:

// Converts a given integer x to string str[]. d is the number
// of digits required in the output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	8b 01       	movw	r16, r22
     a14:	9a 01       	movw	r18, r20
	int i = 0;
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	d0 e0       	ldi	r29, 0x00	; 0
	while (x)
     a1a:	0c c0       	rjmp	.+24     	; 0xa34 <intToStr+0x2a>
	{
		str[i++] = (x % 10) + '0';
     a1c:	f8 01       	movw	r30, r16
     a1e:	ec 0f       	add	r30, r28
     a20:	fd 1f       	adc	r31, r29
     a22:	6a e0       	ldi	r22, 0x0A	; 10
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__divmodhi4>
     a2a:	80 5d       	subi	r24, 0xD0	; 208
     a2c:	80 83       	st	Z, r24
		x = x / 10;
     a2e:	86 2f       	mov	r24, r22
     a30:	97 2f       	mov	r25, r23
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
	{
		str[i++] = (x % 10) + '0';
     a32:	21 96       	adiw	r28, 0x01	; 1
// of digits required in the output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	91 f7       	brne	.-28     	; 0xa1c <intToStr+0x12>
     a38:	06 c0       	rjmp	.+12     	; 0xa46 <intToStr+0x3c>
	}

	// If the number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
		str[i++] = '0';
     a3a:	f8 01       	movw	r30, r16
     a3c:	ec 0f       	add	r30, r28
     a3e:	fd 1f       	adc	r31, r29
     a40:	80 e3       	ldi	r24, 0x30	; 48
     a42:	80 83       	st	Z, r24
     a44:	21 96       	adiw	r28, 0x01	; 1
		x = x / 10;
	}

	// If the number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     a46:	c2 17       	cp	r28, r18
     a48:	d3 07       	cpc	r29, r19
     a4a:	bc f3       	brlt	.-18     	; 0xa3a <intToStr+0x30>
		str[i++] = '0';

	reverse(str, i);
     a4c:	be 01       	movw	r22, r28
     a4e:	c8 01       	movw	r24, r16
     a50:	0e 94 ee 04 	call	0x9dc	; 0x9dc <reverse>
	str[i] = '\0';
     a54:	f8 01       	movw	r30, r16
     a56:	ec 0f       	add	r30, r28
     a58:	fd 1f       	adc	r31, r29
     a5a:	10 82       	st	Z, r1
	return i;
}
     a5c:	ce 01       	movw	r24, r28
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char *res, int afterpoint)
{
     a68:	4f 92       	push	r4
     a6a:	5f 92       	push	r5
     a6c:	6f 92       	push	r6
     a6e:	7f 92       	push	r7
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	6b 01       	movw	r12, r22
     a8a:	7c 01       	movw	r14, r24
     a8c:	8a 01       	movw	r16, r20
     a8e:	e9 01       	movw	r28, r18
	if (n < 0)
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	a9 01       	movw	r20, r18
     a96:	0e 94 9e 0c 	call	0x193c	; 0x193c <__cmpsf2>
     a9a:	88 23       	and	r24, r24
     a9c:	24 f4       	brge	.+8      	; 0xaa6 <ftoa+0x3e>
		n *= -1;
     a9e:	f7 fa       	bst	r15, 7
     aa0:	f0 94       	com	r15
     aa2:	f7 f8       	bld	r15, 7
     aa4:	f0 94       	com	r15
	// Extract integer part
	int ipart = (int)n;
     aa6:	c7 01       	movw	r24, r14
     aa8:	b6 01       	movw	r22, r12
     aaa:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
     aae:	4b 01       	movw	r8, r22
     ab0:	5c 01       	movw	r10, r24

	// Extract floating part
	float fpart = n - (float)ipart;
     ab2:	07 2e       	mov	r0, r23
     ab4:	00 0c       	add	r0, r0
     ab6:	88 0b       	sbc	r24, r24
     ab8:	99 0b       	sbc	r25, r25
     aba:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatsisf>
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	0e 94 31 0c 	call	0x1862	; 0x1862 <__subsf3>
     aca:	2b 01       	movw	r4, r22
     acc:	3c 01       	movw	r6, r24

	// Convert integer part to string
	int i = intToStr(ipart, res, 0);
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	b8 01       	movw	r22, r16
     ad4:	c4 01       	movw	r24, r8
     ad6:	0e 94 05 05 	call	0xa0a	; 0xa0a <intToStr>
     ada:	7c 01       	movw	r14, r24

	// Check for display option after point
	if (afterpoint != 0)
     adc:	20 97       	sbiw	r28, 0x00	; 0
     ade:	39 f1       	breq	.+78     	; 0xb2e <ftoa+0xc6>
	{
		res[i] = '.'; // Add dot
     ae0:	f8 01       	movw	r30, r16
     ae2:	e8 0f       	add	r30, r24
     ae4:	f9 1f       	adc	r31, r25
     ae6:	8e e2       	ldi	r24, 0x2E	; 46
     ae8:	80 83       	st	Z, r24

		// Get the value of fraction part up to given number of points after dot.
		fpart = fpart * pow(10, afterpoint);
     aea:	be 01       	movw	r22, r28
     aec:	0d 2e       	mov	r0, r29
     aee:	00 0c       	add	r0, r0
     af0:	88 0b       	sbc	r24, r24
     af2:	99 0b       	sbc	r25, r25
     af4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatsisf>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	80 e2       	ldi	r24, 0x20	; 32
     b02:	91 e4       	ldi	r25, 0x41	; 65
     b04:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <pow>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	c3 01       	movw	r24, r6
     b0e:	b2 01       	movw	r22, r4
     b10:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>

		intToStr((int)fpart, res + i + 1, afterpoint);
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	e2 1a       	sub	r14, r18
     b18:	f2 0a       	sbc	r15, r18
     b1a:	e0 0e       	add	r14, r16
     b1c:	f1 1e       	adc	r15, r17
     b1e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	ae 01       	movw	r20, r28
     b28:	b7 01       	movw	r22, r14
     b2a:	0e 94 05 05 	call	0xa0a	; 0xa0a <intToStr>
	}
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	9f 90       	pop	r9
     b44:	8f 90       	pop	r8
     b46:	7f 90       	pop	r7
     b48:	6f 90       	pop	r6
     b4a:	5f 90       	pop	r5
     b4c:	4f 90       	pop	r4
     b4e:	08 95       	ret

00000b50 <Is_digit>:
{
	printf("%f  ", ch.f64_element);
}
int Is_digit(u8 ch)
{
	return (!(ch < '0' || ch > '9'));
     b50:	80 53       	subi	r24, 0x30	; 48
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	8a 30       	cpi	r24, 0x0A	; 10
     b56:	08 f0       	brcs	.+2      	; 0xb5a <Is_digit+0xa>
     b58:	90 e0       	ldi	r25, 0x00	; 0
}
     b5a:	89 2f       	mov	r24, r25
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <Is_unery_operator>:

int Is_unery_operator(u8 op)
{
	return (op == '+' || op == '-' || op == '*' || op == '/' || op == '^');
     b60:	8b 32       	cpi	r24, 0x2B	; 43
     b62:	59 f0       	breq	.+22     	; 0xb7a <Is_unery_operator+0x1a>
     b64:	8d 32       	cpi	r24, 0x2D	; 45
     b66:	61 f0       	breq	.+24     	; 0xb80 <Is_unery_operator+0x20>
     b68:	8a 32       	cpi	r24, 0x2A	; 42
     b6a:	69 f0       	breq	.+26     	; 0xb86 <Is_unery_operator+0x26>
     b6c:	8f 32       	cpi	r24, 0x2F	; 47
     b6e:	71 f0       	breq	.+28     	; 0xb8c <Is_unery_operator+0x2c>
     b70:	8e 35       	cpi	r24, 0x5E	; 94
     b72:	79 f4       	brne	.+30     	; 0xb92 <Is_unery_operator+0x32>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	08 95       	ret
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	08 95       	ret
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	08 95       	ret
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	08 95       	ret
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	08 95       	ret
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
}
     b96:	08 95       	ret

00000b98 <Precedance_element1_is_grater>:

int Precedance_element1_is_grater(ELEMENT_TYPE element_1, ELEMENT_TYPE element_2)
{
	if (element_1.u8_element == '^')
     b98:	6e 35       	cpi	r22, 0x5E	; 94
     b9a:	99 f0       	breq	.+38     	; 0xbc2 <Precedance_element1_is_grater+0x2a>
		return 1;
	else if (element_1.u8_element == '*' || element_1.u8_element == '/')
     b9c:	6a 32       	cpi	r22, 0x2A	; 42
     b9e:	11 f0       	breq	.+4      	; 0xba4 <Precedance_element1_is_grater+0xc>
     ba0:	6f 32       	cpi	r22, 0x2F	; 47
     ba2:	31 f4       	brne	.+12     	; 0xbb0 <Precedance_element1_is_grater+0x18>
	{
		return (!(element_2.u8_element == '^'));
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	2e 35       	cpi	r18, 0x5E	; 94
     ba8:	09 f4       	brne	.+2      	; 0xbac <Precedance_element1_is_grater+0x14>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	08 95       	ret
	}
	else
	{
		return (!(element_2.u8_element == '^' || element_2.u8_element == '*' || element_2.u8_element == '/'));
     bb0:	2e 35       	cpi	r18, 0x5E	; 94
     bb2:	51 f0       	breq	.+20     	; 0xbc8 <Precedance_element1_is_grater+0x30>
     bb4:	2a 32       	cpi	r18, 0x2A	; 42
     bb6:	59 f0       	breq	.+22     	; 0xbce <Precedance_element1_is_grater+0x36>
     bb8:	2f 32       	cpi	r18, 0x2F	; 47
     bba:	61 f4       	brne	.+24     	; 0xbd4 <Precedance_element1_is_grater+0x3c>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	08 95       	ret
}

int Precedance_element1_is_grater(ELEMENT_TYPE element_1, ELEMENT_TYPE element_2)
{
	if (element_1.u8_element == '^')
		return 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	08 95       	ret
	{
		return (!(element_2.u8_element == '^'));
	}
	else
	{
		return (!(element_2.u8_element == '^' || element_2.u8_element == '*' || element_2.u8_element == '/'));
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	08 95       	ret
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	08 95       	ret
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     bd8:	08 95       	ret

00000bda <Infix_To_Postfix>:
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
}

void Infix_To_Postfix(u8 *array, Stack *postfix)
{
     bda:	7f 92       	push	r7
     bdc:	8f 92       	push	r8
     bde:	9f 92       	push	r9
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	2e 97       	sbiw	r28, 0x0e	; 14
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	8c 01       	movw	r16, r24
     c06:	6b 01       	movw	r12, r22
	Stack check;
	ELEMENT_TYPE top_element, poped_element, element;
	u8 flag1 = 0, flag2 = 0;
	stack_init(&check);
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <stack_init>
	if (array[0] == '-')
     c10:	f8 01       	movw	r30, r16
     c12:	80 81       	ld	r24, Z
     c14:	8d 32       	cpi	r24, 0x2D	; 45
     c16:	29 f4       	brne	.+10     	; 0xc22 <Infix_To_Postfix+0x48>
	{
		flag1 = 1;
		array++;
     c18:	0f 5f       	subi	r16, 0xFF	; 255
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
	ELEMENT_TYPE top_element, poped_element, element;
	u8 flag1 = 0, flag2 = 0;
	stack_init(&check);
	if (array[0] == '-')
	{
		flag1 = 1;
     c1c:	77 24       	eor	r7, r7
     c1e:	73 94       	inc	r7
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <Infix_To_Postfix+0x4a>

void Infix_To_Postfix(u8 *array, Stack *postfix)
{
	Stack check;
	ELEMENT_TYPE top_element, poped_element, element;
	u8 flag1 = 0, flag2 = 0;
     c22:	71 2c       	mov	r7, r1
				continue;
			}
			else if ((Is_unery_operator(*(array - 1))) && element.u8_element == '-')
			{
				array++;
				flag2 = 1;
     c24:	e1 2c       	mov	r14, r1
     c26:	8c c0       	rjmp	.+280    	; 0xd40 <Infix_To_Postfix+0x166>
		flag1 = 1;
		array++;
	}
	while (*array)
	{
		if (Is_digit(*array) || (*array == '.'))
     c28:	8f 2d       	mov	r24, r15
     c2a:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
     c2e:	89 2b       	or	r24, r25
     c30:	19 f4       	brne	.+6      	; 0xc38 <Infix_To_Postfix+0x5e>
     c32:	fe e2       	ldi	r31, 0x2E	; 46
     c34:	ff 12       	cpse	r15, r31
     c36:	2b c0       	rjmp	.+86     	; 0xc8e <Infix_To_Postfix+0xb4>
		{
			element.f64_element = atof(array);
     c38:	c8 01       	movw	r24, r16
     c3a:	0e 94 6f 11 	call	0x22de	; 0x22de <atof>
     c3e:	4b 01       	movw	r8, r22
     c40:	5c 01       	movw	r10, r24
			if (flag1 == 1)
     c42:	21 e0       	ldi	r18, 0x01	; 1
     c44:	72 12       	cpse	r7, r18
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <Infix_To_Postfix+0x7a>
			{
				element.f64_element *= -1;
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	b0 58       	subi	r27, 0x80	; 128
     c4e:	4c 01       	movw	r8, r24
     c50:	5d 01       	movw	r10, r26
				flag1 = 0;
     c52:	71 2c       	mov	r7, r1
			}
			if (flag2 == 1)
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	e8 12       	cpse	r14, r24
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <Infix_To_Postfix+0x90>
			{
				element.f64_element *= -1;
     c5a:	b7 fa       	bst	r11, 7
     c5c:	b0 94       	com	r11
     c5e:	b7 f8       	bld	r11, 7
     c60:	b0 94       	com	r11
				flag2 = 0;
     c62:	e1 2c       	mov	r14, r1
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <Infix_To_Postfix+0x90>
			}
			while (Is_digit(*array) || (*array == '.'))
			{
				array++;
     c66:	0f 5f       	subi	r16, 0xFF	; 255
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
			if (flag2 == 1)
			{
				element.f64_element *= -1;
				flag2 = 0;
			}
			while (Is_digit(*array) || (*array == '.'))
     c6a:	f8 01       	movw	r30, r16
     c6c:	f0 80       	ld	r15, Z
     c6e:	8f 2d       	mov	r24, r15
     c70:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
     c74:	89 2b       	or	r24, r25
     c76:	b9 f7       	brne	.-18     	; 0xc66 <Infix_To_Postfix+0x8c>
     c78:	fe e2       	ldi	r31, 0x2E	; 46
     c7a:	ff 16       	cp	r15, r31
     c7c:	a1 f3       	breq	.-24     	; 0xc66 <Infix_To_Postfix+0x8c>
			{
				array++;
			}
			array--;
     c7e:	01 50       	subi	r16, 0x01	; 1
     c80:	11 09       	sbc	r17, r1
			push_stack(postfix, element);
     c82:	b5 01       	movw	r22, r10
     c84:	a4 01       	movw	r20, r8
     c86:	c6 01       	movw	r24, r12
     c88:	0e 94 77 0b 	call	0x16ee	; 0x16ee <push_stack>
     c8c:	57 c0       	rjmp	.+174    	; 0xd3c <Infix_To_Postfix+0x162>
		}
		else if (Is_unery_operator(*array))
     c8e:	8f 2d       	mov	r24, r15
     c90:	0e 94 b0 05 	call	0xb60	; 0xb60 <Is_unery_operator>
     c94:	89 2b       	or	r24, r25
     c96:	09 f4       	brne	.+2      	; 0xc9a <Infix_To_Postfix+0xc0>
     c98:	51 c0       	rjmp	.+162    	; 0xd3c <Infix_To_Postfix+0x162>
		{
			element.u8_element = *array;
     c9a:	8f 2c       	mov	r8, r15
			stack_top(&check, &top_element);
     c9c:	be 01       	movw	r22, r28
     c9e:	69 5f       	subi	r22, 0xF9	; 249
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <stack_top>
			if ((Is_unery_operator(*(array - 1))) && element.u8_element == '+')
     caa:	f8 01       	movw	r30, r16
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	80 81       	ld	r24, Z
     cb0:	0e 94 b0 05 	call	0xb60	; 0xb60 <Is_unery_operator>
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <Infix_To_Postfix+0xea>
     cb8:	2b e2       	ldi	r18, 0x2B	; 43
     cba:	f2 12       	cpse	r15, r18
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <Infix_To_Postfix+0xea>
			{
				array++;
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
				continue;
     cc2:	3e c0       	rjmp	.+124    	; 0xd40 <Infix_To_Postfix+0x166>
			}
			else if ((Is_unery_operator(*(array - 1))) && element.u8_element == '-')
     cc4:	89 2b       	or	r24, r25
     cc6:	e9 f0       	breq	.+58     	; 0xd02 <Infix_To_Postfix+0x128>
     cc8:	8d e2       	ldi	r24, 0x2D	; 45
     cca:	f8 12       	cpse	r15, r24
     ccc:	1a c0       	rjmp	.+52     	; 0xd02 <Infix_To_Postfix+0x128>
			{
				array++;
     cce:	0f 5f       	subi	r16, 0xFF	; 255
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
				flag2 = 1;
     cd2:	ee 24       	eor	r14, r14
     cd4:	e3 94       	inc	r14
				continue;
     cd6:	34 c0       	rjmp	.+104    	; 0xd40 <Infix_To_Postfix+0x166>
			}
			while (!stack_empty(&check) && Precedance_element1_is_grater(top_element, element))
			{
				pop_stack(&poped_element, &check);
     cd8:	be 01       	movw	r22, r28
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	ce 01       	movw	r24, r28
     ce0:	0b 96       	adiw	r24, 0x0b	; 11
     ce2:	0e 94 a7 0b 	call	0x174e	; 0x174e <pop_stack>
				push_stack(postfix, poped_element);
     ce6:	4b 85       	ldd	r20, Y+11	; 0x0b
     ce8:	5c 85       	ldd	r21, Y+12	; 0x0c
     cea:	6d 85       	ldd	r22, Y+13	; 0x0d
     cec:	7e 85       	ldd	r23, Y+14	; 0x0e
     cee:	c6 01       	movw	r24, r12
     cf0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <push_stack>
				stack_top(&check, &top_element);
     cf4:	be 01       	movw	r22, r28
     cf6:	69 5f       	subi	r22, 0xF9	; 249
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <stack_top>
			{
				array++;
				flag2 = 1;
				continue;
			}
			while (!stack_empty(&check) && Precedance_element1_is_grater(top_element, element))
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <stack_empty>
     d0a:	81 11       	cpse	r24, r1
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <Infix_To_Postfix+0x148>
     d0e:	6f 81       	ldd	r22, Y+7	; 0x07
     d10:	78 85       	ldd	r23, Y+8	; 0x08
     d12:	89 85       	ldd	r24, Y+9	; 0x09
     d14:	9a 85       	ldd	r25, Y+10	; 0x0a
     d16:	a5 01       	movw	r20, r10
     d18:	94 01       	movw	r18, r8
     d1a:	0e 94 cc 05 	call	0xb98	; 0xb98 <Precedance_element1_is_grater>
     d1e:	89 2b       	or	r24, r25
     d20:	d9 f6       	brne	.-74     	; 0xcd8 <Infix_To_Postfix+0xfe>
			{
				pop_stack(&poped_element, &check);
				push_stack(postfix, poped_element);
				stack_top(&check, &top_element);
			}
			push_stack(&check, element);
     d22:	b5 01       	movw	r22, r10
     d24:	a4 01       	movw	r20, r8
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <push_stack>
			stack_top(&check, &top_element);
     d2e:	be 01       	movw	r22, r28
     d30:	69 5f       	subi	r22, 0xF9	; 249
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	ce 01       	movw	r24, r28
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <stack_top>
		}
		array++;
     d3c:	0f 5f       	subi	r16, 0xFF	; 255
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
	if (array[0] == '-')
	{
		flag1 = 1;
		array++;
	}
	while (*array)
     d40:	f8 01       	movw	r30, r16
     d42:	f0 80       	ld	r15, Z
     d44:	f1 10       	cpse	r15, r1
     d46:	70 cf       	rjmp	.-288    	; 0xc28 <Infix_To_Postfix+0x4e>
     d48:	0e c0       	rjmp	.+28     	; 0xd66 <Infix_To_Postfix+0x18c>
		}
		array++;
	}
	while (!stack_empty(&check))
	{
		pop_stack(&poped_element, &check);
     d4a:	be 01       	movw	r22, r28
     d4c:	6f 5f       	subi	r22, 0xFF	; 255
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	ce 01       	movw	r24, r28
     d52:	0b 96       	adiw	r24, 0x0b	; 11
     d54:	0e 94 a7 0b 	call	0x174e	; 0x174e <pop_stack>
		push_stack(postfix, poped_element);
     d58:	4b 85       	ldd	r20, Y+11	; 0x0b
     d5a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d5c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d5e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d60:	c6 01       	movw	r24, r12
     d62:	0e 94 77 0b 	call	0x16ee	; 0x16ee <push_stack>
			push_stack(&check, element);
			stack_top(&check, &top_element);
		}
		array++;
	}
	while (!stack_empty(&check))
     d66:	ce 01       	movw	r24, r28
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <stack_empty>
     d6e:	88 23       	and	r24, r24
     d70:	61 f3       	breq	.-40     	; 0xd4a <Infix_To_Postfix+0x170>
	{
		pop_stack(&poped_element, &check);
		push_stack(postfix, poped_element);
	}
}
     d72:	2e 96       	adiw	r28, 0x0e	; 14
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	bf 90       	pop	r11
     d90:	af 90       	pop	r10
     d92:	9f 90       	pop	r9
     d94:	8f 90       	pop	r8
     d96:	7f 90       	pop	r7
     d98:	08 95       	ret

00000d9a <DO_operation>:
	}
	pop_stack(&poped_element, &temp);
	return poped_element.f64_element;
}
f64 DO_operation(ELEMENT_TYPE poped_element1, ELEMENT_TYPE poped_element2, ELEMENT_TYPE poped_element)
{
     d9a:	ef 92       	push	r14
     d9c:	ee 2d       	mov	r30, r14
	switch (poped_element.u8_element)
     d9e:	ed 32       	cpi	r30, 0x2D	; 45
     da0:	71 f0       	breq	.+28     	; 0xdbe <DO_operation+0x24>
     da2:	28 f4       	brcc	.+10     	; 0xdae <DO_operation+0x14>
     da4:	ea 32       	cpi	r30, 0x2A	; 42
     da6:	71 f0       	breq	.+28     	; 0xdc4 <DO_operation+0x2a>
     da8:	eb 32       	cpi	r30, 0x2B	; 43
     daa:	31 f0       	breq	.+12     	; 0xdb8 <DO_operation+0x1e>
     dac:	14 c0       	rjmp	.+40     	; 0xdd6 <DO_operation+0x3c>
     dae:	ef 32       	cpi	r30, 0x2F	; 47
     db0:	61 f0       	breq	.+24     	; 0xdca <DO_operation+0x30>
     db2:	ee 35       	cpi	r30, 0x5E	; 94
     db4:	69 f0       	breq	.+26     	; 0xdd0 <DO_operation+0x36>
     db6:	0f c0       	rjmp	.+30     	; 0xdd6 <DO_operation+0x3c>
	{
	case '+':
		return (poped_element1.f64_element + poped_element2.f64_element);
     db8:	0e 94 32 0c 	call	0x1864	; 0x1864 <__addsf3>
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <DO_operation+0x3e>
		break;
	case '-':
		return (poped_element1.f64_element - poped_element2.f64_element);
     dbe:	0e 94 31 0c 	call	0x1862	; 0x1862 <__subsf3>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <DO_operation+0x3e>
		break;
	case '*':
		return (poped_element1.f64_element * poped_element2.f64_element);
     dc4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <DO_operation+0x3e>
		break;
	case '/':
		return (poped_element1.f64_element / poped_element2.f64_element);
     dca:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__divsf3>
     dce:	04 c0       	rjmp	.+8      	; 0xdd8 <DO_operation+0x3e>
		break;
	case '^':
		return (powf(poped_element1.f64_element, poped_element2.f64_element));
     dd0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <pow>
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <DO_operation+0x3e>
		break;
	default:
		break;
	}
}
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <DO_operation+0x46>
     dd8:	56 2f       	mov	r21, r22
     dda:	47 2f       	mov	r20, r23
     ddc:	38 2f       	mov	r19, r24
     dde:	29 2f       	mov	r18, r25
     de0:	65 2f       	mov	r22, r21
     de2:	74 2f       	mov	r23, r20
     de4:	83 2f       	mov	r24, r19
     de6:	92 2f       	mov	r25, r18
     de8:	ef 90       	pop	r14
     dea:	08 95       	ret

00000dec <Evaluate_Postfix>:
		return (!(element_2.u8_element == '^' || element_2.u8_element == '*' || element_2.u8_element == '/'));
	}
}

f64 Evaluate_Postfix(Stack *postfix)
{
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	62 97       	sbiw	r28, 0x12	; 18
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	6c 01       	movw	r12, r24
	Stack temp;
	stack_init(&temp);
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <stack_init>
	ELEMENT_TYPE poped_element;
	while (!stack_empty(postfix))
     e16:	35 c0       	rjmp	.+106    	; 0xe82 <Evaluate_Postfix+0x96>
	{
		pop_stack(&poped_element, postfix);
     e18:	b6 01       	movw	r22, r12
     e1a:	ce 01       	movw	r24, r28
     e1c:	07 96       	adiw	r24, 0x07	; 7
     e1e:	0e 94 a7 0b 	call	0x174e	; 0x174e <pop_stack>
		if (!Is_unery_operator(poped_element.u8_element))
     e22:	8f 81       	ldd	r24, Y+7	; 0x07
     e24:	0e 94 b0 05 	call	0xb60	; 0xb60 <Is_unery_operator>
     e28:	89 2b       	or	r24, r25
     e2a:	49 f4       	brne	.+18     	; 0xe3e <Evaluate_Postfix+0x52>
		{
			push_stack(&temp, poped_element);
     e2c:	4f 81       	ldd	r20, Y+7	; 0x07
     e2e:	58 85       	ldd	r21, Y+8	; 0x08
     e30:	69 85       	ldd	r22, Y+9	; 0x09
     e32:	7a 85       	ldd	r23, Y+10	; 0x0a
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	0e 94 77 0b 	call	0x16ee	; 0x16ee <push_stack>
     e3c:	22 c0       	rjmp	.+68     	; 0xe82 <Evaluate_Postfix+0x96>
		}
		else
		{
			ELEMENT_TYPE poped_element1, poped_element2, result;
			pop_stack(&poped_element2, &temp);
     e3e:	be 01       	movw	r22, r28
     e40:	6f 5f       	subi	r22, 0xFF	; 255
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	ce 01       	movw	r24, r28
     e46:	0b 96       	adiw	r24, 0x0b	; 11
     e48:	0e 94 a7 0b 	call	0x174e	; 0x174e <pop_stack>
			pop_stack(&poped_element1, &temp);
     e4c:	be 01       	movw	r22, r28
     e4e:	6f 5f       	subi	r22, 0xFF	; 255
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	ce 01       	movw	r24, r28
     e54:	0f 96       	adiw	r24, 0x0f	; 15
     e56:	0e 94 a7 0b 	call	0x174e	; 0x174e <pop_stack>
			result.f64_element = DO_operation(poped_element1, poped_element2, poped_element);
     e5a:	ef 80       	ldd	r14, Y+7	; 0x07
     e5c:	f8 84       	ldd	r15, Y+8	; 0x08
     e5e:	09 85       	ldd	r16, Y+9	; 0x09
     e60:	1a 85       	ldd	r17, Y+10	; 0x0a
     e62:	2b 85       	ldd	r18, Y+11	; 0x0b
     e64:	3c 85       	ldd	r19, Y+12	; 0x0c
     e66:	4d 85       	ldd	r20, Y+13	; 0x0d
     e68:	5e 85       	ldd	r21, Y+14	; 0x0e
     e6a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e6c:	78 89       	ldd	r23, Y+16	; 0x10
     e6e:	89 89       	ldd	r24, Y+17	; 0x11
     e70:	9a 89       	ldd	r25, Y+18	; 0x12
     e72:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DO_operation>
			push_stack(&temp, result);
     e76:	ab 01       	movw	r20, r22
     e78:	bc 01       	movw	r22, r24
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <push_stack>
f64 Evaluate_Postfix(Stack *postfix)
{
	Stack temp;
	stack_init(&temp);
	ELEMENT_TYPE poped_element;
	while (!stack_empty(postfix))
     e82:	c6 01       	movw	r24, r12
     e84:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <stack_empty>
     e88:	88 23       	and	r24, r24
     e8a:	31 f2       	breq	.-116    	; 0xe18 <Evaluate_Postfix+0x2c>
			pop_stack(&poped_element1, &temp);
			result.f64_element = DO_operation(poped_element1, poped_element2, poped_element);
			push_stack(&temp, result);
		}
	}
	pop_stack(&poped_element, &temp);
     e8c:	be 01       	movw	r22, r28
     e8e:	6f 5f       	subi	r22, 0xFF	; 255
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	ce 01       	movw	r24, r28
     e94:	07 96       	adiw	r24, 0x07	; 7
     e96:	0e 94 a7 0b 	call	0x174e	; 0x174e <pop_stack>
	return poped_element.f64_element;
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     ea2:	62 96       	adiw	r28, 0x12	; 18
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	08 95       	ret

00000ec0 <Mode1>:
		break;
	}
}

u8 Mode1(void)
{
     ec0:	8f 92       	push	r8
     ec2:	9f 92       	push	r9
     ec4:	af 92       	push	r10
     ec6:	bf 92       	push	r11
     ec8:	cf 92       	push	r12
     eca:	df 92       	push	r13
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	e5 97       	sbiw	r28, 0x35	; 53
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key, count = 0, *ptr1 = NULL, flag = 0;
	u8 array[16] = {0};
     ee8:	fe 01       	movw	r30, r28
     eea:	32 96       	adiw	r30, 0x02	; 2
     eec:	80 e1       	ldi	r24, 0x10	; 16
     eee:	df 01       	movw	r26, r30
     ef0:	1d 92       	st	X+, r1
     ef2:	8a 95       	dec	r24
     ef4:	e9 f7       	brne	.-6      	; 0xef0 <Mode1+0x30>
	u8 con[20];
	f64 res = 0;
	ELEMENT_TYPE temp;
	Stack s1, s2;
	stack_init(&s1);
     ef6:	ce 01       	movw	r24, r28
     ef8:	8a 96       	adiw	r24, 0x2a	; 42
     efa:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <stack_init>
	stack_init(&s2);
     efe:	ce 01       	movw	r24, r28
     f00:	c0 96       	adiw	r24, 0x30	; 48
     f02:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <stack_init>
	LCD_enuSendCommand(lcd_DisplayOn_CursorOn);
     f06:	8e e0       	ldi	r24, 0x0E	; 14
     f08:	0e 94 02 04 	call	0x804	; 0x804 <LCD_enuSendCommand>
	LCD_enuSetPosition(1, 1);
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
	}
}

u8 Mode1(void)
{
	u8 pressed_key, count = 0, *ptr1 = NULL, flag = 0;
     f14:	00 e0       	ldi	r16, 0x00	; 0
     f16:	10 e0       	ldi	r17, 0x00	; 0
	LCD_enuSetPosition(1, 1);
	do
	{
		do
		{
			KPD_enu_GetPressed(&pressed_key);
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
		} while (pressed_key == 0xff);
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	8f 3f       	cpi	r24, 0xFF	; 255
     f24:	c9 f3       	breq	.-14     	; 0xf18 <Mode1+0x58>
		if (pressed_key != ' ' && pressed_key != 'M' && pressed_key != '>' && pressed_key != '<' && pressed_key != '=' && pressed_key != 'G' && pressed_key != 'C')
     f26:	80 32       	cpi	r24, 0x20	; 32
     f28:	09 f4       	brne	.+2      	; 0xf2c <Mode1+0x6c>
     f2a:	66 c0       	rjmp	.+204    	; 0xff8 <Mode1+0x138>
     f2c:	8d 34       	cpi	r24, 0x4D	; 77
     f2e:	09 f4       	brne	.+2      	; 0xf32 <Mode1+0x72>
     f30:	63 c0       	rjmp	.+198    	; 0xff8 <Mode1+0x138>
     f32:	8e 33       	cpi	r24, 0x3E	; 62
     f34:	09 f4       	brne	.+2      	; 0xf38 <Mode1+0x78>
     f36:	60 c0       	rjmp	.+192    	; 0xff8 <Mode1+0x138>
     f38:	8c 33       	cpi	r24, 0x3C	; 60
     f3a:	09 f4       	brne	.+2      	; 0xf3e <Mode1+0x7e>
     f3c:	5d c0       	rjmp	.+186    	; 0xff8 <Mode1+0x138>
     f3e:	8d 33       	cpi	r24, 0x3D	; 61
     f40:	09 f4       	brne	.+2      	; 0xf44 <Mode1+0x84>
     f42:	5a c0       	rjmp	.+180    	; 0xff8 <Mode1+0x138>
     f44:	87 34       	cpi	r24, 0x47	; 71
     f46:	09 f4       	brne	.+2      	; 0xf4a <Mode1+0x8a>
     f48:	57 c0       	rjmp	.+174    	; 0xff8 <Mode1+0x138>
     f4a:	83 34       	cpi	r24, 0x43	; 67
     f4c:	09 f4       	brne	.+2      	; 0xf50 <Mode1+0x90>
     f4e:	54 c0       	rjmp	.+168    	; 0xff8 <Mode1+0x138>
		{
			if ((count == 0) && (pressed_key == '+' || pressed_key == '-' ||
     f50:	11 11       	cpse	r17, r1
     f52:	2f c0       	rjmp	.+94     	; 0xfb2 <Mode1+0xf2>
     f54:	8b 32       	cpi	r24, 0x2B	; 43
     f56:	41 f0       	breq	.+16     	; 0xf68 <Mode1+0xa8>
     f58:	8d 32       	cpi	r24, 0x2D	; 45
     f5a:	31 f0       	breq	.+12     	; 0xf68 <Mode1+0xa8>
     f5c:	8a 32       	cpi	r24, 0x2A	; 42
     f5e:	21 f0       	breq	.+8      	; 0xf68 <Mode1+0xa8>
								 pressed_key == '*' || pressed_key == '/' || pressed_key == '^'))
     f60:	8f 32       	cpi	r24, 0x2F	; 47
     f62:	11 f0       	breq	.+4      	; 0xf68 <Mode1+0xa8>
     f64:	8e 35       	cpi	r24, 0x5E	; 94
     f66:	29 f5       	brne	.+74     	; 0xfb2 <Mode1+0xf2>
			{
				LCD_enuClearScreen();
     f68:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
				count = strlen(con);
     f6c:	de 01       	movw	r26, r28
     f6e:	52 96       	adiw	r26, 0x12	; 18
     f70:	fd 01       	movw	r30, r26
     f72:	01 90       	ld	r0, Z+
     f74:	00 20       	and	r0, r0
     f76:	e9 f7       	brne	.-6      	; 0xf72 <Mode1+0xb2>
     f78:	31 97       	sbiw	r30, 0x01	; 1
     f7a:	1e 2f       	mov	r17, r30
     f7c:	1a 1b       	sub	r17, r26
				for (u8 i = 0; i < count; i++)
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	11 c0       	rjmp	.+34     	; 0xfa4 <Mode1+0xe4>
					array[i] = con[i];
     f82:	82 2f       	mov	r24, r18
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	e2 e1       	ldi	r30, 0x12	; 18
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	ec 0f       	add	r30, r28
     f8c:	fd 1f       	adc	r31, r29
     f8e:	e8 0f       	add	r30, r24
     f90:	f9 1f       	adc	r31, r25
     f92:	30 81       	ld	r19, Z
     f94:	e2 e0       	ldi	r30, 0x02	; 2
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	ec 0f       	add	r30, r28
     f9a:	fd 1f       	adc	r31, r29
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
     fa0:	30 83       	st	Z, r19
			if ((count == 0) && (pressed_key == '+' || pressed_key == '-' ||
								 pressed_key == '*' || pressed_key == '/' || pressed_key == '^'))
			{
				LCD_enuClearScreen();
				count = strlen(con);
				for (u8 i = 0; i < count; i++)
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	21 17       	cp	r18, r17
     fa6:	68 f3       	brcs	.-38     	; 0xf82 <Mode1+0xc2>
					array[i] = con[i];
				LCD_enuSendString(con);
     fa8:	ce 01       	movw	r24, r28
     faa:	42 96       	adiw	r24, 0x12	; 18
     fac:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
     fb0:	10 c0       	rjmp	.+32     	; 0xfd2 <Mode1+0x112>
			}
			else if ((count == 0))
     fb2:	11 11       	cpse	r17, r1
     fb4:	0e c0       	rjmp	.+28     	; 0xfd2 <Mode1+0x112>
			{
				LCD_enuClearScreen();
     fb6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
				for (u8 i = 0; i < 16; i++)
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <Mode1+0x10e>
					array[i] = 0;
     fbe:	e2 e0       	ldi	r30, 0x02	; 2
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	ec 0f       	add	r30, r28
     fc4:	fd 1f       	adc	r31, r29
     fc6:	e8 0f       	add	r30, r24
     fc8:	f1 1d       	adc	r31, r1
     fca:	10 82       	st	Z, r1
				LCD_enuSendString(con);
			}
			else if ((count == 0))
			{
				LCD_enuClearScreen();
				for (u8 i = 0; i < 16; i++)
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	80 31       	cpi	r24, 0x10	; 16
     fd0:	b0 f3       	brcs	.-20     	; 0xfbe <Mode1+0xfe>
					array[i] = 0;
				res = 0;
			}
			LCD_enuSendData(pressed_key);
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_enuSendData>
			array[count++] = pressed_key;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	81 0f       	add	r24, r17
     fdc:	e2 e0       	ldi	r30, 0x02	; 2
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	ec 0f       	add	r30, r28
     fe2:	fd 1f       	adc	r31, r29
     fe4:	e1 0f       	add	r30, r17
     fe6:	f1 1d       	adc	r31, r1
     fe8:	99 81       	ldd	r25, Y+1	; 0x01
     fea:	90 83       	st	Z, r25
			flag = 0;
			if (count > 15)
     fec:	80 31       	cpi	r24, 0x10	; 16
     fee:	08 f0       	brcs	.+2      	; 0xff2 <Mode1+0x132>
     ff0:	af c0       	rjmp	.+350    	; 0x1150 <Mode1+0x290>
				for (u8 i = 0; i < 16; i++)
					array[i] = 0;
				res = 0;
			}
			LCD_enuSendData(pressed_key);
			array[count++] = pressed_key;
     ff2:	18 2f       	mov	r17, r24
			flag = 0;
     ff4:	00 e0       	ldi	r16, 0x00	; 0
     ff6:	b0 c0       	rjmp	.+352    	; 0x1158 <Mode1+0x298>
			if (count > 15)
			{
				count = 0;
			}
		}
		else if (pressed_key == ' ')
     ff8:	80 32       	cpi	r24, 0x20	; 32
     ffa:	c1 f4       	brne	.+48     	; 0x102c <Mode1+0x16c>
		{
			LCD_enuClearScreen();
     ffc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			clear_stack(&s1);
    1000:	ce 01       	movw	r24, r28
    1002:	8a 96       	adiw	r24, 0x2a	; 42
    1004:	0e 94 13 0c 	call	0x1826	; 0x1826 <clear_stack>
			clear_stack(&s2);
    1008:	ce 01       	movw	r24, r28
    100a:	c0 96       	adiw	r24, 0x30	; 48
    100c:	0e 94 13 0c 	call	0x1826	; 0x1826 <clear_stack>
			res = 0;
			count = 0;
			for (u8 i = 0; i < 16; i++)
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <Mode1+0x164>
				array[i] = 0;
    1014:	e2 e0       	ldi	r30, 0x02	; 2
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	ec 0f       	add	r30, r28
    101a:	fd 1f       	adc	r31, r29
    101c:	e8 0f       	add	r30, r24
    101e:	f1 1d       	adc	r31, r1
    1020:	10 82       	st	Z, r1
			LCD_enuClearScreen();
			clear_stack(&s1);
			clear_stack(&s2);
			res = 0;
			count = 0;
			for (u8 i = 0; i < 16; i++)
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 31       	cpi	r24, 0x10	; 16
    1026:	b0 f3       	brcs	.-20     	; 0x1014 <Mode1+0x154>
		{
			LCD_enuClearScreen();
			clear_stack(&s1);
			clear_stack(&s2);
			res = 0;
			count = 0;
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	96 c0       	rjmp	.+300    	; 0x1158 <Mode1+0x298>
			for (u8 i = 0; i < 16; i++)
				array[i] = 0;
		}
		else if (pressed_key == '>')
    102c:	8e 33       	cpi	r24, 0x3E	; 62
    102e:	91 f5       	brne	.+100    	; 0x1094 <Mode1+0x1d4>
		{
			if (array[count + 1] != 0 && flag == 1)
    1030:	21 2f       	mov	r18, r17
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	f9 01       	movw	r30, r18
    1036:	31 96       	adiw	r30, 0x01	; 1
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	8c 0f       	add	r24, r28
    103e:	9d 1f       	adc	r25, r29
    1040:	e8 0f       	add	r30, r24
    1042:	f9 1f       	adc	r31, r25
    1044:	80 81       	ld	r24, Z
    1046:	88 23       	and	r24, r24
    1048:	61 f0       	breq	.+24     	; 0x1062 <Mode1+0x1a2>
    104a:	01 30       	cpi	r16, 0x01	; 1
    104c:	51 f4       	brne	.+20     	; 0x1062 <Mode1+0x1a2>
			{
				count++;
    104e:	ff 24       	eor	r15, r15
    1050:	f3 94       	inc	r15
    1052:	f1 0e       	add	r15, r17
				LCD_enuSetPosition(1, count + 1);
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	61 0f       	add	r22, r17
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
		}
		else if (pressed_key == '>')
		{
			if (array[count + 1] != 0 && flag == 1)
			{
				count++;
    105e:	1f 2d       	mov	r17, r15
				LCD_enuSetPosition(1, count + 1);
    1060:	7b c0       	rjmp	.+246    	; 0x1158 <Mode1+0x298>
			}
			else if ((array[count + 1] == 0 && flag == 1))
    1062:	81 11       	cpse	r24, r1
    1064:	79 c0       	rjmp	.+242    	; 0x1158 <Mode1+0x298>
    1066:	01 30       	cpi	r16, 0x01	; 1
    1068:	09 f0       	breq	.+2      	; 0x106c <Mode1+0x1ac>
    106a:	76 c0       	rjmp	.+236    	; 0x1158 <Mode1+0x298>
			{
				if (array[count] != 0)
    106c:	e2 e0       	ldi	r30, 0x02	; 2
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ec 0f       	add	r30, r28
    1072:	fd 1f       	adc	r31, r29
    1074:	e2 0f       	add	r30, r18
    1076:	f3 1f       	adc	r31, r19
    1078:	80 81       	ld	r24, Z
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <Mode1+0x1c0>
    107e:	6c c0       	rjmp	.+216    	; 0x1158 <Mode1+0x298>
				{
					count++;
    1080:	ff 24       	eor	r15, r15
    1082:	f3 94       	inc	r15
    1084:	f1 0e       	add	r15, r17
					LCD_enuSetPosition(1, count + 1);
    1086:	62 e0       	ldi	r22, 0x02	; 2
    1088:	61 0f       	add	r22, r17
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			}
			else if ((array[count + 1] == 0 && flag == 1))
			{
				if (array[count] != 0)
				{
					count++;
    1090:	1f 2d       	mov	r17, r15
    1092:	62 c0       	rjmp	.+196    	; 0x1158 <Mode1+0x298>
					LCD_enuSetPosition(1, count + 1);
				}
			}
		}
		else if (pressed_key == '<')
    1094:	8c 33       	cpi	r24, 0x3C	; 60
    1096:	61 f4       	brne	.+24     	; 0x10b0 <Mode1+0x1f0>
		{
			if (count > 0)
    1098:	11 23       	and	r17, r17
    109a:	09 f4       	brne	.+2      	; 0x109e <Mode1+0x1de>
    109c:	5c c0       	rjmp	.+184    	; 0x1156 <Mode1+0x296>
			{
				count--;
    109e:	0f ef       	ldi	r16, 0xFF	; 255
    10a0:	01 0f       	add	r16, r17
				LCD_enuSetPosition(1, count + 1);
    10a2:	61 2f       	mov	r22, r17
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
		}
		else if (pressed_key == '<')
		{
			if (count > 0)
			{
				count--;
    10aa:	10 2f       	mov	r17, r16
				LCD_enuSetPosition(1, count + 1);
			}
			flag = 1;
    10ac:	01 e0       	ldi	r16, 0x01	; 1
    10ae:	54 c0       	rjmp	.+168    	; 0x1158 <Mode1+0x298>
		}
		else if (pressed_key == 'C')
    10b0:	83 34       	cpi	r24, 0x43	; 67
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <Mode1+0x1f6>
    10b4:	4a c0       	rjmp	.+148    	; 0x114a <Mode1+0x28a>
		{

			if (count > 0)
    10b6:	11 23       	and	r17, r17
    10b8:	09 f4       	brne	.+2      	; 0x10bc <Mode1+0x1fc>
    10ba:	4e c0       	rjmp	.+156    	; 0x1158 <Mode1+0x298>
			{
				count--;
    10bc:	dd 24       	eor	r13, r13
    10be:	da 94       	dec	r13
    10c0:	d1 0e       	add	r13, r17
				if (array[count + 1] == '\0')
    10c2:	ed 2c       	mov	r14, r13
    10c4:	f1 2c       	mov	r15, r1
    10c6:	f7 01       	movw	r30, r14
    10c8:	31 96       	adiw	r30, 0x01	; 1
    10ca:	a2 e0       	ldi	r26, 0x02	; 2
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ac 0f       	add	r26, r28
    10d0:	bd 1f       	adc	r27, r29
    10d2:	ea 0f       	add	r30, r26
    10d4:	fb 1f       	adc	r31, r27
    10d6:	80 81       	ld	r24, Z
    10d8:	81 11       	cpse	r24, r1
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <Mode1+0x244>
				{
					LCD_enuSetPosition(1, count + 1);
    10dc:	61 2f       	mov	r22, r17
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
					LCD_enuSendData('\0');
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_enuSendData>
					array[count] = '\0';
    10ea:	e2 e0       	ldi	r30, 0x02	; 2
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	ec 0f       	add	r30, r28
    10f0:	fd 1f       	adc	r31, r29
    10f2:	ee 0d       	add	r30, r14
    10f4:	ff 1d       	adc	r31, r15
    10f6:	10 82       	st	Z, r1
					LCD_enuSetPosition(1, count + 1);
    10f8:	61 2f       	mov	r22, r17
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
		else if (pressed_key == 'C')
		{

			if (count > 0)
			{
				count--;
    1100:	1d 2d       	mov	r17, r13
    1102:	2a c0       	rjmp	.+84     	; 0x1158 <Mode1+0x298>
					LCD_enuSetPosition(1, count + 1);
				}
				else
				{
					count++;
					LCD_enuSendData('\0');
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_enuSendData>
					array[count--] = '\0';
    110a:	e2 e0       	ldi	r30, 0x02	; 2
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	ec 0f       	add	r30, r28
    1110:	fd 1f       	adc	r31, r29
    1112:	e1 0f       	add	r30, r17
    1114:	f1 1d       	adc	r31, r1
    1116:	10 82       	st	Z, r1
					ptr1 = strchr(array, '\0');
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	ce 01       	movw	r24, r28
    111e:	02 96       	adiw	r24, 0x02	; 2
    1120:	0e 94 7e 11 	call	0x22fc	; 0x22fc <strchr>
					strcat(array, ptr1 + 1);
    1124:	bc 01       	movw	r22, r24
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	ce 01       	movw	r24, r28
    112c:	02 96       	adiw	r24, 0x02	; 2
    112e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <strcat>
					LCD_enuClearScreen();
    1132:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
					LCD_enuSendString(array);
    1136:	ce 01       	movw	r24, r28
    1138:	02 96       	adiw	r24, 0x02	; 2
    113a:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
					LCD_enuSetPosition(1, count + 1);
    113e:	61 2f       	mov	r22, r17
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
				}
				else
				{
					count++;
					LCD_enuSendData('\0');
					array[count--] = '\0';
    1146:	1d 2d       	mov	r17, r13
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <Mode1+0x298>
					LCD_enuSendString(array);
					LCD_enuSetPosition(1, count + 1);
				}
			}
		}
		else if (pressed_key == 'M')
    114a:	8d 34       	cpi	r24, 0x4D	; 77
    114c:	29 f4       	brne	.+10     	; 0x1158 <Mode1+0x298>
    114e:	32 c2       	rjmp	.+1124   	; 0x15b4 <Mode1+0x6f4>
					array[i] = 0;
				res = 0;
			}
			LCD_enuSendData(pressed_key);
			array[count++] = pressed_key;
			flag = 0;
    1150:	00 e0       	ldi	r16, 0x00	; 0
			if (count > 15)
			{
				count = 0;
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <Mode1+0x298>
			if (count > 0)
			{
				count--;
				LCD_enuSetPosition(1, count + 1);
			}
			flag = 1;
    1156:	01 e0       	ldi	r16, 0x01	; 1
		}
		else if (pressed_key == 'M')
		{
			return 1;
		}
	} while (pressed_key != '=');
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	8d 33       	cpi	r24, 0x3D	; 61
    115c:	09 f0       	breq	.+2      	; 0x1160 <Mode1+0x2a0>
    115e:	dc ce       	rjmp	.-584    	; 0xf18 <Mode1+0x58>
	count = strlen(array);
    1160:	de 01       	movw	r26, r28
    1162:	12 96       	adiw	r26, 0x02	; 2
    1164:	fd 01       	movw	r30, r26
    1166:	01 90       	ld	r0, Z+
    1168:	00 20       	and	r0, r0
    116a:	e9 f7       	brne	.-6      	; 0x1166 <Mode1+0x2a6>
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	ea 1b       	sub	r30, r26
    1170:	fb 0b       	sbc	r31, r27
	array[count] = '\0';
    1172:	6f 01       	movw	r12, r30
    1174:	dd 24       	eor	r13, r13
    1176:	ac 0d       	add	r26, r12
    1178:	bd 1d       	adc	r27, r13
    117a:	1c 92       	st	X, r1
	if(count==0)
    117c:	ee 23       	and	r30, r30
    117e:	09 f4       	brne	.+2      	; 0x1182 <Mode1+0x2c2>
    1180:	1b c2       	rjmp	.+1078   	; 0x15b8 <Mode1+0x6f8>
	return 0;
	if (strlen(array) == 1)
    1182:	de 01       	movw	r26, r28
    1184:	12 96       	adiw	r26, 0x02	; 2
    1186:	fd 01       	movw	r30, r26
    1188:	01 90       	ld	r0, Z+
    118a:	00 20       	and	r0, r0
    118c:	e9 f7       	brne	.-6      	; 0x1188 <Mode1+0x2c8>
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	7f 01       	movw	r14, r30
    1192:	ea 1a       	sub	r14, r26
    1194:	fb 0a       	sbc	r15, r27
    1196:	b1 e0       	ldi	r27, 0x01	; 1
    1198:	eb 16       	cp	r14, r27
    119a:	f1 04       	cpc	r15, r1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <Mode1+0x2e0>
    119e:	25 c1       	rjmp	.+586    	; 0x13ea <Mode1+0x52a>
	{
		if (array[0] == '*' || array[0] == '/' || array[0] == '^' || array[0] == '-' || array[0] == '+')
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	8a 32       	cpi	r24, 0x2A	; 42
    11a4:	49 f0       	breq	.+18     	; 0x11b8 <Mode1+0x2f8>
    11a6:	8f 32       	cpi	r24, 0x2F	; 47
    11a8:	39 f0       	breq	.+14     	; 0x11b8 <Mode1+0x2f8>
    11aa:	8e 35       	cpi	r24, 0x5E	; 94
    11ac:	29 f0       	breq	.+10     	; 0x11b8 <Mode1+0x2f8>
    11ae:	8d 32       	cpi	r24, 0x2D	; 45
    11b0:	19 f0       	breq	.+6      	; 0x11b8 <Mode1+0x2f8>
    11b2:	8b 32       	cpi	r24, 0x2B	; 43
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <Mode1+0x2f8>
    11b6:	1b c1       	rjmp	.+566    	; 0x13ee <Mode1+0x52e>
		{
			LCD_enuClearScreen();
    11b8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("SYNTAX ERROR");
    11c4:	8e e8       	ldi	r24, 0x8E	; 142
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    11d4:	8b e9       	ldi	r24, 0x9B	; 155
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	8f 3f       	cpi	r24, 0xFF	; 255
    11e8:	c9 f3       	breq	.-14     	; 0x11dc <Mode1+0x31c>
			} while (pressed_key != ' ');
    11ea:	80 32       	cpi	r24, 0x20	; 32
    11ec:	b9 f7       	brne	.-18     	; 0x11dc <Mode1+0x31c>
			LCD_enuClearScreen();
    11ee:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			return 0;
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	e2 c1       	rjmp	.+964    	; 0x15ba <Mode1+0x6fa>
		}
	}
	for (u8 i = 0; i < strlen(array) - 1; i++)
	{
		if ((array[i] == '*' || array[i] == '/' || array[i] == '^') && (array[i + 1] == '*' || array[i + 1] == '/' || array[i + 1] == '^'))
    11f6:	0a 2d       	mov	r16, r10
    11f8:	10 e0       	ldi	r17, 0x00	; 0
    11fa:	e2 e0       	ldi	r30, 0x02	; 2
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	ec 0f       	add	r30, r28
    1200:	fd 1f       	adc	r31, r29
    1202:	e0 0f       	add	r30, r16
    1204:	f1 1f       	adc	r31, r17
    1206:	80 81       	ld	r24, Z
    1208:	8a 32       	cpi	r24, 0x2A	; 42
    120a:	21 f0       	breq	.+8      	; 0x1214 <Mode1+0x354>
    120c:	8f 32       	cpi	r24, 0x2F	; 47
    120e:	11 f0       	breq	.+4      	; 0x1214 <Mode1+0x354>
    1210:	8e 35       	cpi	r24, 0x5E	; 94
    1212:	71 f5       	brne	.+92     	; 0x1270 <Mode1+0x3b0>
    1214:	f8 01       	movw	r30, r16
    1216:	31 96       	adiw	r30, 0x01	; 1
    1218:	22 e0       	ldi	r18, 0x02	; 2
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	2c 0f       	add	r18, r28
    121e:	3d 1f       	adc	r19, r29
    1220:	e2 0f       	add	r30, r18
    1222:	f3 1f       	adc	r31, r19
    1224:	90 81       	ld	r25, Z
    1226:	9a 32       	cpi	r25, 0x2A	; 42
    1228:	21 f0       	breq	.+8      	; 0x1232 <Mode1+0x372>
    122a:	9f 32       	cpi	r25, 0x2F	; 47
    122c:	11 f0       	breq	.+4      	; 0x1232 <Mode1+0x372>
    122e:	9e 35       	cpi	r25, 0x5E	; 94
    1230:	f9 f4       	brne	.+62     	; 0x1270 <Mode1+0x3b0>
		{
			LCD_enuClearScreen();
    1232:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("SYNTAX ERROR");
    123e:	8e e8       	ldi	r24, 0x8E	; 142
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    124e:	8b e9       	ldi	r24, 0x9B	; 155
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    1256:	ce 01       	movw	r24, r28
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	c9 f3       	breq	.-14     	; 0x1256 <Mode1+0x396>
			} while (pressed_key != ' ');
    1264:	80 32       	cpi	r24, 0x20	; 32
    1266:	b9 f7       	brne	.-18     	; 0x1256 <Mode1+0x396>
			LCD_enuClearScreen();
    1268:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			return 0;
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	a5 c1       	rjmp	.+842    	; 0x15ba <Mode1+0x6fa>
		}
		else if (array[i] == '.')
    1270:	8e 32       	cpi	r24, 0x2E	; 46
    1272:	09 f0       	breq	.+2      	; 0x1276 <Mode1+0x3b6>
    1274:	5a c0       	rjmp	.+180    	; 0x132a <Mode1+0x46a>
		{

			ptr1 = strchr(array + i + 1, '.');
    1276:	6e e2       	ldi	r22, 0x2E	; 46
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	c4 01       	movw	r24, r8
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	a2 e0       	ldi	r26, 0x02	; 2
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ac 0f       	add	r26, r28
    1284:	bd 1f       	adc	r27, r29
    1286:	8a 0f       	add	r24, r26
    1288:	9b 1f       	adc	r25, r27
    128a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <strchr>
			if (ptr1 != NULL)
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	09 f4       	brne	.+2      	; 0x1294 <Mode1+0x3d4>
    1292:	a9 c0       	rjmp	.+338    	; 0x13e6 <Mode1+0x526>
			{
				u8 j = (ptr1 - (array + i) - 1), f1 = 0;
    1294:	22 e0       	ldi	r18, 0x02	; 2
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	2c 0f       	add	r18, r28
    129a:	3d 1f       	adc	r19, r29
    129c:	82 0e       	add	r8, r18
    129e:	93 1e       	adc	r9, r19
    12a0:	88 19       	sub	r24, r8
    12a2:	99 09       	sbc	r25, r9
    12a4:	bb 24       	eor	r11, r11
    12a6:	ba 94       	dec	r11
    12a8:	b8 0e       	add	r11, r24
    12aa:	81 2c       	mov	r8, r1
				while (j)
    12ac:	18 c0       	rjmp	.+48     	; 0x12de <Mode1+0x41e>
				{
					if (Is_digit(array[i + j]))
    12ae:	f8 01       	movw	r30, r16
    12b0:	eb 0d       	add	r30, r11
    12b2:	f1 1d       	adc	r31, r1
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	8c 0f       	add	r24, r28
    12ba:	9d 1f       	adc	r25, r29
    12bc:	e8 0f       	add	r30, r24
    12be:	f9 1f       	adc	r31, r25
    12c0:	90 80       	ld	r9, Z
    12c2:	89 2d       	mov	r24, r9
    12c4:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
    12c8:	89 2b       	or	r24, r25
    12ca:	31 f4       	brne	.+12     	; 0x12d8 <Mode1+0x418>
						f1 = 1;
					else if (Is_unery_operator(array[i + j]))
    12cc:	89 2d       	mov	r24, r9
    12ce:	0e 94 b0 05 	call	0xb60	; 0xb60 <Is_unery_operator>
    12d2:	89 2b       	or	r24, r25
    12d4:	19 f0       	breq	.+6      	; 0x12dc <Mode1+0x41c>
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <Mode1+0x424>
			{
				u8 j = (ptr1 - (array + i) - 1), f1 = 0;
				while (j)
				{
					if (Is_digit(array[i + j]))
						f1 = 1;
    12d8:	88 24       	eor	r8, r8
    12da:	83 94       	inc	r8
					else if (Is_unery_operator(array[i + j]))
					{
						f1 = 0;
						break;
					}
					j--;
    12dc:	ba 94       	dec	r11

			ptr1 = strchr(array + i + 1, '.');
			if (ptr1 != NULL)
			{
				u8 j = (ptr1 - (array + i) - 1), f1 = 0;
				while (j)
    12de:	b1 10       	cpse	r11, r1
    12e0:	e6 cf       	rjmp	.-52     	; 0x12ae <Mode1+0x3ee>
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <Mode1+0x426>
				{
					if (Is_digit(array[i + j]))
						f1 = 1;
					else if (Is_unery_operator(array[i + j]))
					{
						f1 = 0;
    12e4:	81 2c       	mov	r8, r1
						break;
					}
					j--;
				}
				if (f1 == 1)
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	89 12       	cpse	r8, r25
    12ea:	7d c0       	rjmp	.+250    	; 0x13e6 <Mode1+0x526>
				{
					LCD_enuClearScreen();
    12ec:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
					LCD_enuSetPosition(1, 1);
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
					LCD_enuSendString("SYNTAX ERROR");
    12f8:	8e e8       	ldi	r24, 0x8E	; 142
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
					LCD_enuSetPosition(2, 1);
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
					LCD_enuSendString("PRESS AC");
    1308:	8b e9       	ldi	r24, 0x9B	; 155
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
					do
					{
						do
						{
							KPD_enu_GetPressed(&pressed_key);
    1310:	ce 01       	movw	r24, r28
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
						} while (pressed_key == 0xff);
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	8f 3f       	cpi	r24, 0xFF	; 255
    131c:	c9 f3       	breq	.-14     	; 0x1310 <Mode1+0x450>
					} while (pressed_key != ' ');
    131e:	80 32       	cpi	r24, 0x20	; 32
    1320:	b9 f7       	brne	.-18     	; 0x1310 <Mode1+0x450>
					LCD_enuClearScreen();
    1322:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
					return 0;
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	48 c1       	rjmp	.+656    	; 0x15ba <Mode1+0x6fa>
				}
			}
		}
		else if (array[count - 1] == '*' || array[count - 1] == '/' || array[count - 1] == '^' || array[count - 1] == '-' || array[count - 1] == '+')
    132a:	f6 01       	movw	r30, r12
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	a2 e0       	ldi	r26, 0x02	; 2
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ac 0f       	add	r26, r28
    1334:	bd 1f       	adc	r27, r29
    1336:	ea 0f       	add	r30, r26
    1338:	fb 1f       	adc	r31, r27
    133a:	90 81       	ld	r25, Z
    133c:	9a 32       	cpi	r25, 0x2A	; 42
    133e:	41 f0       	breq	.+16     	; 0x1350 <Mode1+0x490>
    1340:	9f 32       	cpi	r25, 0x2F	; 47
    1342:	31 f0       	breq	.+12     	; 0x1350 <Mode1+0x490>
    1344:	9e 35       	cpi	r25, 0x5E	; 94
    1346:	21 f0       	breq	.+8      	; 0x1350 <Mode1+0x490>
    1348:	9d 32       	cpi	r25, 0x2D	; 45
    134a:	11 f0       	breq	.+4      	; 0x1350 <Mode1+0x490>
    134c:	9b 32       	cpi	r25, 0x2B	; 43
    134e:	f9 f4       	brne	.+62     	; 0x138e <Mode1+0x4ce>
		{
			LCD_enuClearScreen();
    1350:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("SYNTAX ERROR");
    135c:	8e e8       	ldi	r24, 0x8E	; 142
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    136c:	8b e9       	ldi	r24, 0x9B	; 155
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    1374:	ce 01       	movw	r24, r28
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	c9 f3       	breq	.-14     	; 0x1374 <Mode1+0x4b4>
			} while (pressed_key != ' ');
    1382:	80 32       	cpi	r24, 0x20	; 32
    1384:	b9 f7       	brne	.-18     	; 0x1374 <Mode1+0x4b4>
			LCD_enuClearScreen();
    1386:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			return 0;
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	16 c1       	rjmp	.+556    	; 0x15ba <Mode1+0x6fa>
		}
		else if ((array[i] == '/') && (array[i + 1] == '0'))
    138e:	8f 32       	cpi	r24, 0x2F	; 47
    1390:	51 f5       	brne	.+84     	; 0x13e6 <Mode1+0x526>
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	e2 e0       	ldi	r30, 0x02	; 2
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ec 0f       	add	r30, r28
    139c:	fd 1f       	adc	r31, r29
    139e:	e0 0f       	add	r30, r16
    13a0:	f1 1f       	adc	r31, r17
    13a2:	80 81       	ld	r24, Z
    13a4:	80 33       	cpi	r24, 0x30	; 48
    13a6:	f9 f4       	brne	.+62     	; 0x13e6 <Mode1+0x526>
		{
			LCD_enuClearScreen();
    13a8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    13ac:	61 e0       	ldi	r22, 0x01	; 1
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("MATH ERROR");
    13b4:	84 ea       	ldi	r24, 0xA4	; 164
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    13c4:	8b e9       	ldi	r24, 0x9B	; 155
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	8f 3f       	cpi	r24, 0xFF	; 255
    13d8:	c9 f3       	breq	.-14     	; 0x13cc <Mode1+0x50c>
			} while (pressed_key != ' ');
    13da:	80 32       	cpi	r24, 0x20	; 32
    13dc:	b9 f7       	brne	.-18     	; 0x13cc <Mode1+0x50c>
			LCD_enuClearScreen();
    13de:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			return 0;
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	ea c0       	rjmp	.+468    	; 0x15ba <Mode1+0x6fa>
			} while (pressed_key != ' ');
			LCD_enuClearScreen();
			return 0;
		}
	}
	for (u8 i = 0; i < strlen(array) - 1; i++)
    13e6:	a3 94       	inc	r10
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <Mode1+0x530>
    13ea:	a1 2c       	mov	r10, r1
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <Mode1+0x530>
    13ee:	a1 2c       	mov	r10, r1
    13f0:	8a 2c       	mov	r8, r10
    13f2:	91 2c       	mov	r9, r1
    13f4:	c7 01       	movw	r24, r14
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	88 16       	cp	r8, r24
    13fa:	99 06       	cpc	r9, r25
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <Mode1+0x540>
    13fe:	fb ce       	rjmp	.-522    	; 0x11f6 <Mode1+0x336>
    1400:	f1 2c       	mov	r15, r1
    1402:	65 c0       	rjmp	.+202    	; 0x14ce <Mode1+0x60e>
			return 0;
		}
	}
	for (s8 i = 0; i <= count - 5; i++)
	{
		if ((Is_digit(array[i]) && Is_digit(array[i + 1]) && Is_digit(array[i + 2]) && Is_digit(array[i + 3]) && Is_digit(array[i + 4])&&(array[i]>'5')))
    1404:	e2 e0       	ldi	r30, 0x02	; 2
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	ec 0f       	add	r30, r28
    140a:	fd 1f       	adc	r31, r29
    140c:	e0 0f       	add	r30, r16
    140e:	f1 1f       	adc	r31, r17
    1410:	e0 80       	ld	r14, Z
    1412:	8e 2d       	mov	r24, r14
    1414:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
    1418:	89 2b       	or	r24, r25
    141a:	09 f4       	brne	.+2      	; 0x141e <Mode1+0x55e>
    141c:	57 c0       	rjmp	.+174    	; 0x14cc <Mode1+0x60c>
    141e:	f8 01       	movw	r30, r16
    1420:	31 96       	adiw	r30, 0x01	; 1
    1422:	22 e0       	ldi	r18, 0x02	; 2
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	2c 0f       	add	r18, r28
    1428:	3d 1f       	adc	r19, r29
    142a:	e2 0f       	add	r30, r18
    142c:	f3 1f       	adc	r31, r19
    142e:	80 81       	ld	r24, Z
    1430:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
    1434:	89 2b       	or	r24, r25
    1436:	09 f4       	brne	.+2      	; 0x143a <Mode1+0x57a>
    1438:	49 c0       	rjmp	.+146    	; 0x14cc <Mode1+0x60c>
    143a:	f8 01       	movw	r30, r16
    143c:	32 96       	adiw	r30, 0x02	; 2
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	8c 0f       	add	r24, r28
    1444:	9d 1f       	adc	r25, r29
    1446:	e8 0f       	add	r30, r24
    1448:	f9 1f       	adc	r31, r25
    144a:	80 81       	ld	r24, Z
    144c:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
    1450:	89 2b       	or	r24, r25
    1452:	e1 f1       	breq	.+120    	; 0x14cc <Mode1+0x60c>
    1454:	f8 01       	movw	r30, r16
    1456:	33 96       	adiw	r30, 0x03	; 3
    1458:	a2 e0       	ldi	r26, 0x02	; 2
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ac 0f       	add	r26, r28
    145e:	bd 1f       	adc	r27, r29
    1460:	ea 0f       	add	r30, r26
    1462:	fb 1f       	adc	r31, r27
    1464:	80 81       	ld	r24, Z
    1466:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
    146a:	89 2b       	or	r24, r25
    146c:	79 f1       	breq	.+94     	; 0x14cc <Mode1+0x60c>
    146e:	f8 01       	movw	r30, r16
    1470:	34 96       	adiw	r30, 0x04	; 4
    1472:	22 e0       	ldi	r18, 0x02	; 2
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	2c 0f       	add	r18, r28
    1478:	3d 1f       	adc	r19, r29
    147a:	e2 0f       	add	r30, r18
    147c:	f3 1f       	adc	r31, r19
    147e:	80 81       	ld	r24, Z
    1480:	0e 94 a8 05 	call	0xb50	; 0xb50 <Is_digit>
    1484:	89 2b       	or	r24, r25
    1486:	11 f1       	breq	.+68     	; 0x14cc <Mode1+0x60c>
    1488:	35 e3       	ldi	r19, 0x35	; 53
    148a:	3e 15       	cp	r19, r14
    148c:	f8 f4       	brcc	.+62     	; 0x14cc <Mode1+0x60c>
		{
			LCD_enuClearScreen();
    148e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("    OVERFLOW");
    149a:	8f ea       	ldi	r24, 0xAF	; 175
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    14aa:	8b e9       	ldi	r24, 0x9B	; 155
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	8f 3f       	cpi	r24, 0xFF	; 255
    14be:	c9 f3       	breq	.-14     	; 0x14b2 <Mode1+0x5f2>
			} while (pressed_key != ' ');
    14c0:	80 32       	cpi	r24, 0x20	; 32
    14c2:	b9 f7       	brne	.-18     	; 0x14b2 <Mode1+0x5f2>
			LCD_enuClearScreen();
    14c4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
			return 0;
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	77 c0       	rjmp	.+238    	; 0x15ba <Mode1+0x6fa>
			} while (pressed_key != ' ');
			LCD_enuClearScreen();
			return 0;
		}
	}
	for (s8 i = 0; i <= count - 5; i++)
    14cc:	f3 94       	inc	r15
    14ce:	0f 2d       	mov	r16, r15
    14d0:	0f 2c       	mov	r0, r15
    14d2:	00 0c       	add	r0, r0
    14d4:	11 0b       	sbc	r17, r17
    14d6:	c6 01       	movw	r24, r12
    14d8:	05 97       	sbiw	r24, 0x05	; 5
    14da:	80 17       	cp	r24, r16
    14dc:	91 07       	cpc	r25, r17
    14de:	0c f0       	brlt	.+2      	; 0x14e2 <Mode1+0x622>
    14e0:	91 cf       	rjmp	.-222    	; 0x1404 <Mode1+0x544>
			} while (pressed_key != ' ');
			LCD_enuClearScreen();
			return 0;
		}
	}
	Infix_To_Postfix(array, &s1);
    14e2:	be 01       	movw	r22, r28
    14e4:	66 5d       	subi	r22, 0xD6	; 214
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	ce 01       	movw	r24, r28
    14ea:	02 96       	adiw	r24, 0x02	; 2
    14ec:	0e 94 ed 05 	call	0xbda	; 0xbda <Infix_To_Postfix>
	for (u32 c = size_stack(&s1); c > 0; c--)
    14f0:	ce 01       	movw	r24, r28
    14f2:	8a 96       	adiw	r24, 0x2a	; 42
    14f4:	0e 94 0d 0c 	call	0x181a	; 0x181a <size_stack>
    14f8:	6b 01       	movw	r12, r22
    14fa:	7c 01       	movw	r14, r24
    14fc:	14 c0       	rjmp	.+40     	; 0x1526 <Mode1+0x666>
	{
		pop_stack(&temp, &s1);
    14fe:	be 01       	movw	r22, r28
    1500:	66 5d       	subi	r22, 0xD6	; 214
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	ce 01       	movw	r24, r28
    1506:	86 96       	adiw	r24, 0x26	; 38
    1508:	0e 94 a7 0b 	call	0x174e	; 0x174e <pop_stack>
		push_stack(&s2, temp);
    150c:	4e a1       	ldd	r20, Y+38	; 0x26
    150e:	5f a1       	ldd	r21, Y+39	; 0x27
    1510:	68 a5       	ldd	r22, Y+40	; 0x28
    1512:	79 a5       	ldd	r23, Y+41	; 0x29
    1514:	ce 01       	movw	r24, r28
    1516:	c0 96       	adiw	r24, 0x30	; 48
    1518:	0e 94 77 0b 	call	0x16ee	; 0x16ee <push_stack>
			LCD_enuClearScreen();
			return 0;
		}
	}
	Infix_To_Postfix(array, &s1);
	for (u32 c = size_stack(&s1); c > 0; c--)
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	c8 1a       	sub	r12, r24
    1520:	d1 08       	sbc	r13, r1
    1522:	e1 08       	sbc	r14, r1
    1524:	f1 08       	sbc	r15, r1
    1526:	c1 14       	cp	r12, r1
    1528:	d1 04       	cpc	r13, r1
    152a:	e1 04       	cpc	r14, r1
    152c:	f1 04       	cpc	r15, r1
    152e:	39 f7       	brne	.-50     	; 0x14fe <Mode1+0x63e>
	{
		pop_stack(&temp, &s1);
		push_stack(&s2, temp);
	}
	traverse_stack(&s2, &display);
    1530:	6d ed       	ldi	r22, 0xDD	; 221
    1532:	74 e0       	ldi	r23, 0x04	; 4
    1534:	ce 01       	movw	r24, r28
    1536:	c0 96       	adiw	r24, 0x30	; 48
    1538:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <traverse_stack>
	res = Evaluate_Postfix(&s2);
    153c:	ce 01       	movw	r24, r28
    153e:	c0 96       	adiw	r24, 0x30	; 48
    1540:	0e 94 f6 06 	call	0xdec	; 0xdec <Evaluate_Postfix>
    1544:	6b 01       	movw	r12, r22
    1546:	7c 01       	movw	r14, r24
	if (res < 0)
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	a9 01       	movw	r20, r18
    154e:	0e 94 9e 0c 	call	0x193c	; 0x193c <__cmpsf2>
    1552:	88 23       	and	r24, r24
    1554:	64 f4       	brge	.+24     	; 0x156e <Mode1+0x6ae>
	{
		con[0] = '-';
    1556:	8d e2       	ldi	r24, 0x2D	; 45
    1558:	8a 8b       	std	Y+18, r24	; 0x12
		ftoa(res, con + 1, 4);
    155a:	24 e0       	ldi	r18, 0x04	; 4
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	ae 01       	movw	r20, r28
    1560:	4d 5e       	subi	r20, 0xED	; 237
    1562:	5f 4f       	sbci	r21, 0xFF	; 255
    1564:	c7 01       	movw	r24, r14
    1566:	b6 01       	movw	r22, r12
    1568:	0e 94 34 05 	call	0xa68	; 0xa68 <ftoa>
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <Mode1+0x6c0>
	}
	else
		ftoa(res, con, 4);
    156e:	24 e0       	ldi	r18, 0x04	; 4
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	ae 01       	movw	r20, r28
    1574:	4e 5e       	subi	r20, 0xEE	; 238
    1576:	5f 4f       	sbci	r21, 0xFF	; 255
    1578:	c7 01       	movw	r24, r14
    157a:	b6 01       	movw	r22, r12
    157c:	0e 94 34 05 	call	0xa68	; 0xa68 <ftoa>
	LCD_enuSetPosition(2, 1);
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
	LCD_enuSendString("result= ");
    1588:	8c eb       	ldi	r24, 0xBC	; 188
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
	LCD_enuSetPosition(2, 9);
    1590:	69 e0       	ldi	r22, 0x09	; 9
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
	LCD_enuSendString(con);
    1598:	ce 01       	movw	r24, r28
    159a:	42 96       	adiw	r24, 0x12	; 18
    159c:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
	count = 0;
	clear_stack(&s1);
    15a0:	ce 01       	movw	r24, r28
    15a2:	8a 96       	adiw	r24, 0x2a	; 42
    15a4:	0e 94 13 0c 	call	0x1826	; 0x1826 <clear_stack>
	clear_stack(&s2);
    15a8:	ce 01       	movw	r24, r28
    15aa:	c0 96       	adiw	r24, 0x30	; 48
    15ac:	0e 94 13 0c 	call	0x1826	; 0x1826 <clear_stack>
	return 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <Mode1+0x6fa>
				}
			}
		}
		else if (pressed_key == 'M')
		{
			return 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <Mode1+0x6fa>
		}
	} while (pressed_key != '=');
	count = strlen(array);
	array[count] = '\0';
	if(count==0)
	return 0;
    15b8:	80 e0       	ldi	r24, 0x00	; 0
	LCD_enuSendString(con);
	count = 0;
	clear_stack(&s1);
	clear_stack(&s2);
	return 1;
}
    15ba:	e5 96       	adiw	r28, 0x35	; 53
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	bf 90       	pop	r11
    15d8:	af 90       	pop	r10
    15da:	9f 90       	pop	r9
    15dc:	8f 90       	pop	r8
    15de:	08 95       	ret

000015e0 <Mode2>:
void Mode2(void)
{
	LCD_enuClearScreen();
    15e0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
    15e4:	08 95       	ret

000015e6 <Mode3>:
}
void Mode3(void)
{
	LCD_enuClearScreen();
    15e6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
    15ea:	08 95       	ret

000015ec <FUN>:

volatile u8 Mode = 0;
volatile u8 LOC_u8PinState=1;
void FUN(void)
{
	DIO_Enu_GetPinValue(DIO_u8PORTD, DIO_u8PIN1, &LOC_u8PinState);
    15ec:	46 e6       	ldi	r20, 0x66	; 102
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	83 e0       	ldi	r24, 0x03	; 3
    15f4:	0e 94 99 01 	call	0x332	; 0x332 <DIO_Enu_GetPinValue>
	if (LOC_u8PinState == 0){
    15f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <LOC_u8PinState>
    15fc:	81 11       	cpse	r24, r1
    15fe:	11 c0       	rjmp	.+34     	; 0x1622 <FUN+0x36>
	Mode = (Mode % 3) + 1;
    1600:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <Mode>
    1604:	8b ea       	ldi	r24, 0xAB	; 171
    1606:	98 9f       	mul	r25, r24
    1608:	81 2d       	mov	r24, r1
    160a:	11 24       	eor	r1, r1
    160c:	86 95       	lsr	r24
    160e:	28 2f       	mov	r18, r24
    1610:	22 0f       	add	r18, r18
    1612:	82 0f       	add	r24, r18
    1614:	98 1b       	sub	r25, r24
    1616:	9f 5f       	subi	r25, 0xFF	; 255
    1618:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <Mode>
	LOC_u8PinState=1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <LOC_u8PinState>
    1622:	08 95       	ret

00001624 <main>:
	}
}

int main(void)
{
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	1f 92       	push	r1
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	DIO_Enu_Init();
    162e:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Enu_Init>
	LCD_enuInit();
    1632:	0e 94 89 04 	call	0x912	; 0x912 <LCD_enuInit>
	KPD_enu_Init();
    1636:	0e 94 0a 03 	call	0x614	; 0x614 <KPD_enu_Init>
	CGI();
    163a:	f8 94       	cli
	EXI_TriggerEdge(EX_INT0, FALLING_EDGE);
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 2f 02 	call	0x45e	; 0x45e <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	0e 94 1d 02 	call	0x43a	; 0x43a <EXI_Enable>
	SGI();
    164a:	78 94       	sei
	EXI_SetCallBack(EX_INT0, FUN);
    164c:	66 ef       	ldi	r22, 0xF6	; 246
    164e:	7a e0       	ldi	r23, 0x0A	; 10
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 08 02 	call	0x410	; 0x410 <EXI_SetCallBack>
	u8 pressed_key;
	LCD_enuSetPosition(1, 1);
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
	LCD_enuSendString("Welcome press(M) ");
    165e:	85 ec       	ldi	r24, 0xC5	; 197
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
	LCD_enuSetPosition(2, 1);
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_enuSetPosition>
	LCD_enuSendString("1-CAL 2-NUM 3-GM ");
    166e:	87 ed       	ldi	r24, 0xD7	; 215
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 48 04 	call	0x890	; 0x890 <LCD_enuSendString>
	do
	{
		do
		{
			KPD_enu_GetPressed(&pressed_key);
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <KPD_enu_GetPressed>
		} while (pressed_key == 0xff);
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	8f 3f       	cpi	r24, 0xFF	; 255
    1682:	c9 f3       	breq	.-14     	; 0x1676 <main+0x52>
	} while (pressed_key != 'M');
    1684:	8d 34       	cpi	r24, 0x4D	; 77
    1686:	b9 f7       	brne	.-18     	; 0x1676 <main+0x52>
	Mode = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <Mode>
	LCD_enuClearScreen();
    168e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_enuClearScreen>
	while (1)
	{

		switch (Mode)
    1692:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <Mode>
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	39 f0       	breq	.+14     	; 0x16a8 <main+0x84>
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	41 f0       	breq	.+16     	; 0x16ae <main+0x8a>
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	c1 f7       	brne	.-16     	; 0x1692 <main+0x6e>
		{
			case 1:
			Mode1();
    16a2:	0e 94 60 07 	call	0xec0	; 0xec0 <Mode1>
			break;
    16a6:	f5 cf       	rjmp	.-22     	; 0x1692 <main+0x6e>
			case 2:
			Mode2();
    16a8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Mode2>
			break;
    16ac:	f2 cf       	rjmp	.-28     	; 0x1692 <main+0x6e>
			case 3:
			Mode3();
    16ae:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Mode3>
			break;
    16b2:	ef cf       	rjmp	.-34     	; 0x1692 <main+0x6e>

000016b4 <stack_init>:
#include "Stack.h" // Include header file

// Initialize a stack
void stack_init(Stack *stack)
{
    stack->size = 0;
    16b4:	fc 01       	movw	r30, r24
    16b6:	12 82       	std	Z+2, r1	; 0x02
    16b8:	13 82       	std	Z+3, r1	; 0x03
    16ba:	14 82       	std	Z+4, r1	; 0x04
    16bc:	15 82       	std	Z+5, r1	; 0x05
    stack->top = NULL;
    16be:	11 82       	std	Z+1, r1	; 0x01
    16c0:	10 82       	st	Z, r1
    16c2:	08 95       	ret

000016c4 <stack_full>:

// Check if a stack is full
bool stack_full(Stack *stack)
{
    return 0;
}
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	08 95       	ret

000016c8 <stack_empty>:

// Check if a stack is empty
bool stack_empty(Stack *stack)
{
    return (stack->size == 0 || stack->top == NULL);
    16c8:	fc 01       	movw	r30, r24
    16ca:	42 81       	ldd	r20, Z+2	; 0x02
    16cc:	53 81       	ldd	r21, Z+3	; 0x03
    16ce:	64 81       	ldd	r22, Z+4	; 0x04
    16d0:	75 81       	ldd	r23, Z+5	; 0x05
    16d2:	45 2b       	or	r20, r21
    16d4:	46 2b       	or	r20, r22
    16d6:	47 2b       	or	r20, r23
    16d8:	31 f0       	breq	.+12     	; 0x16e6 <stack_empty+0x1e>
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	89 2b       	or	r24, r25
    16e0:	21 f4       	brne	.+8      	; 0x16ea <stack_empty+0x22>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	08 95       	ret
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	08 95       	ret
    16ea:	80 e0       	ldi	r24, 0x00	; 0
}
    16ec:	08 95       	ret

000016ee <push_stack>:

// Push an element to a stack
bool push_stack(Stack *stack, ELEMENT_TYPE element)
{
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	ec 01       	movw	r28, r24
    16fc:	6a 01       	movw	r12, r20
    16fe:	7b 01       	movw	r14, r22
    if (!stack_full(stack)) // If the stack is not full
    1700:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <stack_full>
    1704:	81 11       	cpse	r24, r1
    1706:	1b c0       	rjmp	.+54     	; 0x173e <push_stack+0x50>
    {
        StackNode *ptr = (StackNode *)malloc(sizeof(StackNode));
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 4e 10 	call	0x209c	; 0x209c <malloc>
        ptr->data = element;
    1710:	fc 01       	movw	r30, r24
    1712:	c0 82       	st	Z, r12
    1714:	d1 82       	std	Z+1, r13	; 0x01
    1716:	e2 82       	std	Z+2, r14	; 0x02
    1718:	f3 82       	std	Z+3, r15	; 0x03
        ptr->next = stack->top;
    171a:	28 81       	ld	r18, Y
    171c:	39 81       	ldd	r19, Y+1	; 0x01
    171e:	35 83       	std	Z+5, r19	; 0x05
    1720:	24 83       	std	Z+4, r18	; 0x04
        stack->top = ptr;
    1722:	99 83       	std	Y+1, r25	; 0x01
    1724:	88 83       	st	Y, r24
        stack->size++;
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	ac 81       	ldd	r26, Y+4	; 0x04
    172c:	bd 81       	ldd	r27, Y+5	; 0x05
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	a1 1d       	adc	r26, r1
    1732:	b1 1d       	adc	r27, r1
    1734:	8a 83       	std	Y+2, r24	; 0x02
    1736:	9b 83       	std	Y+3, r25	; 0x03
    1738:	ac 83       	std	Y+4, r26	; 0x04
    173a:	bd 83       	std	Y+5, r27	; 0x05
    }
    else              // If the stack is full
        return false; // Return false to indicate failure
}
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <push_stack+0x52>
        ptr->next = stack->top;
        stack->top = ptr;
        stack->size++;
    }
    else              // If the stack is full
        return false; // Return false to indicate failure
    173e:	80 e0       	ldi	r24, 0x00	; 0
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	08 95       	ret

0000174e <pop_stack>:

// Pop an element from a stack
bool pop_stack(ELEMENT_TYPE *element, Stack *stack)
{
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	8c 01       	movw	r16, r24
    1758:	eb 01       	movw	r28, r22
    if (!stack_empty(stack)) // If the stack is not empty
    175a:	cb 01       	movw	r24, r22
    175c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <stack_empty>
    1760:	81 11       	cpse	r24, r1
    1762:	20 c0       	rjmp	.+64     	; 0x17a4 <pop_stack+0x56>
    {
        StackNode *ptr = NULL;
        *element = stack->top->data;
    1764:	e8 81       	ld	r30, Y
    1766:	f9 81       	ldd	r31, Y+1	; 0x01
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	a2 81       	ldd	r26, Z+2	; 0x02
    176e:	b3 81       	ldd	r27, Z+3	; 0x03
    1770:	f8 01       	movw	r30, r16
    1772:	80 83       	st	Z, r24
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	a2 83       	std	Z+2, r26	; 0x02
    1778:	b3 83       	std	Z+3, r27	; 0x03
        stack->size--;
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	ac 81       	ldd	r26, Y+4	; 0x04
    1780:	bd 81       	ldd	r27, Y+5	; 0x05
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	a1 09       	sbc	r26, r1
    1786:	b1 09       	sbc	r27, r1
    1788:	8a 83       	std	Y+2, r24	; 0x02
    178a:	9b 83       	std	Y+3, r25	; 0x03
    178c:	ac 83       	std	Y+4, r26	; 0x04
    178e:	bd 83       	std	Y+5, r27	; 0x05
        ptr = stack->top;
    1790:	88 81       	ld	r24, Y
    1792:	99 81       	ldd	r25, Y+1	; 0x01
        stack->top = stack->top->next;
    1794:	fc 01       	movw	r30, r24
    1796:	24 81       	ldd	r18, Z+4	; 0x04
    1798:	35 81       	ldd	r19, Z+5	; 0x05
    179a:	39 83       	std	Y+1, r19	; 0x01
    179c:	28 83       	st	Y, r18
        free(ptr);
    179e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <free>
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
}
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <pop_stack+0x58>
        ptr = stack->top;
        stack->top = stack->top->next;
        free(ptr);
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
    17a4:	80 e0       	ldi	r24, 0x00	; 0
}
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <stack_top>:

// Get the top element of a stack
bool stack_top(Stack *stack, ELEMENT_TYPE *element)
{
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ec 01       	movw	r28, r24
    17ba:	8b 01       	movw	r16, r22
    if (!stack_empty(stack)) // If the stack is not empty
    17bc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <stack_empty>
    17c0:	81 11       	cpse	r24, r1
    17c2:	0c c0       	rjmp	.+24     	; 0x17dc <stack_top+0x2c>
    {
        *element = stack->top->data;
    17c4:	e8 81       	ld	r30, Y
    17c6:	f9 81       	ldd	r31, Y+1	; 0x01
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	a2 81       	ldd	r26, Z+2	; 0x02
    17ce:	b3 81       	ldd	r27, Z+3	; 0x03
    17d0:	f8 01       	movw	r30, r16
    17d2:	80 83       	st	Z, r24
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	a2 83       	std	Z+2, r26	; 0x02
    17d8:	b3 83       	std	Z+3, r27	; 0x03
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
}
    17da:	01 c0       	rjmp	.+2      	; 0x17de <stack_top+0x2e>
    if (!stack_empty(stack)) // If the stack is not empty
    {
        *element = stack->top->data;
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
    17dc:	80 e0       	ldi	r24, 0x00	; 0
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <traverse_stack>:

// Traverse a stack and apply a function to each element
void traverse_stack(Stack *stack, void (*func)(ELEMENT_TYPE))
{
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	8b 01       	movw	r16, r22
    StackNode *ptr = stack->top;
    17f2:	fc 01       	movw	r30, r24
    17f4:	c0 81       	ld	r28, Z
    17f6:	d1 81       	ldd	r29, Z+1	; 0x01
    while (ptr)
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <traverse_stack+0x24>
    {
        func(ptr->data);
    17fa:	68 81       	ld	r22, Y
    17fc:	79 81       	ldd	r23, Y+1	; 0x01
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	9b 81       	ldd	r25, Y+3	; 0x03
    1802:	f8 01       	movw	r30, r16
    1804:	09 95       	icall
        ptr = ptr->next;
    1806:	0c 80       	ldd	r0, Y+4	; 0x04
    1808:	dd 81       	ldd	r29, Y+5	; 0x05
    180a:	c0 2d       	mov	r28, r0

// Traverse a stack and apply a function to each element
void traverse_stack(Stack *stack, void (*func)(ELEMENT_TYPE))
{
    StackNode *ptr = stack->top;
    while (ptr)
    180c:	20 97       	sbiw	r28, 0x00	; 0
    180e:	a9 f7       	brne	.-22     	; 0x17fa <traverse_stack+0x12>
    {
        func(ptr->data);
        ptr = ptr->next;
    }
}
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <size_stack>:

// Get the size of a stack
u32 size_stack(Stack *stack)
{
    return stack->size;
    181a:	fc 01       	movw	r30, r24
    181c:	62 81       	ldd	r22, Z+2	; 0x02
    181e:	73 81       	ldd	r23, Z+3	; 0x03
    1820:	84 81       	ldd	r24, Z+4	; 0x04
    1822:	95 81       	ldd	r25, Z+5	; 0x05
}
    1824:	08 95       	ret

00001826 <clear_stack>:

// Clear a stack
void clear_stack(Stack *stack)
{
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	ec 01       	movw	r28, r24
    StackNode *ptr = NULL;
    while (stack->top)
    182c:	13 c0       	rjmp	.+38     	; 0x1854 <clear_stack+0x2e>
    {
        ptr = stack->top;
        stack->top = stack->top->next;
    182e:	fc 01       	movw	r30, r24
    1830:	24 81       	ldd	r18, Z+4	; 0x04
    1832:	35 81       	ldd	r19, Z+5	; 0x05
    1834:	39 83       	std	Y+1, r19	; 0x01
    1836:	28 83       	st	Y, r18
        stack->size--;
    1838:	4a 81       	ldd	r20, Y+2	; 0x02
    183a:	5b 81       	ldd	r21, Y+3	; 0x03
    183c:	6c 81       	ldd	r22, Y+4	; 0x04
    183e:	7d 81       	ldd	r23, Y+5	; 0x05
    1840:	41 50       	subi	r20, 0x01	; 1
    1842:	51 09       	sbc	r21, r1
    1844:	61 09       	sbc	r22, r1
    1846:	71 09       	sbc	r23, r1
    1848:	4a 83       	std	Y+2, r20	; 0x02
    184a:	5b 83       	std	Y+3, r21	; 0x03
    184c:	6c 83       	std	Y+4, r22	; 0x04
    184e:	7d 83       	std	Y+5, r23	; 0x05
        free(ptr);
    1850:	0e 94 e6 10 	call	0x21cc	; 0x21cc <free>

// Clear a stack
void clear_stack(Stack *stack)
{
    StackNode *ptr = NULL;
    while (stack->top)
    1854:	88 81       	ld	r24, Y
    1856:	99 81       	ldd	r25, Y+1	; 0x01
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	49 f7       	brne	.-46     	; 0x182e <clear_stack+0x8>
        ptr = stack->top;
        stack->top = stack->top->next;
        stack->size--;
        free(ptr);
    }
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <__subsf3>:
    1862:	50 58       	subi	r21, 0x80	; 128

00001864 <__addsf3>:
    1864:	bb 27       	eor	r27, r27
    1866:	aa 27       	eor	r26, r26
    1868:	0e 94 49 0c 	call	0x1892	; 0x1892 <__addsf3x>
    186c:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__fp_round>
    1870:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscA>
    1874:	38 f0       	brcs	.+14     	; 0x1884 <__addsf3+0x20>
    1876:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscB>
    187a:	20 f0       	brcs	.+8      	; 0x1884 <__addsf3+0x20>
    187c:	39 f4       	brne	.+14     	; 0x188c <__addsf3+0x28>
    187e:	9f 3f       	cpi	r25, 0xFF	; 255
    1880:	19 f4       	brne	.+6      	; 0x1888 <__addsf3+0x24>
    1882:	26 f4       	brtc	.+8      	; 0x188c <__addsf3+0x28>
    1884:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>
    1888:	0e f4       	brtc	.+2      	; 0x188c <__addsf3+0x28>
    188a:	e0 95       	com	r30
    188c:	e7 fb       	bst	r30, 7
    188e:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>

00001892 <__addsf3x>:
    1892:	e9 2f       	mov	r30, r25
    1894:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_split3>
    1898:	58 f3       	brcs	.-42     	; 0x1870 <__addsf3+0xc>
    189a:	ba 17       	cp	r27, r26
    189c:	62 07       	cpc	r22, r18
    189e:	73 07       	cpc	r23, r19
    18a0:	84 07       	cpc	r24, r20
    18a2:	95 07       	cpc	r25, r21
    18a4:	20 f0       	brcs	.+8      	; 0x18ae <__addsf3x+0x1c>
    18a6:	79 f4       	brne	.+30     	; 0x18c6 <__addsf3x+0x34>
    18a8:	a6 f5       	brtc	.+104    	; 0x1912 <__addsf3x+0x80>
    18aa:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_zero>
    18ae:	0e f4       	brtc	.+2      	; 0x18b2 <__addsf3x+0x20>
    18b0:	e0 95       	com	r30
    18b2:	0b 2e       	mov	r0, r27
    18b4:	ba 2f       	mov	r27, r26
    18b6:	a0 2d       	mov	r26, r0
    18b8:	0b 01       	movw	r0, r22
    18ba:	b9 01       	movw	r22, r18
    18bc:	90 01       	movw	r18, r0
    18be:	0c 01       	movw	r0, r24
    18c0:	ca 01       	movw	r24, r20
    18c2:	a0 01       	movw	r20, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	ff 27       	eor	r31, r31
    18c8:	59 1b       	sub	r21, r25
    18ca:	99 f0       	breq	.+38     	; 0x18f2 <__addsf3x+0x60>
    18cc:	59 3f       	cpi	r21, 0xF9	; 249
    18ce:	50 f4       	brcc	.+20     	; 0x18e4 <__addsf3x+0x52>
    18d0:	50 3e       	cpi	r21, 0xE0	; 224
    18d2:	68 f1       	brcs	.+90     	; 0x192e <__addsf3x+0x9c>
    18d4:	1a 16       	cp	r1, r26
    18d6:	f0 40       	sbci	r31, 0x00	; 0
    18d8:	a2 2f       	mov	r26, r18
    18da:	23 2f       	mov	r18, r19
    18dc:	34 2f       	mov	r19, r20
    18de:	44 27       	eor	r20, r20
    18e0:	58 5f       	subi	r21, 0xF8	; 248
    18e2:	f3 cf       	rjmp	.-26     	; 0x18ca <__addsf3x+0x38>
    18e4:	46 95       	lsr	r20
    18e6:	37 95       	ror	r19
    18e8:	27 95       	ror	r18
    18ea:	a7 95       	ror	r26
    18ec:	f0 40       	sbci	r31, 0x00	; 0
    18ee:	53 95       	inc	r21
    18f0:	c9 f7       	brne	.-14     	; 0x18e4 <__addsf3x+0x52>
    18f2:	7e f4       	brtc	.+30     	; 0x1912 <__addsf3x+0x80>
    18f4:	1f 16       	cp	r1, r31
    18f6:	ba 0b       	sbc	r27, r26
    18f8:	62 0b       	sbc	r22, r18
    18fa:	73 0b       	sbc	r23, r19
    18fc:	84 0b       	sbc	r24, r20
    18fe:	ba f0       	brmi	.+46     	; 0x192e <__addsf3x+0x9c>
    1900:	91 50       	subi	r25, 0x01	; 1
    1902:	a1 f0       	breq	.+40     	; 0x192c <__addsf3x+0x9a>
    1904:	ff 0f       	add	r31, r31
    1906:	bb 1f       	adc	r27, r27
    1908:	66 1f       	adc	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	c2 f7       	brpl	.-16     	; 0x1900 <__addsf3x+0x6e>
    1910:	0e c0       	rjmp	.+28     	; 0x192e <__addsf3x+0x9c>
    1912:	ba 0f       	add	r27, r26
    1914:	62 1f       	adc	r22, r18
    1916:	73 1f       	adc	r23, r19
    1918:	84 1f       	adc	r24, r20
    191a:	48 f4       	brcc	.+18     	; 0x192e <__addsf3x+0x9c>
    191c:	87 95       	ror	r24
    191e:	77 95       	ror	r23
    1920:	67 95       	ror	r22
    1922:	b7 95       	ror	r27
    1924:	f7 95       	ror	r31
    1926:	9e 3f       	cpi	r25, 0xFE	; 254
    1928:	08 f0       	brcs	.+2      	; 0x192c <__addsf3x+0x9a>
    192a:	b0 cf       	rjmp	.-160    	; 0x188c <__addsf3+0x28>
    192c:	93 95       	inc	r25
    192e:	88 0f       	add	r24, r24
    1930:	08 f0       	brcs	.+2      	; 0x1934 <__addsf3x+0xa2>
    1932:	99 27       	eor	r25, r25
    1934:	ee 0f       	add	r30, r30
    1936:	97 95       	ror	r25
    1938:	87 95       	ror	r24
    193a:	08 95       	ret

0000193c <__cmpsf2>:
    193c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fp_cmp>
    1940:	08 f4       	brcc	.+2      	; 0x1944 <__cmpsf2+0x8>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	08 95       	ret

00001946 <__divsf3>:
    1946:	0e 94 b7 0c 	call	0x196e	; 0x196e <__divsf3x>
    194a:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__fp_round>
    194e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscB>
    1952:	58 f0       	brcs	.+22     	; 0x196a <__divsf3+0x24>
    1954:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscA>
    1958:	40 f0       	brcs	.+16     	; 0x196a <__divsf3+0x24>
    195a:	29 f4       	brne	.+10     	; 0x1966 <__divsf3+0x20>
    195c:	5f 3f       	cpi	r21, 0xFF	; 255
    195e:	29 f0       	breq	.+10     	; 0x196a <__divsf3+0x24>
    1960:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1964:	51 11       	cpse	r21, r1
    1966:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    196a:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>

0000196e <__divsf3x>:
    196e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_split3>
    1972:	68 f3       	brcs	.-38     	; 0x194e <__divsf3+0x8>

00001974 <__divsf3_pse>:
    1974:	99 23       	and	r25, r25
    1976:	b1 f3       	breq	.-20     	; 0x1964 <__divsf3+0x1e>
    1978:	55 23       	and	r21, r21
    197a:	91 f3       	breq	.-28     	; 0x1960 <__divsf3+0x1a>
    197c:	95 1b       	sub	r25, r21
    197e:	55 0b       	sbc	r21, r21
    1980:	bb 27       	eor	r27, r27
    1982:	aa 27       	eor	r26, r26
    1984:	62 17       	cp	r22, r18
    1986:	73 07       	cpc	r23, r19
    1988:	84 07       	cpc	r24, r20
    198a:	38 f0       	brcs	.+14     	; 0x199a <__divsf3_pse+0x26>
    198c:	9f 5f       	subi	r25, 0xFF	; 255
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	44 1f       	adc	r20, r20
    1996:	aa 1f       	adc	r26, r26
    1998:	a9 f3       	breq	.-22     	; 0x1984 <__divsf3_pse+0x10>
    199a:	35 d0       	rcall	.+106    	; 0x1a06 <__divsf3_pse+0x92>
    199c:	0e 2e       	mov	r0, r30
    199e:	3a f0       	brmi	.+14     	; 0x19ae <__divsf3_pse+0x3a>
    19a0:	e0 e8       	ldi	r30, 0x80	; 128
    19a2:	32 d0       	rcall	.+100    	; 0x1a08 <__divsf3_pse+0x94>
    19a4:	91 50       	subi	r25, 0x01	; 1
    19a6:	50 40       	sbci	r21, 0x00	; 0
    19a8:	e6 95       	lsr	r30
    19aa:	00 1c       	adc	r0, r0
    19ac:	ca f7       	brpl	.-14     	; 0x19a0 <__divsf3_pse+0x2c>
    19ae:	2b d0       	rcall	.+86     	; 0x1a06 <__divsf3_pse+0x92>
    19b0:	fe 2f       	mov	r31, r30
    19b2:	29 d0       	rcall	.+82     	; 0x1a06 <__divsf3_pse+0x92>
    19b4:	66 0f       	add	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	88 1f       	adc	r24, r24
    19ba:	bb 1f       	adc	r27, r27
    19bc:	26 17       	cp	r18, r22
    19be:	37 07       	cpc	r19, r23
    19c0:	48 07       	cpc	r20, r24
    19c2:	ab 07       	cpc	r26, r27
    19c4:	b0 e8       	ldi	r27, 0x80	; 128
    19c6:	09 f0       	breq	.+2      	; 0x19ca <__divsf3_pse+0x56>
    19c8:	bb 0b       	sbc	r27, r27
    19ca:	80 2d       	mov	r24, r0
    19cc:	bf 01       	movw	r22, r30
    19ce:	ff 27       	eor	r31, r31
    19d0:	93 58       	subi	r25, 0x83	; 131
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	3a f0       	brmi	.+14     	; 0x19e4 <__divsf3_pse+0x70>
    19d6:	9e 3f       	cpi	r25, 0xFE	; 254
    19d8:	51 05       	cpc	r21, r1
    19da:	78 f0       	brcs	.+30     	; 0x19fa <__divsf3_pse+0x86>
    19dc:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    19e0:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    19e4:	5f 3f       	cpi	r21, 0xFF	; 255
    19e6:	e4 f3       	brlt	.-8      	; 0x19e0 <__divsf3_pse+0x6c>
    19e8:	98 3e       	cpi	r25, 0xE8	; 232
    19ea:	d4 f3       	brlt	.-12     	; 0x19e0 <__divsf3_pse+0x6c>
    19ec:	86 95       	lsr	r24
    19ee:	77 95       	ror	r23
    19f0:	67 95       	ror	r22
    19f2:	b7 95       	ror	r27
    19f4:	f7 95       	ror	r31
    19f6:	9f 5f       	subi	r25, 0xFF	; 255
    19f8:	c9 f7       	brne	.-14     	; 0x19ec <__divsf3_pse+0x78>
    19fa:	88 0f       	add	r24, r24
    19fc:	91 1d       	adc	r25, r1
    19fe:	96 95       	lsr	r25
    1a00:	87 95       	ror	r24
    1a02:	97 f9       	bld	r25, 7
    1a04:	08 95       	ret
    1a06:	e1 e0       	ldi	r30, 0x01	; 1
    1a08:	66 0f       	add	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	62 17       	cp	r22, r18
    1a12:	73 07       	cpc	r23, r19
    1a14:	84 07       	cpc	r24, r20
    1a16:	ba 07       	cpc	r27, r26
    1a18:	20 f0       	brcs	.+8      	; 0x1a22 <__divsf3_pse+0xae>
    1a1a:	62 1b       	sub	r22, r18
    1a1c:	73 0b       	sbc	r23, r19
    1a1e:	84 0b       	sbc	r24, r20
    1a20:	ba 0b       	sbc	r27, r26
    1a22:	ee 1f       	adc	r30, r30
    1a24:	88 f7       	brcc	.-30     	; 0x1a08 <__divsf3_pse+0x94>
    1a26:	e0 95       	com	r30
    1a28:	08 95       	ret

00001a2a <__fixsfsi>:
    1a2a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixunssfsi>
    1a2e:	68 94       	set
    1a30:	b1 11       	cpse	r27, r1
    1a32:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    1a36:	08 95       	ret

00001a38 <__fixunssfsi>:
    1a38:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_splitA>
    1a3c:	88 f0       	brcs	.+34     	; 0x1a60 <__fixunssfsi+0x28>
    1a3e:	9f 57       	subi	r25, 0x7F	; 127
    1a40:	98 f0       	brcs	.+38     	; 0x1a68 <__fixunssfsi+0x30>
    1a42:	b9 2f       	mov	r27, r25
    1a44:	99 27       	eor	r25, r25
    1a46:	b7 51       	subi	r27, 0x17	; 23
    1a48:	b0 f0       	brcs	.+44     	; 0x1a76 <__fixunssfsi+0x3e>
    1a4a:	e1 f0       	breq	.+56     	; 0x1a84 <__fixunssfsi+0x4c>
    1a4c:	66 0f       	add	r22, r22
    1a4e:	77 1f       	adc	r23, r23
    1a50:	88 1f       	adc	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	1a f0       	brmi	.+6      	; 0x1a5c <__fixunssfsi+0x24>
    1a56:	ba 95       	dec	r27
    1a58:	c9 f7       	brne	.-14     	; 0x1a4c <__fixunssfsi+0x14>
    1a5a:	14 c0       	rjmp	.+40     	; 0x1a84 <__fixunssfsi+0x4c>
    1a5c:	b1 30       	cpi	r27, 0x01	; 1
    1a5e:	91 f0       	breq	.+36     	; 0x1a84 <__fixunssfsi+0x4c>
    1a60:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_zero>
    1a64:	b1 e0       	ldi	r27, 0x01	; 1
    1a66:	08 95       	ret
    1a68:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_zero>
    1a6c:	67 2f       	mov	r22, r23
    1a6e:	78 2f       	mov	r23, r24
    1a70:	88 27       	eor	r24, r24
    1a72:	b8 5f       	subi	r27, 0xF8	; 248
    1a74:	39 f0       	breq	.+14     	; 0x1a84 <__fixunssfsi+0x4c>
    1a76:	b9 3f       	cpi	r27, 0xF9	; 249
    1a78:	cc f3       	brlt	.-14     	; 0x1a6c <__fixunssfsi+0x34>
    1a7a:	86 95       	lsr	r24
    1a7c:	77 95       	ror	r23
    1a7e:	67 95       	ror	r22
    1a80:	b3 95       	inc	r27
    1a82:	d9 f7       	brne	.-10     	; 0x1a7a <__fixunssfsi+0x42>
    1a84:	3e f4       	brtc	.+14     	; 0x1a94 <__fixunssfsi+0x5c>
    1a86:	90 95       	com	r25
    1a88:	80 95       	com	r24
    1a8a:	70 95       	com	r23
    1a8c:	61 95       	neg	r22
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	8f 4f       	sbci	r24, 0xFF	; 255
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	08 95       	ret

00001a96 <__floatunsisf>:
    1a96:	e8 94       	clt
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <__floatsisf+0x12>

00001a9a <__floatsisf>:
    1a9a:	97 fb       	bst	r25, 7
    1a9c:	3e f4       	brtc	.+14     	; 0x1aac <__floatsisf+0x12>
    1a9e:	90 95       	com	r25
    1aa0:	80 95       	com	r24
    1aa2:	70 95       	com	r23
    1aa4:	61 95       	neg	r22
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	99 23       	and	r25, r25
    1aae:	a9 f0       	breq	.+42     	; 0x1ada <__floatsisf+0x40>
    1ab0:	f9 2f       	mov	r31, r25
    1ab2:	96 e9       	ldi	r25, 0x96	; 150
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	93 95       	inc	r25
    1ab8:	f6 95       	lsr	r31
    1aba:	87 95       	ror	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	b7 95       	ror	r27
    1ac2:	f1 11       	cpse	r31, r1
    1ac4:	f8 cf       	rjmp	.-16     	; 0x1ab6 <__floatsisf+0x1c>
    1ac6:	fa f4       	brpl	.+62     	; 0x1b06 <__floatsisf+0x6c>
    1ac8:	bb 0f       	add	r27, r27
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <__floatsisf+0x36>
    1acc:	60 ff       	sbrs	r22, 0
    1ace:	1b c0       	rjmp	.+54     	; 0x1b06 <__floatsisf+0x6c>
    1ad0:	6f 5f       	subi	r22, 0xFF	; 255
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	16 c0       	rjmp	.+44     	; 0x1b06 <__floatsisf+0x6c>
    1ada:	88 23       	and	r24, r24
    1adc:	11 f0       	breq	.+4      	; 0x1ae2 <__floatsisf+0x48>
    1ade:	96 e9       	ldi	r25, 0x96	; 150
    1ae0:	11 c0       	rjmp	.+34     	; 0x1b04 <__floatsisf+0x6a>
    1ae2:	77 23       	and	r23, r23
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <__floatsisf+0x54>
    1ae6:	9e e8       	ldi	r25, 0x8E	; 142
    1ae8:	87 2f       	mov	r24, r23
    1aea:	76 2f       	mov	r23, r22
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <__floatsisf+0x5e>
    1aee:	66 23       	and	r22, r22
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <__floatsisf+0x74>
    1af2:	96 e8       	ldi	r25, 0x86	; 134
    1af4:	86 2f       	mov	r24, r22
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	2a f0       	brmi	.+10     	; 0x1b06 <__floatsisf+0x6c>
    1afc:	9a 95       	dec	r25
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	88 1f       	adc	r24, r24
    1b04:	da f7       	brpl	.-10     	; 0x1afc <__floatsisf+0x62>
    1b06:	88 0f       	add	r24, r24
    1b08:	96 95       	lsr	r25
    1b0a:	87 95       	ror	r24
    1b0c:	97 f9       	bld	r25, 7
    1b0e:	08 95       	ret

00001b10 <__fp_cmp>:
    1b10:	99 0f       	add	r25, r25
    1b12:	00 08       	sbc	r0, r0
    1b14:	55 0f       	add	r21, r21
    1b16:	aa 0b       	sbc	r26, r26
    1b18:	e0 e8       	ldi	r30, 0x80	; 128
    1b1a:	fe ef       	ldi	r31, 0xFE	; 254
    1b1c:	16 16       	cp	r1, r22
    1b1e:	17 06       	cpc	r1, r23
    1b20:	e8 07       	cpc	r30, r24
    1b22:	f9 07       	cpc	r31, r25
    1b24:	c0 f0       	brcs	.+48     	; 0x1b56 <__fp_cmp+0x46>
    1b26:	12 16       	cp	r1, r18
    1b28:	13 06       	cpc	r1, r19
    1b2a:	e4 07       	cpc	r30, r20
    1b2c:	f5 07       	cpc	r31, r21
    1b2e:	98 f0       	brcs	.+38     	; 0x1b56 <__fp_cmp+0x46>
    1b30:	62 1b       	sub	r22, r18
    1b32:	73 0b       	sbc	r23, r19
    1b34:	84 0b       	sbc	r24, r20
    1b36:	95 0b       	sbc	r25, r21
    1b38:	39 f4       	brne	.+14     	; 0x1b48 <__fp_cmp+0x38>
    1b3a:	0a 26       	eor	r0, r26
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <__fp_cmp+0x46>
    1b3e:	23 2b       	or	r18, r19
    1b40:	24 2b       	or	r18, r20
    1b42:	25 2b       	or	r18, r21
    1b44:	21 f4       	brne	.+8      	; 0x1b4e <__fp_cmp+0x3e>
    1b46:	08 95       	ret
    1b48:	0a 26       	eor	r0, r26
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <__fp_cmp+0x3e>
    1b4c:	a1 40       	sbci	r26, 0x01	; 1
    1b4e:	a6 95       	lsr	r26
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	81 1d       	adc	r24, r1
    1b54:	81 1d       	adc	r24, r1
    1b56:	08 95       	ret

00001b58 <__fp_inf>:
    1b58:	97 f9       	bld	r25, 7
    1b5a:	9f 67       	ori	r25, 0x7F	; 127
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	08 95       	ret

00001b64 <__fp_nan>:
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	80 ec       	ldi	r24, 0xC0	; 192
    1b68:	08 95       	ret

00001b6a <__fp_pscA>:
    1b6a:	00 24       	eor	r0, r0
    1b6c:	0a 94       	dec	r0
    1b6e:	16 16       	cp	r1, r22
    1b70:	17 06       	cpc	r1, r23
    1b72:	18 06       	cpc	r1, r24
    1b74:	09 06       	cpc	r0, r25
    1b76:	08 95       	ret

00001b78 <__fp_pscB>:
    1b78:	00 24       	eor	r0, r0
    1b7a:	0a 94       	dec	r0
    1b7c:	12 16       	cp	r1, r18
    1b7e:	13 06       	cpc	r1, r19
    1b80:	14 06       	cpc	r1, r20
    1b82:	05 06       	cpc	r0, r21
    1b84:	08 95       	ret

00001b86 <__fp_round>:
    1b86:	09 2e       	mov	r0, r25
    1b88:	03 94       	inc	r0
    1b8a:	00 0c       	add	r0, r0
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <__fp_round+0xc>
    1b8e:	88 23       	and	r24, r24
    1b90:	52 f0       	brmi	.+20     	; 0x1ba6 <__fp_round+0x20>
    1b92:	bb 0f       	add	r27, r27
    1b94:	40 f4       	brcc	.+16     	; 0x1ba6 <__fp_round+0x20>
    1b96:	bf 2b       	or	r27, r31
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <__fp_round+0x18>
    1b9a:	60 ff       	sbrs	r22, 0
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <__fp_round+0x20>
    1b9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	08 95       	ret

00001ba8 <__fp_split3>:
    1ba8:	57 fd       	sbrc	r21, 7
    1baa:	90 58       	subi	r25, 0x80	; 128
    1bac:	44 0f       	add	r20, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	59 f0       	breq	.+22     	; 0x1bc8 <__fp_splitA+0x10>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <__fp_splitA+0x1a>
    1bb6:	47 95       	ror	r20

00001bb8 <__fp_splitA>:
    1bb8:	88 0f       	add	r24, r24
    1bba:	97 fb       	bst	r25, 7
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <__fp_splitA+0x20>
    1bc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc2:	79 f0       	breq	.+30     	; 0x1be2 <__fp_splitA+0x2a>
    1bc4:	87 95       	ror	r24
    1bc6:	08 95       	ret
    1bc8:	12 16       	cp	r1, r18
    1bca:	13 06       	cpc	r1, r19
    1bcc:	14 06       	cpc	r1, r20
    1bce:	55 1f       	adc	r21, r21
    1bd0:	f2 cf       	rjmp	.-28     	; 0x1bb6 <__fp_split3+0xe>
    1bd2:	46 95       	lsr	r20
    1bd4:	f1 df       	rcall	.-30     	; 0x1bb8 <__fp_splitA>
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <__fp_splitA+0x30>
    1bd8:	16 16       	cp	r1, r22
    1bda:	17 06       	cpc	r1, r23
    1bdc:	18 06       	cpc	r1, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	f1 cf       	rjmp	.-30     	; 0x1bc4 <__fp_splitA+0xc>
    1be2:	86 95       	lsr	r24
    1be4:	71 05       	cpc	r23, r1
    1be6:	61 05       	cpc	r22, r1
    1be8:	08 94       	sec
    1bea:	08 95       	ret

00001bec <__fp_zero>:
    1bec:	e8 94       	clt

00001bee <__fp_szero>:
    1bee:	bb 27       	eor	r27, r27
    1bf0:	66 27       	eor	r22, r22
    1bf2:	77 27       	eor	r23, r23
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	08 95       	ret

00001bfa <__mulsf3>:
    1bfa:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3x>
    1bfe:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__fp_round>
    1c02:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__fp_pscA>
    1c06:	38 f0       	brcs	.+14     	; 0x1c16 <__mulsf3+0x1c>
    1c08:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_pscB>
    1c0c:	20 f0       	brcs	.+8      	; 0x1c16 <__mulsf3+0x1c>
    1c0e:	95 23       	and	r25, r21
    1c10:	11 f0       	breq	.+4      	; 0x1c16 <__mulsf3+0x1c>
    1c12:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1c16:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>
    1c1a:	11 24       	eor	r1, r1
    1c1c:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>

00001c20 <__mulsf3x>:
    1c20:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__fp_split3>
    1c24:	70 f3       	brcs	.-36     	; 0x1c02 <__mulsf3+0x8>

00001c26 <__mulsf3_pse>:
    1c26:	95 9f       	mul	r25, r21
    1c28:	c1 f3       	breq	.-16     	; 0x1c1a <__mulsf3+0x20>
    1c2a:	95 0f       	add	r25, r21
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	55 1f       	adc	r21, r21
    1c30:	62 9f       	mul	r22, r18
    1c32:	f0 01       	movw	r30, r0
    1c34:	72 9f       	mul	r23, r18
    1c36:	bb 27       	eor	r27, r27
    1c38:	f0 0d       	add	r31, r0
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	63 9f       	mul	r22, r19
    1c3e:	aa 27       	eor	r26, r26
    1c40:	f0 0d       	add	r31, r0
    1c42:	b1 1d       	adc	r27, r1
    1c44:	aa 1f       	adc	r26, r26
    1c46:	64 9f       	mul	r22, r20
    1c48:	66 27       	eor	r22, r22
    1c4a:	b0 0d       	add	r27, r0
    1c4c:	a1 1d       	adc	r26, r1
    1c4e:	66 1f       	adc	r22, r22
    1c50:	82 9f       	mul	r24, r18
    1c52:	22 27       	eor	r18, r18
    1c54:	b0 0d       	add	r27, r0
    1c56:	a1 1d       	adc	r26, r1
    1c58:	62 1f       	adc	r22, r18
    1c5a:	73 9f       	mul	r23, r19
    1c5c:	b0 0d       	add	r27, r0
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	62 1f       	adc	r22, r18
    1c62:	83 9f       	mul	r24, r19
    1c64:	a0 0d       	add	r26, r0
    1c66:	61 1d       	adc	r22, r1
    1c68:	22 1f       	adc	r18, r18
    1c6a:	74 9f       	mul	r23, r20
    1c6c:	33 27       	eor	r19, r19
    1c6e:	a0 0d       	add	r26, r0
    1c70:	61 1d       	adc	r22, r1
    1c72:	23 1f       	adc	r18, r19
    1c74:	84 9f       	mul	r24, r20
    1c76:	60 0d       	add	r22, r0
    1c78:	21 1d       	adc	r18, r1
    1c7a:	82 2f       	mov	r24, r18
    1c7c:	76 2f       	mov	r23, r22
    1c7e:	6a 2f       	mov	r22, r26
    1c80:	11 24       	eor	r1, r1
    1c82:	9f 57       	subi	r25, 0x7F	; 127
    1c84:	50 40       	sbci	r21, 0x00	; 0
    1c86:	9a f0       	brmi	.+38     	; 0x1cae <__mulsf3_pse+0x88>
    1c88:	f1 f0       	breq	.+60     	; 0x1cc6 <__mulsf3_pse+0xa0>
    1c8a:	88 23       	and	r24, r24
    1c8c:	4a f0       	brmi	.+18     	; 0x1ca0 <__mulsf3_pse+0x7a>
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	bb 1f       	adc	r27, r27
    1c94:	66 1f       	adc	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	88 1f       	adc	r24, r24
    1c9a:	91 50       	subi	r25, 0x01	; 1
    1c9c:	50 40       	sbci	r21, 0x00	; 0
    1c9e:	a9 f7       	brne	.-22     	; 0x1c8a <__mulsf3_pse+0x64>
    1ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	80 f0       	brcs	.+32     	; 0x1cc6 <__mulsf3_pse+0xa0>
    1ca6:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1caa:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    1cae:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb0:	e4 f3       	brlt	.-8      	; 0x1caa <__mulsf3_pse+0x84>
    1cb2:	98 3e       	cpi	r25, 0xE8	; 232
    1cb4:	d4 f3       	brlt	.-12     	; 0x1caa <__mulsf3_pse+0x84>
    1cb6:	86 95       	lsr	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b7 95       	ror	r27
    1cbe:	f7 95       	ror	r31
    1cc0:	e7 95       	ror	r30
    1cc2:	9f 5f       	subi	r25, 0xFF	; 255
    1cc4:	c1 f7       	brne	.-16     	; 0x1cb6 <__mulsf3_pse+0x90>
    1cc6:	fe 2b       	or	r31, r30
    1cc8:	88 0f       	add	r24, r24
    1cca:	91 1d       	adc	r25, r1
    1ccc:	96 95       	lsr	r25
    1cce:	87 95       	ror	r24
    1cd0:	97 f9       	bld	r25, 7
    1cd2:	08 95       	ret

00001cd4 <pow>:
    1cd4:	fa 01       	movw	r30, r20
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	30 96       	adiw	r30, 0x00	; 0
    1cdc:	21 05       	cpc	r18, r1
    1cde:	31 05       	cpc	r19, r1
    1ce0:	a1 f1       	breq	.+104    	; 0x1d4a <pow+0x76>
    1ce2:	61 15       	cp	r22, r1
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	61 f4       	brne	.+24     	; 0x1d00 <pow+0x2c>
    1ce8:	80 38       	cpi	r24, 0x80	; 128
    1cea:	bf e3       	ldi	r27, 0x3F	; 63
    1cec:	9b 07       	cpc	r25, r27
    1cee:	49 f1       	breq	.+82     	; 0x1d42 <pow+0x6e>
    1cf0:	68 94       	set
    1cf2:	90 38       	cpi	r25, 0x80	; 128
    1cf4:	81 05       	cpc	r24, r1
    1cf6:	61 f0       	breq	.+24     	; 0x1d10 <pow+0x3c>
    1cf8:	80 38       	cpi	r24, 0x80	; 128
    1cfa:	bf ef       	ldi	r27, 0xFF	; 255
    1cfc:	9b 07       	cpc	r25, r27
    1cfe:	41 f0       	breq	.+16     	; 0x1d10 <pow+0x3c>
    1d00:	99 23       	and	r25, r25
    1d02:	4a f5       	brpl	.+82     	; 0x1d56 <pow+0x82>
    1d04:	ff 3f       	cpi	r31, 0xFF	; 255
    1d06:	e1 05       	cpc	r30, r1
    1d08:	31 05       	cpc	r19, r1
    1d0a:	21 05       	cpc	r18, r1
    1d0c:	19 f1       	breq	.+70     	; 0x1d54 <pow+0x80>
    1d0e:	e8 94       	clt
    1d10:	08 94       	sec
    1d12:	e7 95       	ror	r30
    1d14:	d9 01       	movw	r26, r18
    1d16:	aa 23       	and	r26, r26
    1d18:	29 f4       	brne	.+10     	; 0x1d24 <pow+0x50>
    1d1a:	ab 2f       	mov	r26, r27
    1d1c:	be 2f       	mov	r27, r30
    1d1e:	f8 5f       	subi	r31, 0xF8	; 248
    1d20:	d0 f3       	brcs	.-12     	; 0x1d16 <pow+0x42>
    1d22:	10 c0       	rjmp	.+32     	; 0x1d44 <pow+0x70>
    1d24:	ff 5f       	subi	r31, 0xFF	; 255
    1d26:	70 f4       	brcc	.+28     	; 0x1d44 <pow+0x70>
    1d28:	a6 95       	lsr	r26
    1d2a:	e0 f7       	brcc	.-8      	; 0x1d24 <pow+0x50>
    1d2c:	f7 39       	cpi	r31, 0x97	; 151
    1d2e:	50 f0       	brcs	.+20     	; 0x1d44 <pow+0x70>
    1d30:	19 f0       	breq	.+6      	; 0x1d38 <pow+0x64>
    1d32:	ff 3a       	cpi	r31, 0xAF	; 175
    1d34:	38 f4       	brcc	.+14     	; 0x1d44 <pow+0x70>
    1d36:	9f 77       	andi	r25, 0x7F	; 127
    1d38:	9f 93       	push	r25
    1d3a:	0d d0       	rcall	.+26     	; 0x1d56 <pow+0x82>
    1d3c:	0f 90       	pop	r0
    1d3e:	07 fc       	sbrc	r0, 7
    1d40:	90 58       	subi	r25, 0x80	; 128
    1d42:	08 95       	ret
    1d44:	46 f0       	brts	.+16     	; 0x1d56 <pow+0x82>
    1d46:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	80 e8       	ldi	r24, 0x80	; 128
    1d50:	9f e3       	ldi	r25, 0x3F	; 63
    1d52:	08 95       	ret
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	9f 77       	andi	r25, 0x7F	; 127
    1d58:	5f 93       	push	r21
    1d5a:	4f 93       	push	r20
    1d5c:	3f 93       	push	r19
    1d5e:	2f 93       	push	r18
    1d60:	0e 94 65 0f 	call	0x1eca	; 0x1eca <log>
    1d64:	2f 91       	pop	r18
    1d66:	3f 91       	pop	r19
    1d68:	4f 91       	pop	r20
    1d6a:	5f 91       	pop	r21
    1d6c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
    1d70:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <exp>
    1d74:	29 f4       	brne	.+10     	; 0x1d80 <pow+0xac>
    1d76:	16 f0       	brts	.+4      	; 0x1d7c <pow+0xa8>
    1d78:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1d7c:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_zero>
    1d80:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>

00001d84 <exp>:
    1d84:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_splitA>
    1d88:	a8 f3       	brcs	.-22     	; 0x1d74 <pow+0xa0>
    1d8a:	96 38       	cpi	r25, 0x86	; 134
    1d8c:	a0 f7       	brcc	.-24     	; 0x1d76 <pow+0xa2>
    1d8e:	07 f8       	bld	r0, 7
    1d90:	0f 92       	push	r0
    1d92:	e8 94       	clt
    1d94:	2b e3       	ldi	r18, 0x3B	; 59
    1d96:	3a ea       	ldi	r19, 0xAA	; 170
    1d98:	48 eb       	ldi	r20, 0xB8	; 184
    1d9a:	5f e7       	ldi	r21, 0x7F	; 127
    1d9c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsf3_pse>
    1da0:	0f 92       	push	r0
    1da2:	0f 92       	push	r0
    1da4:	0f 92       	push	r0
    1da6:	4d b7       	in	r20, 0x3d	; 61
    1da8:	5e b7       	in	r21, 0x3e	; 62
    1daa:	0f 92       	push	r0
    1dac:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <modf>
    1db0:	e4 e5       	ldi	r30, 0x54	; 84
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__fp_powser>
    1db8:	4f 91       	pop	r20
    1dba:	5f 91       	pop	r21
    1dbc:	ef 91       	pop	r30
    1dbe:	ff 91       	pop	r31
    1dc0:	e5 95       	asr	r30
    1dc2:	ee 1f       	adc	r30, r30
    1dc4:	ff 1f       	adc	r31, r31
    1dc6:	49 f0       	breq	.+18     	; 0x1dda <exp+0x56>
    1dc8:	fe 57       	subi	r31, 0x7E	; 126
    1dca:	e0 68       	ori	r30, 0x80	; 128
    1dcc:	44 27       	eor	r20, r20
    1dce:	ee 0f       	add	r30, r30
    1dd0:	44 1f       	adc	r20, r20
    1dd2:	fa 95       	dec	r31
    1dd4:	e1 f7       	brne	.-8      	; 0x1dce <exp+0x4a>
    1dd6:	41 95       	neg	r20
    1dd8:	55 0b       	sbc	r21, r21
    1dda:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <ldexp>
    1dde:	0f 90       	pop	r0
    1de0:	07 fe       	sbrs	r0, 7
    1de2:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <inverse>
    1de6:	08 95       	ret

00001de8 <__fp_powser>:
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	1f 93       	push	r17
    1dee:	0f 93       	push	r16
    1df0:	ff 92       	push	r15
    1df2:	ef 92       	push	r14
    1df4:	df 92       	push	r13
    1df6:	7b 01       	movw	r14, r22
    1df8:	8c 01       	movw	r16, r24
    1dfa:	68 94       	set
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <__fp_powser+0x22>
    1dfe:	da 2e       	mov	r13, r26
    1e00:	ef 01       	movw	r28, r30
    1e02:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3x>
    1e06:	fe 01       	movw	r30, r28
    1e08:	e8 94       	clt
    1e0a:	a5 91       	lpm	r26, Z+
    1e0c:	25 91       	lpm	r18, Z+
    1e0e:	35 91       	lpm	r19, Z+
    1e10:	45 91       	lpm	r20, Z+
    1e12:	55 91       	lpm	r21, Z+
    1e14:	a6 f3       	brts	.-24     	; 0x1dfe <__fp_powser+0x16>
    1e16:	ef 01       	movw	r28, r30
    1e18:	0e 94 49 0c 	call	0x1892	; 0x1892 <__addsf3x>
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	97 01       	movw	r18, r14
    1e20:	a8 01       	movw	r20, r16
    1e22:	da 94       	dec	r13
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <__fp_powser+0x18>
    1e26:	df 90       	pop	r13
    1e28:	ef 90       	pop	r14
    1e2a:	ff 90       	pop	r15
    1e2c:	0f 91       	pop	r16
    1e2e:	1f 91       	pop	r17
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <inverse>:
    1e36:	9b 01       	movw	r18, r22
    1e38:	ac 01       	movw	r20, r24
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	80 e8       	ldi	r24, 0x80	; 128
    1e40:	9f e3       	ldi	r25, 0x3F	; 63
    1e42:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__divsf3>
    1e46:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>
    1e4a:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_mpack>

00001e4e <ldexp>:
    1e4e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_splitA>
    1e52:	d8 f3       	brcs	.-10     	; 0x1e4a <inverse+0x14>
    1e54:	99 23       	and	r25, r25
    1e56:	c9 f3       	breq	.-14     	; 0x1e4a <inverse+0x14>
    1e58:	94 0f       	add	r25, r20
    1e5a:	51 1d       	adc	r21, r1
    1e5c:	a3 f3       	brvs	.-24     	; 0x1e46 <inverse+0x10>
    1e5e:	91 50       	subi	r25, 0x01	; 1
    1e60:	50 40       	sbci	r21, 0x00	; 0
    1e62:	94 f0       	brlt	.+36     	; 0x1e88 <ldexp+0x3a>
    1e64:	59 f0       	breq	.+22     	; 0x1e7c <ldexp+0x2e>
    1e66:	88 23       	and	r24, r24
    1e68:	32 f0       	brmi	.+12     	; 0x1e76 <ldexp+0x28>
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	91 50       	subi	r25, 0x01	; 1
    1e72:	50 40       	sbci	r21, 0x00	; 0
    1e74:	c1 f7       	brne	.-16     	; 0x1e66 <ldexp+0x18>
    1e76:	9e 3f       	cpi	r25, 0xFE	; 254
    1e78:	51 05       	cpc	r21, r1
    1e7a:	2c f7       	brge	.-54     	; 0x1e46 <inverse+0x10>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	91 1d       	adc	r25, r1
    1e80:	96 95       	lsr	r25
    1e82:	87 95       	ror	r24
    1e84:	97 f9       	bld	r25, 7
    1e86:	08 95       	ret
    1e88:	5f 3f       	cpi	r21, 0xFF	; 255
    1e8a:	ac f0       	brlt	.+42     	; 0x1eb6 <ldexp+0x68>
    1e8c:	98 3e       	cpi	r25, 0xE8	; 232
    1e8e:	9c f0       	brlt	.+38     	; 0x1eb6 <ldexp+0x68>
    1e90:	bb 27       	eor	r27, r27
    1e92:	86 95       	lsr	r24
    1e94:	77 95       	ror	r23
    1e96:	67 95       	ror	r22
    1e98:	b7 95       	ror	r27
    1e9a:	08 f4       	brcc	.+2      	; 0x1e9e <ldexp+0x50>
    1e9c:	b1 60       	ori	r27, 0x01	; 1
    1e9e:	93 95       	inc	r25
    1ea0:	c1 f7       	brne	.-16     	; 0x1e92 <ldexp+0x44>
    1ea2:	bb 0f       	add	r27, r27
    1ea4:	58 f7       	brcc	.-42     	; 0x1e7c <ldexp+0x2e>
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <ldexp+0x5e>
    1ea8:	60 ff       	sbrs	r22, 0
    1eaa:	e8 cf       	rjmp	.-48     	; 0x1e7c <ldexp+0x2e>
    1eac:	6f 5f       	subi	r22, 0xFF	; 255
    1eae:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	e3 cf       	rjmp	.-58     	; 0x1e7c <ldexp+0x2e>
    1eb6:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_szero>
    1eba:	16 f0       	brts	.+4      	; 0x1ec0 <ldexp+0x72>
    1ebc:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_mpack>
    1ec0:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_nan>
    1ec4:	68 94       	set
    1ec6:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__fp_inf>

00001eca <log>:
    1eca:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_splitA>
    1ece:	a8 f3       	brcs	.-22     	; 0x1eba <ldexp+0x6c>
    1ed0:	99 23       	and	r25, r25
    1ed2:	c1 f3       	breq	.-16     	; 0x1ec4 <ldexp+0x76>
    1ed4:	ae f3       	brts	.-22     	; 0x1ec0 <ldexp+0x72>
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	1f 93       	push	r17
    1edc:	0f 93       	push	r16
    1ede:	ff 92       	push	r15
    1ee0:	c9 2f       	mov	r28, r25
    1ee2:	dd 27       	eor	r29, r29
    1ee4:	88 23       	and	r24, r24
    1ee6:	2a f0       	brmi	.+10     	; 0x1ef2 <log+0x28>
    1ee8:	21 97       	sbiw	r28, 0x01	; 1
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	da f7       	brpl	.-10     	; 0x1ee8 <log+0x1e>
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f eb       	ldi	r21, 0xBF	; 191
    1efa:	9f e3       	ldi	r25, 0x3F	; 63
    1efc:	88 39       	cpi	r24, 0x98	; 152
    1efe:	20 f0       	brcs	.+8      	; 0x1f08 <log+0x3e>
    1f00:	80 3e       	cpi	r24, 0xE0	; 224
    1f02:	38 f0       	brcs	.+14     	; 0x1f12 <log+0x48>
    1f04:	21 96       	adiw	r28, 0x01	; 1
    1f06:	8f 77       	andi	r24, 0x7F	; 127
    1f08:	0e 94 32 0c 	call	0x1864	; 0x1864 <__addsf3>
    1f0c:	ec e7       	ldi	r30, 0x7C	; 124
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <log+0x50>
    1f12:	0e 94 32 0c 	call	0x1864	; 0x1864 <__addsf3>
    1f16:	e9 ea       	ldi	r30, 0xA9	; 169
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__fp_powser>
    1f1e:	8b 01       	movw	r16, r22
    1f20:	be 01       	movw	r22, r28
    1f22:	ec 01       	movw	r28, r24
    1f24:	fb 2e       	mov	r15, r27
    1f26:	6f 57       	subi	r22, 0x7F	; 127
    1f28:	71 09       	sbc	r23, r1
    1f2a:	75 95       	asr	r23
    1f2c:	77 1f       	adc	r23, r23
    1f2e:	88 0b       	sbc	r24, r24
    1f30:	99 0b       	sbc	r25, r25
    1f32:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatsisf>
    1f36:	28 e1       	ldi	r18, 0x18	; 24
    1f38:	32 e7       	ldi	r19, 0x72	; 114
    1f3a:	41 e3       	ldi	r20, 0x31	; 49
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3x>
    1f42:	af 2d       	mov	r26, r15
    1f44:	98 01       	movw	r18, r16
    1f46:	ae 01       	movw	r20, r28
    1f48:	ff 90       	pop	r15
    1f4a:	0f 91       	pop	r16
    1f4c:	1f 91       	pop	r17
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	0e 94 49 0c 	call	0x1892	; 0x1892 <__addsf3x>
    1f56:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__fp_round>

00001f5a <modf>:
    1f5a:	fa 01       	movw	r30, r20
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	aa 0f       	add	r26, r26
    1f60:	bb 1f       	adc	r27, r27
    1f62:	9b 01       	movw	r18, r22
    1f64:	ac 01       	movw	r20, r24
    1f66:	bf 57       	subi	r27, 0x7F	; 127
    1f68:	28 f4       	brcc	.+10     	; 0x1f74 <modf+0x1a>
    1f6a:	22 27       	eor	r18, r18
    1f6c:	33 27       	eor	r19, r19
    1f6e:	44 27       	eor	r20, r20
    1f70:	50 78       	andi	r21, 0x80	; 128
    1f72:	20 c0       	rjmp	.+64     	; 0x1fb4 <modf+0x5a>
    1f74:	b7 51       	subi	r27, 0x17	; 23
    1f76:	90 f4       	brcc	.+36     	; 0x1f9c <modf+0x42>
    1f78:	ab 2f       	mov	r26, r27
    1f7a:	00 24       	eor	r0, r0
    1f7c:	46 95       	lsr	r20
    1f7e:	37 95       	ror	r19
    1f80:	27 95       	ror	r18
    1f82:	01 1c       	adc	r0, r1
    1f84:	a3 95       	inc	r26
    1f86:	d2 f3       	brmi	.-12     	; 0x1f7c <modf+0x22>
    1f88:	00 20       	and	r0, r0
    1f8a:	71 f0       	breq	.+28     	; 0x1fa8 <modf+0x4e>
    1f8c:	22 0f       	add	r18, r18
    1f8e:	33 1f       	adc	r19, r19
    1f90:	44 1f       	adc	r20, r20
    1f92:	b3 95       	inc	r27
    1f94:	da f3       	brmi	.-10     	; 0x1f8c <modf+0x32>
    1f96:	0e d0       	rcall	.+28     	; 0x1fb4 <modf+0x5a>
    1f98:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__subsf3>
    1f9c:	61 30       	cpi	r22, 0x01	; 1
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	a0 e8       	ldi	r26, 0x80	; 128
    1fa2:	8a 07       	cpc	r24, r26
    1fa4:	b9 46       	sbci	r27, 0x69	; 105
    1fa6:	30 f4       	brcc	.+12     	; 0x1fb4 <modf+0x5a>
    1fa8:	9b 01       	movw	r18, r22
    1faa:	ac 01       	movw	r20, r24
    1fac:	66 27       	eor	r22, r22
    1fae:	77 27       	eor	r23, r23
    1fb0:	88 27       	eor	r24, r24
    1fb2:	90 78       	andi	r25, 0x80	; 128
    1fb4:	30 96       	adiw	r30, 0x00	; 0
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <modf+0x66>
    1fb8:	20 83       	st	Z, r18
    1fba:	31 83       	std	Z+1, r19	; 0x01
    1fbc:	42 83       	std	Z+2, r20	; 0x02
    1fbe:	53 83       	std	Z+3, r21	; 0x03
    1fc0:	08 95       	ret

00001fc2 <__fp_mpack>:
    1fc2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc4:	31 f0       	breq	.+12     	; 0x1fd2 <__fp_mpack_finite+0xc>

00001fc6 <__fp_mpack_finite>:
    1fc6:	91 50       	subi	r25, 0x01	; 1
    1fc8:	20 f4       	brcc	.+8      	; 0x1fd2 <__fp_mpack_finite+0xc>
    1fca:	87 95       	ror	r24
    1fcc:	77 95       	ror	r23
    1fce:	67 95       	ror	r22
    1fd0:	b7 95       	ror	r27
    1fd2:	88 0f       	add	r24, r24
    1fd4:	91 1d       	adc	r25, r1
    1fd6:	96 95       	lsr	r25
    1fd8:	87 95       	ror	r24
    1fda:	97 f9       	bld	r25, 7
    1fdc:	08 95       	ret

00001fde <__divmodhi4>:
    1fde:	97 fb       	bst	r25, 7
    1fe0:	07 2e       	mov	r0, r23
    1fe2:	16 f4       	brtc	.+4      	; 0x1fe8 <__divmodhi4+0xa>
    1fe4:	00 94       	com	r0
    1fe6:	07 d0       	rcall	.+14     	; 0x1ff6 <__divmodhi4_neg1>
    1fe8:	77 fd       	sbrc	r23, 7
    1fea:	09 d0       	rcall	.+18     	; 0x1ffe <__divmodhi4_neg2>
    1fec:	0e 94 3a 10 	call	0x2074	; 0x2074 <__udivmodhi4>
    1ff0:	07 fc       	sbrc	r0, 7
    1ff2:	05 d0       	rcall	.+10     	; 0x1ffe <__divmodhi4_neg2>
    1ff4:	3e f4       	brtc	.+14     	; 0x2004 <__divmodhi4_exit>

00001ff6 <__divmodhi4_neg1>:
    1ff6:	90 95       	com	r25
    1ff8:	81 95       	neg	r24
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	08 95       	ret

00001ffe <__divmodhi4_neg2>:
    1ffe:	70 95       	com	r23
    2000:	61 95       	neg	r22
    2002:	7f 4f       	sbci	r23, 0xFF	; 255

00002004 <__divmodhi4_exit>:
    2004:	08 95       	ret

00002006 <__prologue_saves__>:
    2006:	2f 92       	push	r2
    2008:	3f 92       	push	r3
    200a:	4f 92       	push	r4
    200c:	5f 92       	push	r5
    200e:	6f 92       	push	r6
    2010:	7f 92       	push	r7
    2012:	8f 92       	push	r8
    2014:	9f 92       	push	r9
    2016:	af 92       	push	r10
    2018:	bf 92       	push	r11
    201a:	cf 92       	push	r12
    201c:	df 92       	push	r13
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	ca 1b       	sub	r28, r26
    2030:	db 0b       	sbc	r29, r27
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	09 94       	ijmp

0000203e <__epilogue_restores__>:
    203e:	2a 88       	ldd	r2, Y+18	; 0x12
    2040:	39 88       	ldd	r3, Y+17	; 0x11
    2042:	48 88       	ldd	r4, Y+16	; 0x10
    2044:	5f 84       	ldd	r5, Y+15	; 0x0f
    2046:	6e 84       	ldd	r6, Y+14	; 0x0e
    2048:	7d 84       	ldd	r7, Y+13	; 0x0d
    204a:	8c 84       	ldd	r8, Y+12	; 0x0c
    204c:	9b 84       	ldd	r9, Y+11	; 0x0b
    204e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2050:	b9 84       	ldd	r11, Y+9	; 0x09
    2052:	c8 84       	ldd	r12, Y+8	; 0x08
    2054:	df 80       	ldd	r13, Y+7	; 0x07
    2056:	ee 80       	ldd	r14, Y+6	; 0x06
    2058:	fd 80       	ldd	r15, Y+5	; 0x05
    205a:	0c 81       	ldd	r16, Y+4	; 0x04
    205c:	1b 81       	ldd	r17, Y+3	; 0x03
    205e:	aa 81       	ldd	r26, Y+2	; 0x02
    2060:	b9 81       	ldd	r27, Y+1	; 0x01
    2062:	ce 0f       	add	r28, r30
    2064:	d1 1d       	adc	r29, r1
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	ed 01       	movw	r28, r26
    2072:	08 95       	ret

00002074 <__udivmodhi4>:
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	51 e1       	ldi	r21, 0x11	; 17
    207a:	07 c0       	rjmp	.+14     	; 0x208a <__udivmodhi4_ep>

0000207c <__udivmodhi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	a6 17       	cp	r26, r22
    2082:	b7 07       	cpc	r27, r23
    2084:	10 f0       	brcs	.+4      	; 0x208a <__udivmodhi4_ep>
    2086:	a6 1b       	sub	r26, r22
    2088:	b7 0b       	sbc	r27, r23

0000208a <__udivmodhi4_ep>:
    208a:	88 1f       	adc	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	5a 95       	dec	r21
    2090:	a9 f7       	brne	.-22     	; 0x207c <__udivmodhi4_loop>
    2092:	80 95       	com	r24
    2094:	90 95       	com	r25
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	08 95       	ret

0000209c <malloc>:
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	91 05       	cpc	r25, r1
    20a8:	10 f4       	brcc	.+4      	; 0x20ae <malloc+0x12>
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <__flp>
    20b2:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <__flp+0x1>
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	a0 e0       	ldi	r26, 0x00	; 0
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	30 97       	sbiw	r30, 0x00	; 0
    20c0:	19 f1       	breq	.+70     	; 0x2108 <malloc+0x6c>
    20c2:	40 81       	ld	r20, Z
    20c4:	51 81       	ldd	r21, Z+1	; 0x01
    20c6:	02 81       	ldd	r16, Z+2	; 0x02
    20c8:	13 81       	ldd	r17, Z+3	; 0x03
    20ca:	48 17       	cp	r20, r24
    20cc:	59 07       	cpc	r21, r25
    20ce:	c8 f0       	brcs	.+50     	; 0x2102 <malloc+0x66>
    20d0:	84 17       	cp	r24, r20
    20d2:	95 07       	cpc	r25, r21
    20d4:	69 f4       	brne	.+26     	; 0x20f0 <malloc+0x54>
    20d6:	10 97       	sbiw	r26, 0x00	; 0
    20d8:	31 f0       	breq	.+12     	; 0x20e6 <malloc+0x4a>
    20da:	12 96       	adiw	r26, 0x02	; 2
    20dc:	0c 93       	st	X, r16
    20de:	12 97       	sbiw	r26, 0x02	; 2
    20e0:	13 96       	adiw	r26, 0x03	; 3
    20e2:	1c 93       	st	X, r17
    20e4:	27 c0       	rjmp	.+78     	; 0x2134 <malloc+0x98>
    20e6:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__flp>
    20ea:	10 93 f4 00 	sts	0x00F4, r17	; 0x8000f4 <__flp+0x1>
    20ee:	22 c0       	rjmp	.+68     	; 0x2134 <malloc+0x98>
    20f0:	21 15       	cp	r18, r1
    20f2:	31 05       	cpc	r19, r1
    20f4:	19 f0       	breq	.+6      	; 0x20fc <malloc+0x60>
    20f6:	42 17       	cp	r20, r18
    20f8:	53 07       	cpc	r21, r19
    20fa:	18 f4       	brcc	.+6      	; 0x2102 <malloc+0x66>
    20fc:	9a 01       	movw	r18, r20
    20fe:	bd 01       	movw	r22, r26
    2100:	ef 01       	movw	r28, r30
    2102:	df 01       	movw	r26, r30
    2104:	f8 01       	movw	r30, r16
    2106:	db cf       	rjmp	.-74     	; 0x20be <malloc+0x22>
    2108:	21 15       	cp	r18, r1
    210a:	31 05       	cpc	r19, r1
    210c:	f9 f0       	breq	.+62     	; 0x214c <malloc+0xb0>
    210e:	28 1b       	sub	r18, r24
    2110:	39 0b       	sbc	r19, r25
    2112:	24 30       	cpi	r18, 0x04	; 4
    2114:	31 05       	cpc	r19, r1
    2116:	80 f4       	brcc	.+32     	; 0x2138 <malloc+0x9c>
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	9b 81       	ldd	r25, Y+3	; 0x03
    211c:	61 15       	cp	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	21 f0       	breq	.+8      	; 0x212a <malloc+0x8e>
    2122:	fb 01       	movw	r30, r22
    2124:	93 83       	std	Z+3, r25	; 0x03
    2126:	82 83       	std	Z+2, r24	; 0x02
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <malloc+0x96>
    212a:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <__flp+0x1>
    212e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__flp>
    2132:	fe 01       	movw	r30, r28
    2134:	32 96       	adiw	r30, 0x02	; 2
    2136:	44 c0       	rjmp	.+136    	; 0x21c0 <malloc+0x124>
    2138:	fe 01       	movw	r30, r28
    213a:	e2 0f       	add	r30, r18
    213c:	f3 1f       	adc	r31, r19
    213e:	81 93       	st	Z+, r24
    2140:	91 93       	st	Z+, r25
    2142:	22 50       	subi	r18, 0x02	; 2
    2144:	31 09       	sbc	r19, r1
    2146:	39 83       	std	Y+1, r19	; 0x01
    2148:	28 83       	st	Y, r18
    214a:	3a c0       	rjmp	.+116    	; 0x21c0 <malloc+0x124>
    214c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__brkval>
    2150:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__brkval+0x1>
    2154:	23 2b       	or	r18, r19
    2156:	41 f4       	brne	.+16     	; 0x2168 <malloc+0xcc>
    2158:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    215c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    2160:	30 93 f2 00 	sts	0x00F2, r19	; 0x8000f2 <__brkval+0x1>
    2164:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__brkval>
    2168:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    216c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2170:	21 15       	cp	r18, r1
    2172:	31 05       	cpc	r19, r1
    2174:	41 f4       	brne	.+16     	; 0x2186 <malloc+0xea>
    2176:	2d b7       	in	r18, 0x3d	; 61
    2178:	3e b7       	in	r19, 0x3e	; 62
    217a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    217e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    2182:	24 1b       	sub	r18, r20
    2184:	35 0b       	sbc	r19, r21
    2186:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__brkval>
    218a:	f0 91 f2 00 	lds	r31, 0x00F2	; 0x8000f2 <__brkval+0x1>
    218e:	e2 17       	cp	r30, r18
    2190:	f3 07       	cpc	r31, r19
    2192:	a0 f4       	brcc	.+40     	; 0x21bc <malloc+0x120>
    2194:	2e 1b       	sub	r18, r30
    2196:	3f 0b       	sbc	r19, r31
    2198:	28 17       	cp	r18, r24
    219a:	39 07       	cpc	r19, r25
    219c:	78 f0       	brcs	.+30     	; 0x21bc <malloc+0x120>
    219e:	ac 01       	movw	r20, r24
    21a0:	4e 5f       	subi	r20, 0xFE	; 254
    21a2:	5f 4f       	sbci	r21, 0xFF	; 255
    21a4:	24 17       	cp	r18, r20
    21a6:	35 07       	cpc	r19, r21
    21a8:	48 f0       	brcs	.+18     	; 0x21bc <malloc+0x120>
    21aa:	4e 0f       	add	r20, r30
    21ac:	5f 1f       	adc	r21, r31
    21ae:	50 93 f2 00 	sts	0x00F2, r21	; 0x8000f2 <__brkval+0x1>
    21b2:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__brkval>
    21b6:	81 93       	st	Z+, r24
    21b8:	91 93       	st	Z+, r25
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <malloc+0x124>
    21bc:	e0 e0       	ldi	r30, 0x00	; 0
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	cf 01       	movw	r24, r30
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	08 95       	ret

000021cc <free>:
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <free+0xa>
    21d4:	81 c0       	rjmp	.+258    	; 0x22d8 <free+0x10c>
    21d6:	fc 01       	movw	r30, r24
    21d8:	32 97       	sbiw	r30, 0x02	; 2
    21da:	13 82       	std	Z+3, r1	; 0x03
    21dc:	12 82       	std	Z+2, r1	; 0x02
    21de:	a0 91 f3 00 	lds	r26, 0x00F3	; 0x8000f3 <__flp>
    21e2:	b0 91 f4 00 	lds	r27, 0x00F4	; 0x8000f4 <__flp+0x1>
    21e6:	10 97       	sbiw	r26, 0x00	; 0
    21e8:	81 f4       	brne	.+32     	; 0x220a <free+0x3e>
    21ea:	20 81       	ld	r18, Z
    21ec:	31 81       	ldd	r19, Z+1	; 0x01
    21ee:	82 0f       	add	r24, r18
    21f0:	93 1f       	adc	r25, r19
    21f2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__brkval>
    21f6:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__brkval+0x1>
    21fa:	28 17       	cp	r18, r24
    21fc:	39 07       	cpc	r19, r25
    21fe:	51 f5       	brne	.+84     	; 0x2254 <free+0x88>
    2200:	f0 93 f2 00 	sts	0x00F2, r31	; 0x8000f2 <__brkval+0x1>
    2204:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__brkval>
    2208:	67 c0       	rjmp	.+206    	; 0x22d8 <free+0x10c>
    220a:	ed 01       	movw	r28, r26
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	ce 17       	cp	r28, r30
    2212:	df 07       	cpc	r29, r31
    2214:	40 f4       	brcc	.+16     	; 0x2226 <free+0x5a>
    2216:	4a 81       	ldd	r20, Y+2	; 0x02
    2218:	5b 81       	ldd	r21, Y+3	; 0x03
    221a:	9e 01       	movw	r18, r28
    221c:	41 15       	cp	r20, r1
    221e:	51 05       	cpc	r21, r1
    2220:	f1 f0       	breq	.+60     	; 0x225e <free+0x92>
    2222:	ea 01       	movw	r28, r20
    2224:	f5 cf       	rjmp	.-22     	; 0x2210 <free+0x44>
    2226:	d3 83       	std	Z+3, r29	; 0x03
    2228:	c2 83       	std	Z+2, r28	; 0x02
    222a:	40 81       	ld	r20, Z
    222c:	51 81       	ldd	r21, Z+1	; 0x01
    222e:	84 0f       	add	r24, r20
    2230:	95 1f       	adc	r25, r21
    2232:	c8 17       	cp	r28, r24
    2234:	d9 07       	cpc	r29, r25
    2236:	59 f4       	brne	.+22     	; 0x224e <free+0x82>
    2238:	88 81       	ld	r24, Y
    223a:	99 81       	ldd	r25, Y+1	; 0x01
    223c:	84 0f       	add	r24, r20
    223e:	95 1f       	adc	r25, r21
    2240:	02 96       	adiw	r24, 0x02	; 2
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	9b 81       	ldd	r25, Y+3	; 0x03
    224a:	93 83       	std	Z+3, r25	; 0x03
    224c:	82 83       	std	Z+2, r24	; 0x02
    224e:	21 15       	cp	r18, r1
    2250:	31 05       	cpc	r19, r1
    2252:	29 f4       	brne	.+10     	; 0x225e <free+0x92>
    2254:	f0 93 f4 00 	sts	0x00F4, r31	; 0x8000f4 <__flp+0x1>
    2258:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <__flp>
    225c:	3d c0       	rjmp	.+122    	; 0x22d8 <free+0x10c>
    225e:	e9 01       	movw	r28, r18
    2260:	fb 83       	std	Y+3, r31	; 0x03
    2262:	ea 83       	std	Y+2, r30	; 0x02
    2264:	49 91       	ld	r20, Y+
    2266:	59 91       	ld	r21, Y+
    2268:	c4 0f       	add	r28, r20
    226a:	d5 1f       	adc	r29, r21
    226c:	ec 17       	cp	r30, r28
    226e:	fd 07       	cpc	r31, r29
    2270:	61 f4       	brne	.+24     	; 0x228a <free+0xbe>
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	84 0f       	add	r24, r20
    2278:	95 1f       	adc	r25, r21
    227a:	02 96       	adiw	r24, 0x02	; 2
    227c:	e9 01       	movw	r28, r18
    227e:	99 83       	std	Y+1, r25	; 0x01
    2280:	88 83       	st	Y, r24
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	9b 83       	std	Y+3, r25	; 0x03
    2288:	8a 83       	std	Y+2, r24	; 0x02
    228a:	e0 e0       	ldi	r30, 0x00	; 0
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	12 96       	adiw	r26, 0x02	; 2
    2290:	8d 91       	ld	r24, X+
    2292:	9c 91       	ld	r25, X
    2294:	13 97       	sbiw	r26, 0x03	; 3
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	19 f0       	breq	.+6      	; 0x22a0 <free+0xd4>
    229a:	fd 01       	movw	r30, r26
    229c:	dc 01       	movw	r26, r24
    229e:	f7 cf       	rjmp	.-18     	; 0x228e <free+0xc2>
    22a0:	8d 91       	ld	r24, X+
    22a2:	9c 91       	ld	r25, X
    22a4:	11 97       	sbiw	r26, 0x01	; 1
    22a6:	9d 01       	movw	r18, r26
    22a8:	2e 5f       	subi	r18, 0xFE	; 254
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__brkval>
    22b4:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__brkval+0x1>
    22b8:	28 17       	cp	r18, r24
    22ba:	39 07       	cpc	r19, r25
    22bc:	69 f4       	brne	.+26     	; 0x22d8 <free+0x10c>
    22be:	30 97       	sbiw	r30, 0x00	; 0
    22c0:	29 f4       	brne	.+10     	; 0x22cc <free+0x100>
    22c2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__flp+0x1>
    22c6:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__flp>
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <free+0x104>
    22cc:	13 82       	std	Z+3, r1	; 0x03
    22ce:	12 82       	std	Z+2, r1	; 0x02
    22d0:	b0 93 f2 00 	sts	0x00F2, r27	; 0x8000f2 <__brkval+0x1>
    22d4:	a0 93 f1 00 	sts	0x00F1, r26	; 0x8000f1 <__brkval>
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <atof>:
    22de:	66 27       	eor	r22, r22
    22e0:	77 27       	eor	r23, r23
    22e2:	0c 94 80 13 	jmp	0x2700	; 0x2700 <strtod>

000022e6 <strcat>:
    22e6:	fb 01       	movw	r30, r22
    22e8:	dc 01       	movw	r26, r24
    22ea:	0d 90       	ld	r0, X+
    22ec:	00 20       	and	r0, r0
    22ee:	e9 f7       	brne	.-6      	; 0x22ea <strcat+0x4>
    22f0:	11 97       	sbiw	r26, 0x01	; 1
    22f2:	01 90       	ld	r0, Z+
    22f4:	0d 92       	st	X+, r0
    22f6:	00 20       	and	r0, r0
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <strcat+0xc>
    22fa:	08 95       	ret

000022fc <strchr>:
    22fc:	fc 01       	movw	r30, r24
    22fe:	81 91       	ld	r24, Z+
    2300:	86 17       	cp	r24, r22
    2302:	21 f0       	breq	.+8      	; 0x230c <strchr+0x10>
    2304:	88 23       	and	r24, r24
    2306:	d9 f7       	brne	.-10     	; 0x22fe <strchr+0x2>
    2308:	99 27       	eor	r25, r25
    230a:	08 95       	ret
    230c:	31 97       	sbiw	r30, 0x01	; 1
    230e:	cf 01       	movw	r24, r30
    2310:	08 95       	ret

00002312 <printf>:
    2312:	a0 e0       	ldi	r26, 0x00	; 0
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	ef e8       	ldi	r30, 0x8F	; 143
    2318:	f1 e1       	ldi	r31, 0x11	; 17
    231a:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__prologue_saves__+0x20>
    231e:	ae 01       	movw	r20, r28
    2320:	4b 5f       	subi	r20, 0xFB	; 251
    2322:	5f 4f       	sbci	r21, 0xFF	; 255
    2324:	fa 01       	movw	r30, r20
    2326:	61 91       	ld	r22, Z+
    2328:	71 91       	ld	r23, Z+
    232a:	af 01       	movw	r20, r30
    232c:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__iob+0x2>
    2330:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <__iob+0x3>
    2334:	0e 94 9f 11 	call	0x233e	; 0x233e <vfprintf>
    2338:	e2 e0       	ldi	r30, 0x02	; 2
    233a:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__epilogue_restores__+0x20>

0000233e <vfprintf>:
    233e:	ab e0       	ldi	r26, 0x0B	; 11
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 ea       	ldi	r30, 0xA5	; 165
    2344:	f1 e1       	ldi	r31, 0x11	; 17
    2346:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__prologue_saves__>
    234a:	6c 01       	movw	r12, r24
    234c:	7b 01       	movw	r14, r22
    234e:	8a 01       	movw	r16, r20
    2350:	fc 01       	movw	r30, r24
    2352:	17 82       	std	Z+7, r1	; 0x07
    2354:	16 82       	std	Z+6, r1	; 0x06
    2356:	83 81       	ldd	r24, Z+3	; 0x03
    2358:	81 ff       	sbrs	r24, 1
    235a:	cc c1       	rjmp	.+920    	; 0x26f4 <vfprintf+0x3b6>
    235c:	ce 01       	movw	r24, r28
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	3c 01       	movw	r6, r24
    2362:	f6 01       	movw	r30, r12
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	f7 01       	movw	r30, r14
    2368:	93 fd       	sbrc	r25, 3
    236a:	85 91       	lpm	r24, Z+
    236c:	93 ff       	sbrs	r25, 3
    236e:	81 91       	ld	r24, Z+
    2370:	7f 01       	movw	r14, r30
    2372:	88 23       	and	r24, r24
    2374:	09 f4       	brne	.+2      	; 0x2378 <vfprintf+0x3a>
    2376:	ba c1       	rjmp	.+884    	; 0x26ec <vfprintf+0x3ae>
    2378:	85 32       	cpi	r24, 0x25	; 37
    237a:	39 f4       	brne	.+14     	; 0x238a <vfprintf+0x4c>
    237c:	93 fd       	sbrc	r25, 3
    237e:	85 91       	lpm	r24, Z+
    2380:	93 ff       	sbrs	r25, 3
    2382:	81 91       	ld	r24, Z+
    2384:	7f 01       	movw	r14, r30
    2386:	85 32       	cpi	r24, 0x25	; 37
    2388:	29 f4       	brne	.+10     	; 0x2394 <vfprintf+0x56>
    238a:	b6 01       	movw	r22, r12
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    2392:	e7 cf       	rjmp	.-50     	; 0x2362 <vfprintf+0x24>
    2394:	91 2c       	mov	r9, r1
    2396:	21 2c       	mov	r2, r1
    2398:	31 2c       	mov	r3, r1
    239a:	ff e1       	ldi	r31, 0x1F	; 31
    239c:	f3 15       	cp	r31, r3
    239e:	d8 f0       	brcs	.+54     	; 0x23d6 <vfprintf+0x98>
    23a0:	8b 32       	cpi	r24, 0x2B	; 43
    23a2:	79 f0       	breq	.+30     	; 0x23c2 <vfprintf+0x84>
    23a4:	38 f4       	brcc	.+14     	; 0x23b4 <vfprintf+0x76>
    23a6:	80 32       	cpi	r24, 0x20	; 32
    23a8:	79 f0       	breq	.+30     	; 0x23c8 <vfprintf+0x8a>
    23aa:	83 32       	cpi	r24, 0x23	; 35
    23ac:	a1 f4       	brne	.+40     	; 0x23d6 <vfprintf+0x98>
    23ae:	23 2d       	mov	r18, r3
    23b0:	20 61       	ori	r18, 0x10	; 16
    23b2:	1d c0       	rjmp	.+58     	; 0x23ee <vfprintf+0xb0>
    23b4:	8d 32       	cpi	r24, 0x2D	; 45
    23b6:	61 f0       	breq	.+24     	; 0x23d0 <vfprintf+0x92>
    23b8:	80 33       	cpi	r24, 0x30	; 48
    23ba:	69 f4       	brne	.+26     	; 0x23d6 <vfprintf+0x98>
    23bc:	23 2d       	mov	r18, r3
    23be:	21 60       	ori	r18, 0x01	; 1
    23c0:	16 c0       	rjmp	.+44     	; 0x23ee <vfprintf+0xb0>
    23c2:	83 2d       	mov	r24, r3
    23c4:	82 60       	ori	r24, 0x02	; 2
    23c6:	38 2e       	mov	r3, r24
    23c8:	e3 2d       	mov	r30, r3
    23ca:	e4 60       	ori	r30, 0x04	; 4
    23cc:	3e 2e       	mov	r3, r30
    23ce:	2a c0       	rjmp	.+84     	; 0x2424 <vfprintf+0xe6>
    23d0:	f3 2d       	mov	r31, r3
    23d2:	f8 60       	ori	r31, 0x08	; 8
    23d4:	1d c0       	rjmp	.+58     	; 0x2410 <vfprintf+0xd2>
    23d6:	37 fc       	sbrc	r3, 7
    23d8:	2d c0       	rjmp	.+90     	; 0x2434 <vfprintf+0xf6>
    23da:	20 ed       	ldi	r18, 0xD0	; 208
    23dc:	28 0f       	add	r18, r24
    23de:	2a 30       	cpi	r18, 0x0A	; 10
    23e0:	40 f0       	brcs	.+16     	; 0x23f2 <vfprintf+0xb4>
    23e2:	8e 32       	cpi	r24, 0x2E	; 46
    23e4:	b9 f4       	brne	.+46     	; 0x2414 <vfprintf+0xd6>
    23e6:	36 fc       	sbrc	r3, 6
    23e8:	81 c1       	rjmp	.+770    	; 0x26ec <vfprintf+0x3ae>
    23ea:	23 2d       	mov	r18, r3
    23ec:	20 64       	ori	r18, 0x40	; 64
    23ee:	32 2e       	mov	r3, r18
    23f0:	19 c0       	rjmp	.+50     	; 0x2424 <vfprintf+0xe6>
    23f2:	36 fe       	sbrs	r3, 6
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <vfprintf+0xc4>
    23f6:	8a e0       	ldi	r24, 0x0A	; 10
    23f8:	98 9e       	mul	r9, r24
    23fa:	20 0d       	add	r18, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	92 2e       	mov	r9, r18
    2400:	11 c0       	rjmp	.+34     	; 0x2424 <vfprintf+0xe6>
    2402:	ea e0       	ldi	r30, 0x0A	; 10
    2404:	2e 9e       	mul	r2, r30
    2406:	20 0d       	add	r18, r0
    2408:	11 24       	eor	r1, r1
    240a:	22 2e       	mov	r2, r18
    240c:	f3 2d       	mov	r31, r3
    240e:	f0 62       	ori	r31, 0x20	; 32
    2410:	3f 2e       	mov	r3, r31
    2412:	08 c0       	rjmp	.+16     	; 0x2424 <vfprintf+0xe6>
    2414:	8c 36       	cpi	r24, 0x6C	; 108
    2416:	21 f4       	brne	.+8      	; 0x2420 <vfprintf+0xe2>
    2418:	83 2d       	mov	r24, r3
    241a:	80 68       	ori	r24, 0x80	; 128
    241c:	38 2e       	mov	r3, r24
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <vfprintf+0xe6>
    2420:	88 36       	cpi	r24, 0x68	; 104
    2422:	41 f4       	brne	.+16     	; 0x2434 <vfprintf+0xf6>
    2424:	f7 01       	movw	r30, r14
    2426:	93 fd       	sbrc	r25, 3
    2428:	85 91       	lpm	r24, Z+
    242a:	93 ff       	sbrs	r25, 3
    242c:	81 91       	ld	r24, Z+
    242e:	7f 01       	movw	r14, r30
    2430:	81 11       	cpse	r24, r1
    2432:	b3 cf       	rjmp	.-154    	; 0x239a <vfprintf+0x5c>
    2434:	98 2f       	mov	r25, r24
    2436:	9f 7d       	andi	r25, 0xDF	; 223
    2438:	95 54       	subi	r25, 0x45	; 69
    243a:	93 30       	cpi	r25, 0x03	; 3
    243c:	28 f4       	brcc	.+10     	; 0x2448 <vfprintf+0x10a>
    243e:	0c 5f       	subi	r16, 0xFC	; 252
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	9f e3       	ldi	r25, 0x3F	; 63
    2444:	99 83       	std	Y+1, r25	; 0x01
    2446:	0d c0       	rjmp	.+26     	; 0x2462 <vfprintf+0x124>
    2448:	83 36       	cpi	r24, 0x63	; 99
    244a:	31 f0       	breq	.+12     	; 0x2458 <vfprintf+0x11a>
    244c:	83 37       	cpi	r24, 0x73	; 115
    244e:	71 f0       	breq	.+28     	; 0x246c <vfprintf+0x12e>
    2450:	83 35       	cpi	r24, 0x53	; 83
    2452:	09 f0       	breq	.+2      	; 0x2456 <vfprintf+0x118>
    2454:	59 c0       	rjmp	.+178    	; 0x2508 <vfprintf+0x1ca>
    2456:	21 c0       	rjmp	.+66     	; 0x249a <vfprintf+0x15c>
    2458:	f8 01       	movw	r30, r16
    245a:	80 81       	ld	r24, Z
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	0e 5f       	subi	r16, 0xFE	; 254
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	88 24       	eor	r8, r8
    2464:	83 94       	inc	r8
    2466:	91 2c       	mov	r9, r1
    2468:	53 01       	movw	r10, r6
    246a:	13 c0       	rjmp	.+38     	; 0x2492 <vfprintf+0x154>
    246c:	28 01       	movw	r4, r16
    246e:	f2 e0       	ldi	r31, 0x02	; 2
    2470:	4f 0e       	add	r4, r31
    2472:	51 1c       	adc	r5, r1
    2474:	f8 01       	movw	r30, r16
    2476:	a0 80       	ld	r10, Z
    2478:	b1 80       	ldd	r11, Z+1	; 0x01
    247a:	36 fe       	sbrs	r3, 6
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <vfprintf+0x146>
    247e:	69 2d       	mov	r22, r9
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <vfprintf+0x14a>
    2484:	6f ef       	ldi	r22, 0xFF	; 255
    2486:	7f ef       	ldi	r23, 0xFF	; 255
    2488:	c5 01       	movw	r24, r10
    248a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <strnlen>
    248e:	4c 01       	movw	r8, r24
    2490:	82 01       	movw	r16, r4
    2492:	f3 2d       	mov	r31, r3
    2494:	ff 77       	andi	r31, 0x7F	; 127
    2496:	3f 2e       	mov	r3, r31
    2498:	16 c0       	rjmp	.+44     	; 0x24c6 <vfprintf+0x188>
    249a:	28 01       	movw	r4, r16
    249c:	22 e0       	ldi	r18, 0x02	; 2
    249e:	42 0e       	add	r4, r18
    24a0:	51 1c       	adc	r5, r1
    24a2:	f8 01       	movw	r30, r16
    24a4:	a0 80       	ld	r10, Z
    24a6:	b1 80       	ldd	r11, Z+1	; 0x01
    24a8:	36 fe       	sbrs	r3, 6
    24aa:	03 c0       	rjmp	.+6      	; 0x24b2 <vfprintf+0x174>
    24ac:	69 2d       	mov	r22, r9
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <vfprintf+0x178>
    24b2:	6f ef       	ldi	r22, 0xFF	; 255
    24b4:	7f ef       	ldi	r23, 0xFF	; 255
    24b6:	c5 01       	movw	r24, r10
    24b8:	0e 94 ef 14 	call	0x29de	; 0x29de <strnlen_P>
    24bc:	4c 01       	movw	r8, r24
    24be:	f3 2d       	mov	r31, r3
    24c0:	f0 68       	ori	r31, 0x80	; 128
    24c2:	3f 2e       	mov	r3, r31
    24c4:	82 01       	movw	r16, r4
    24c6:	33 fc       	sbrc	r3, 3
    24c8:	1b c0       	rjmp	.+54     	; 0x2500 <vfprintf+0x1c2>
    24ca:	82 2d       	mov	r24, r2
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	88 16       	cp	r8, r24
    24d0:	99 06       	cpc	r9, r25
    24d2:	b0 f4       	brcc	.+44     	; 0x2500 <vfprintf+0x1c2>
    24d4:	b6 01       	movw	r22, r12
    24d6:	80 e2       	ldi	r24, 0x20	; 32
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    24de:	2a 94       	dec	r2
    24e0:	f4 cf       	rjmp	.-24     	; 0x24ca <vfprintf+0x18c>
    24e2:	f5 01       	movw	r30, r10
    24e4:	37 fc       	sbrc	r3, 7
    24e6:	85 91       	lpm	r24, Z+
    24e8:	37 fe       	sbrs	r3, 7
    24ea:	81 91       	ld	r24, Z+
    24ec:	5f 01       	movw	r10, r30
    24ee:	b6 01       	movw	r22, r12
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    24f6:	21 10       	cpse	r2, r1
    24f8:	2a 94       	dec	r2
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	82 1a       	sub	r8, r18
    24fe:	91 08       	sbc	r9, r1
    2500:	81 14       	cp	r8, r1
    2502:	91 04       	cpc	r9, r1
    2504:	71 f7       	brne	.-36     	; 0x24e2 <vfprintf+0x1a4>
    2506:	e8 c0       	rjmp	.+464    	; 0x26d8 <vfprintf+0x39a>
    2508:	84 36       	cpi	r24, 0x64	; 100
    250a:	11 f0       	breq	.+4      	; 0x2510 <vfprintf+0x1d2>
    250c:	89 36       	cpi	r24, 0x69	; 105
    250e:	41 f5       	brne	.+80     	; 0x2560 <vfprintf+0x222>
    2510:	f8 01       	movw	r30, r16
    2512:	37 fe       	sbrs	r3, 7
    2514:	07 c0       	rjmp	.+14     	; 0x2524 <vfprintf+0x1e6>
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	0c 5f       	subi	r16, 0xFC	; 252
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	08 c0       	rjmp	.+16     	; 0x2534 <vfprintf+0x1f6>
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	07 2e       	mov	r0, r23
    252a:	00 0c       	add	r0, r0
    252c:	88 0b       	sbc	r24, r24
    252e:	99 0b       	sbc	r25, r25
    2530:	0e 5f       	subi	r16, 0xFE	; 254
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	f3 2d       	mov	r31, r3
    2536:	ff 76       	andi	r31, 0x6F	; 111
    2538:	3f 2e       	mov	r3, r31
    253a:	97 ff       	sbrs	r25, 7
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <vfprintf+0x212>
    253e:	90 95       	com	r25
    2540:	80 95       	com	r24
    2542:	70 95       	com	r23
    2544:	61 95       	neg	r22
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	8f 4f       	sbci	r24, 0xFF	; 255
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	f0 68       	ori	r31, 0x80	; 128
    254e:	3f 2e       	mov	r3, r31
    2550:	2a e0       	ldi	r18, 0x0A	; 10
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	a3 01       	movw	r20, r6
    2556:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__ultoa_invert>
    255a:	88 2e       	mov	r8, r24
    255c:	86 18       	sub	r8, r6
    255e:	45 c0       	rjmp	.+138    	; 0x25ea <vfprintf+0x2ac>
    2560:	85 37       	cpi	r24, 0x75	; 117
    2562:	31 f4       	brne	.+12     	; 0x2570 <vfprintf+0x232>
    2564:	23 2d       	mov	r18, r3
    2566:	2f 7e       	andi	r18, 0xEF	; 239
    2568:	b2 2e       	mov	r11, r18
    256a:	2a e0       	ldi	r18, 0x0A	; 10
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	25 c0       	rjmp	.+74     	; 0x25ba <vfprintf+0x27c>
    2570:	93 2d       	mov	r25, r3
    2572:	99 7f       	andi	r25, 0xF9	; 249
    2574:	b9 2e       	mov	r11, r25
    2576:	8f 36       	cpi	r24, 0x6F	; 111
    2578:	c1 f0       	breq	.+48     	; 0x25aa <vfprintf+0x26c>
    257a:	18 f4       	brcc	.+6      	; 0x2582 <vfprintf+0x244>
    257c:	88 35       	cpi	r24, 0x58	; 88
    257e:	79 f0       	breq	.+30     	; 0x259e <vfprintf+0x260>
    2580:	b5 c0       	rjmp	.+362    	; 0x26ec <vfprintf+0x3ae>
    2582:	80 37       	cpi	r24, 0x70	; 112
    2584:	19 f0       	breq	.+6      	; 0x258c <vfprintf+0x24e>
    2586:	88 37       	cpi	r24, 0x78	; 120
    2588:	21 f0       	breq	.+8      	; 0x2592 <vfprintf+0x254>
    258a:	b0 c0       	rjmp	.+352    	; 0x26ec <vfprintf+0x3ae>
    258c:	e9 2f       	mov	r30, r25
    258e:	e0 61       	ori	r30, 0x10	; 16
    2590:	be 2e       	mov	r11, r30
    2592:	b4 fe       	sbrs	r11, 4
    2594:	0d c0       	rjmp	.+26     	; 0x25b0 <vfprintf+0x272>
    2596:	fb 2d       	mov	r31, r11
    2598:	f4 60       	ori	r31, 0x04	; 4
    259a:	bf 2e       	mov	r11, r31
    259c:	09 c0       	rjmp	.+18     	; 0x25b0 <vfprintf+0x272>
    259e:	34 fe       	sbrs	r3, 4
    25a0:	0a c0       	rjmp	.+20     	; 0x25b6 <vfprintf+0x278>
    25a2:	29 2f       	mov	r18, r25
    25a4:	26 60       	ori	r18, 0x06	; 6
    25a6:	b2 2e       	mov	r11, r18
    25a8:	06 c0       	rjmp	.+12     	; 0x25b6 <vfprintf+0x278>
    25aa:	28 e0       	ldi	r18, 0x08	; 8
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	05 c0       	rjmp	.+10     	; 0x25ba <vfprintf+0x27c>
    25b0:	20 e1       	ldi	r18, 0x10	; 16
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <vfprintf+0x27c>
    25b6:	20 e1       	ldi	r18, 0x10	; 16
    25b8:	32 e0       	ldi	r19, 0x02	; 2
    25ba:	f8 01       	movw	r30, r16
    25bc:	b7 fe       	sbrs	r11, 7
    25be:	07 c0       	rjmp	.+14     	; 0x25ce <vfprintf+0x290>
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	0c 5f       	subi	r16, 0xFC	; 252
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	06 c0       	rjmp	.+12     	; 0x25da <vfprintf+0x29c>
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 5f       	subi	r16, 0xFE	; 254
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	a3 01       	movw	r20, r6
    25dc:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__ultoa_invert>
    25e0:	88 2e       	mov	r8, r24
    25e2:	86 18       	sub	r8, r6
    25e4:	fb 2d       	mov	r31, r11
    25e6:	ff 77       	andi	r31, 0x7F	; 127
    25e8:	3f 2e       	mov	r3, r31
    25ea:	36 fe       	sbrs	r3, 6
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <vfprintf+0x2ca>
    25ee:	23 2d       	mov	r18, r3
    25f0:	2e 7f       	andi	r18, 0xFE	; 254
    25f2:	a2 2e       	mov	r10, r18
    25f4:	89 14       	cp	r8, r9
    25f6:	58 f4       	brcc	.+22     	; 0x260e <vfprintf+0x2d0>
    25f8:	34 fe       	sbrs	r3, 4
    25fa:	0b c0       	rjmp	.+22     	; 0x2612 <vfprintf+0x2d4>
    25fc:	32 fc       	sbrc	r3, 2
    25fe:	09 c0       	rjmp	.+18     	; 0x2612 <vfprintf+0x2d4>
    2600:	83 2d       	mov	r24, r3
    2602:	8e 7e       	andi	r24, 0xEE	; 238
    2604:	a8 2e       	mov	r10, r24
    2606:	05 c0       	rjmp	.+10     	; 0x2612 <vfprintf+0x2d4>
    2608:	b8 2c       	mov	r11, r8
    260a:	a3 2c       	mov	r10, r3
    260c:	03 c0       	rjmp	.+6      	; 0x2614 <vfprintf+0x2d6>
    260e:	b8 2c       	mov	r11, r8
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <vfprintf+0x2d6>
    2612:	b9 2c       	mov	r11, r9
    2614:	a4 fe       	sbrs	r10, 4
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <vfprintf+0x2f8>
    2618:	fe 01       	movw	r30, r28
    261a:	e8 0d       	add	r30, r8
    261c:	f1 1d       	adc	r31, r1
    261e:	80 81       	ld	r24, Z
    2620:	80 33       	cpi	r24, 0x30	; 48
    2622:	21 f4       	brne	.+8      	; 0x262c <vfprintf+0x2ee>
    2624:	9a 2d       	mov	r25, r10
    2626:	99 7e       	andi	r25, 0xE9	; 233
    2628:	a9 2e       	mov	r10, r25
    262a:	09 c0       	rjmp	.+18     	; 0x263e <vfprintf+0x300>
    262c:	a2 fe       	sbrs	r10, 2
    262e:	06 c0       	rjmp	.+12     	; 0x263c <vfprintf+0x2fe>
    2630:	b3 94       	inc	r11
    2632:	b3 94       	inc	r11
    2634:	04 c0       	rjmp	.+8      	; 0x263e <vfprintf+0x300>
    2636:	8a 2d       	mov	r24, r10
    2638:	86 78       	andi	r24, 0x86	; 134
    263a:	09 f0       	breq	.+2      	; 0x263e <vfprintf+0x300>
    263c:	b3 94       	inc	r11
    263e:	a3 fc       	sbrc	r10, 3
    2640:	11 c0       	rjmp	.+34     	; 0x2664 <vfprintf+0x326>
    2642:	a0 fe       	sbrs	r10, 0
    2644:	06 c0       	rjmp	.+12     	; 0x2652 <vfprintf+0x314>
    2646:	b2 14       	cp	r11, r2
    2648:	88 f4       	brcc	.+34     	; 0x266c <vfprintf+0x32e>
    264a:	28 0c       	add	r2, r8
    264c:	92 2c       	mov	r9, r2
    264e:	9b 18       	sub	r9, r11
    2650:	0e c0       	rjmp	.+28     	; 0x266e <vfprintf+0x330>
    2652:	b2 14       	cp	r11, r2
    2654:	60 f4       	brcc	.+24     	; 0x266e <vfprintf+0x330>
    2656:	b6 01       	movw	r22, r12
    2658:	80 e2       	ldi	r24, 0x20	; 32
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    2660:	b3 94       	inc	r11
    2662:	f7 cf       	rjmp	.-18     	; 0x2652 <vfprintf+0x314>
    2664:	b2 14       	cp	r11, r2
    2666:	18 f4       	brcc	.+6      	; 0x266e <vfprintf+0x330>
    2668:	2b 18       	sub	r2, r11
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <vfprintf+0x332>
    266c:	98 2c       	mov	r9, r8
    266e:	21 2c       	mov	r2, r1
    2670:	a4 fe       	sbrs	r10, 4
    2672:	10 c0       	rjmp	.+32     	; 0x2694 <vfprintf+0x356>
    2674:	b6 01       	movw	r22, r12
    2676:	80 e3       	ldi	r24, 0x30	; 48
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    267e:	a2 fe       	sbrs	r10, 2
    2680:	17 c0       	rjmp	.+46     	; 0x26b0 <vfprintf+0x372>
    2682:	a1 fc       	sbrc	r10, 1
    2684:	03 c0       	rjmp	.+6      	; 0x268c <vfprintf+0x34e>
    2686:	88 e7       	ldi	r24, 0x78	; 120
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <vfprintf+0x352>
    268c:	88 e5       	ldi	r24, 0x58	; 88
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	b6 01       	movw	r22, r12
    2692:	0c c0       	rjmp	.+24     	; 0x26ac <vfprintf+0x36e>
    2694:	8a 2d       	mov	r24, r10
    2696:	86 78       	andi	r24, 0x86	; 134
    2698:	59 f0       	breq	.+22     	; 0x26b0 <vfprintf+0x372>
    269a:	a1 fe       	sbrs	r10, 1
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <vfprintf+0x364>
    269e:	8b e2       	ldi	r24, 0x2B	; 43
    26a0:	01 c0       	rjmp	.+2      	; 0x26a4 <vfprintf+0x366>
    26a2:	80 e2       	ldi	r24, 0x20	; 32
    26a4:	a7 fc       	sbrc	r10, 7
    26a6:	8d e2       	ldi	r24, 0x2D	; 45
    26a8:	b6 01       	movw	r22, r12
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    26b0:	89 14       	cp	r8, r9
    26b2:	38 f4       	brcc	.+14     	; 0x26c2 <vfprintf+0x384>
    26b4:	b6 01       	movw	r22, r12
    26b6:	80 e3       	ldi	r24, 0x30	; 48
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    26be:	9a 94       	dec	r9
    26c0:	f7 cf       	rjmp	.-18     	; 0x26b0 <vfprintf+0x372>
    26c2:	8a 94       	dec	r8
    26c4:	f3 01       	movw	r30, r6
    26c6:	e8 0d       	add	r30, r8
    26c8:	f1 1d       	adc	r31, r1
    26ca:	80 81       	ld	r24, Z
    26cc:	b6 01       	movw	r22, r12
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    26d4:	81 10       	cpse	r8, r1
    26d6:	f5 cf       	rjmp	.-22     	; 0x26c2 <vfprintf+0x384>
    26d8:	22 20       	and	r2, r2
    26da:	09 f4       	brne	.+2      	; 0x26de <vfprintf+0x3a0>
    26dc:	42 ce       	rjmp	.-892    	; 0x2362 <vfprintf+0x24>
    26de:	b6 01       	movw	r22, r12
    26e0:	80 e2       	ldi	r24, 0x20	; 32
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <fputc>
    26e8:	2a 94       	dec	r2
    26ea:	f6 cf       	rjmp	.-20     	; 0x26d8 <vfprintf+0x39a>
    26ec:	f6 01       	movw	r30, r12
    26ee:	86 81       	ldd	r24, Z+6	; 0x06
    26f0:	97 81       	ldd	r25, Z+7	; 0x07
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <vfprintf+0x3ba>
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
    26f6:	9f ef       	ldi	r25, 0xFF	; 255
    26f8:	2b 96       	adiw	r28, 0x0b	; 11
    26fa:	e2 e1       	ldi	r30, 0x12	; 18
    26fc:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__epilogue_restores__>

00002700 <strtod>:
    2700:	a0 e0       	ldi	r26, 0x00	; 0
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e6 e8       	ldi	r30, 0x86	; 134
    2706:	f3 e1       	ldi	r31, 0x13	; 19
    2708:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__prologue_saves__+0xc>
    270c:	ec 01       	movw	r28, r24
    270e:	6b 01       	movw	r12, r22
    2710:	61 15       	cp	r22, r1
    2712:	71 05       	cpc	r23, r1
    2714:	19 f0       	breq	.+6      	; 0x271c <strtod+0x1c>
    2716:	fb 01       	movw	r30, r22
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	80 83       	st	Z, r24
    271c:	7e 01       	movw	r14, r28
    271e:	ff ef       	ldi	r31, 0xFF	; 255
    2720:	ef 1a       	sub	r14, r31
    2722:	ff 0a       	sbc	r15, r31
    2724:	08 81       	ld	r16, Y
    2726:	80 2f       	mov	r24, r16
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 ce 14 	call	0x299c	; 0x299c <isspace>
    272e:	89 2b       	or	r24, r25
    2730:	11 f0       	breq	.+4      	; 0x2736 <strtod+0x36>
    2732:	e7 01       	movw	r28, r14
    2734:	f3 cf       	rjmp	.-26     	; 0x271c <strtod+0x1c>
    2736:	0d 32       	cpi	r16, 0x2D	; 45
    2738:	39 f4       	brne	.+14     	; 0x2748 <strtod+0x48>
    273a:	7e 01       	movw	r14, r28
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	e8 0e       	add	r14, r24
    2740:	f1 1c       	adc	r15, r1
    2742:	09 81       	ldd	r16, Y+1	; 0x01
    2744:	11 e0       	ldi	r17, 0x01	; 1
    2746:	08 c0       	rjmp	.+16     	; 0x2758 <strtod+0x58>
    2748:	0b 32       	cpi	r16, 0x2B	; 43
    274a:	29 f4       	brne	.+10     	; 0x2756 <strtod+0x56>
    274c:	7e 01       	movw	r14, r28
    274e:	92 e0       	ldi	r25, 0x02	; 2
    2750:	e9 0e       	add	r14, r25
    2752:	f1 1c       	adc	r15, r1
    2754:	09 81       	ldd	r16, Y+1	; 0x01
    2756:	10 e0       	ldi	r17, 0x00	; 0
    2758:	e7 01       	movw	r28, r14
    275a:	21 97       	sbiw	r28, 0x01	; 1
    275c:	43 e0       	ldi	r20, 0x03	; 3
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	6e ed       	ldi	r22, 0xDE	; 222
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	ce 01       	movw	r24, r28
    2766:	0e 94 d7 14 	call	0x29ae	; 0x29ae <strncasecmp_P>
    276a:	89 2b       	or	r24, r25
    276c:	c1 f4       	brne	.+48     	; 0x279e <strtod+0x9e>
    276e:	23 96       	adiw	r28, 0x03	; 3
    2770:	45 e0       	ldi	r20, 0x05	; 5
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	69 ed       	ldi	r22, 0xD9	; 217
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	ce 01       	movw	r24, r28
    277a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <strncasecmp_P>
    277e:	89 2b       	or	r24, r25
    2780:	09 f4       	brne	.+2      	; 0x2784 <strtod+0x84>
    2782:	25 96       	adiw	r28, 0x05	; 5
    2784:	c1 14       	cp	r12, r1
    2786:	d1 04       	cpc	r13, r1
    2788:	19 f0       	breq	.+6      	; 0x2790 <strtod+0x90>
    278a:	f6 01       	movw	r30, r12
    278c:	d1 83       	std	Z+1, r29	; 0x01
    278e:	c0 83       	st	Z, r28
    2790:	11 11       	cpse	r17, r1
    2792:	f6 c0       	rjmp	.+492    	; 0x2980 <strtod+0x280>
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	80 e8       	ldi	r24, 0x80	; 128
    279a:	9f e7       	ldi	r25, 0x7F	; 127
    279c:	fa c0       	rjmp	.+500    	; 0x2992 <strtod+0x292>
    279e:	43 e0       	ldi	r20, 0x03	; 3
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	66 ed       	ldi	r22, 0xD6	; 214
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	ce 01       	movw	r24, r28
    27a8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <strncasecmp_P>
    27ac:	89 2b       	or	r24, r25
    27ae:	59 f4       	brne	.+22     	; 0x27c6 <strtod+0xc6>
    27b0:	c1 14       	cp	r12, r1
    27b2:	d1 04       	cpc	r13, r1
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <strtod+0xb8>
    27b6:	e9 c0       	rjmp	.+466    	; 0x298a <strtod+0x28a>
    27b8:	f2 e0       	ldi	r31, 0x02	; 2
    27ba:	ef 0e       	add	r14, r31
    27bc:	f1 1c       	adc	r15, r1
    27be:	f6 01       	movw	r30, r12
    27c0:	f1 82       	std	Z+1, r15	; 0x01
    27c2:	e0 82       	st	Z, r14
    27c4:	e2 c0       	rjmp	.+452    	; 0x298a <strtod+0x28a>
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	a9 01       	movw	r20, r18
    27cc:	c0 e0       	ldi	r28, 0x00	; 0
    27ce:	d0 e0       	ldi	r29, 0x00	; 0
    27d0:	f7 01       	movw	r30, r14
    27d2:	80 ed       	ldi	r24, 0xD0	; 208
    27d4:	a8 2e       	mov	r10, r24
    27d6:	a0 0e       	add	r10, r16
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	8a 15       	cp	r24, r10
    27dc:	30 f1       	brcs	.+76     	; 0x282a <strtod+0x12a>
    27de:	91 2f       	mov	r25, r17
    27e0:	92 60       	ori	r25, 0x02	; 2
    27e2:	b9 2e       	mov	r11, r25
    27e4:	81 2f       	mov	r24, r17
    27e6:	88 70       	andi	r24, 0x08	; 8
    27e8:	12 ff       	sbrs	r17, 2
    27ea:	04 c0       	rjmp	.+8      	; 0x27f4 <strtod+0xf4>
    27ec:	81 11       	cpse	r24, r1
    27ee:	24 c0       	rjmp	.+72     	; 0x2838 <strtod+0x138>
    27f0:	21 96       	adiw	r28, 0x01	; 1
    27f2:	22 c0       	rjmp	.+68     	; 0x2838 <strtod+0x138>
    27f4:	81 11       	cpse	r24, r1
    27f6:	21 97       	sbiw	r28, 0x01	; 1
    27f8:	a5 e0       	ldi	r26, 0x05	; 5
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__muluhisi3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	aa 1f       	adc	r26, r26
    280a:	bb 1f       	adc	r27, r27
    280c:	9c 01       	movw	r18, r24
    280e:	ad 01       	movw	r20, r26
    2810:	2a 0d       	add	r18, r10
    2812:	31 1d       	adc	r19, r1
    2814:	41 1d       	adc	r20, r1
    2816:	51 1d       	adc	r21, r1
    2818:	28 39       	cpi	r18, 0x98	; 152
    281a:	89 e9       	ldi	r24, 0x99	; 153
    281c:	38 07       	cpc	r19, r24
    281e:	48 07       	cpc	r20, r24
    2820:	89 e1       	ldi	r24, 0x19	; 25
    2822:	58 07       	cpc	r21, r24
    2824:	48 f0       	brcs	.+18     	; 0x2838 <strtod+0x138>
    2826:	16 60       	ori	r17, 0x06	; 6
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <strtod+0x136>
    282a:	9e ef       	ldi	r25, 0xFE	; 254
    282c:	a9 12       	cpse	r10, r25
    282e:	0a c0       	rjmp	.+20     	; 0x2844 <strtod+0x144>
    2830:	13 fd       	sbrc	r17, 3
    2832:	40 c0       	rjmp	.+128    	; 0x28b4 <strtod+0x1b4>
    2834:	18 60       	ori	r17, 0x08	; 8
    2836:	b1 2e       	mov	r11, r17
    2838:	8f ef       	ldi	r24, 0xFF	; 255
    283a:	e8 1a       	sub	r14, r24
    283c:	f8 0a       	sbc	r15, r24
    283e:	00 81       	ld	r16, Z
    2840:	1b 2d       	mov	r17, r11
    2842:	c6 cf       	rjmp	.-116    	; 0x27d0 <strtod+0xd0>
    2844:	80 2f       	mov	r24, r16
    2846:	8f 7d       	andi	r24, 0xDF	; 223
    2848:	85 34       	cpi	r24, 0x45	; 69
    284a:	a1 f5       	brne	.+104    	; 0x28b4 <strtod+0x1b4>
    284c:	80 81       	ld	r24, Z
    284e:	8d 32       	cpi	r24, 0x2D	; 45
    2850:	11 f4       	brne	.+4      	; 0x2856 <strtod+0x156>
    2852:	10 61       	ori	r17, 0x10	; 16
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <strtod+0x162>
    2856:	8b 32       	cpi	r24, 0x2B	; 43
    2858:	21 f0       	breq	.+8      	; 0x2862 <strtod+0x162>
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	61 e0       	ldi	r22, 0x01	; 1
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	04 c0       	rjmp	.+8      	; 0x286a <strtod+0x16a>
    2862:	81 81       	ldd	r24, Z+1	; 0x01
    2864:	32 96       	adiw	r30, 0x02	; 2
    2866:	62 e0       	ldi	r22, 0x02	; 2
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	80 53       	subi	r24, 0x30	; 48
    286c:	8a 30       	cpi	r24, 0x0A	; 10
    286e:	18 f0       	brcs	.+6      	; 0x2876 <strtod+0x176>
    2870:	e6 1b       	sub	r30, r22
    2872:	f7 0b       	sbc	r31, r23
    2874:	1f c0       	rjmp	.+62     	; 0x28b4 <strtod+0x1b4>
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	60 38       	cpi	r22, 0x80	; 128
    287c:	9c e0       	ldi	r25, 0x0C	; 12
    287e:	79 07       	cpc	r23, r25
    2880:	5c f4       	brge	.+22     	; 0x2898 <strtod+0x198>
    2882:	db 01       	movw	r26, r22
    2884:	aa 0f       	add	r26, r26
    2886:	bb 1f       	adc	r27, r27
    2888:	aa 0f       	add	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	6a 0f       	add	r22, r26
    288e:	7b 1f       	adc	r23, r27
    2890:	66 0f       	add	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	68 0f       	add	r22, r24
    2896:	71 1d       	adc	r23, r1
    2898:	31 96       	adiw	r30, 0x01	; 1
    289a:	df 01       	movw	r26, r30
    289c:	11 97       	sbiw	r26, 0x01	; 1
    289e:	8c 91       	ld	r24, X
    28a0:	80 53       	subi	r24, 0x30	; 48
    28a2:	8a 30       	cpi	r24, 0x0A	; 10
    28a4:	50 f3       	brcs	.-44     	; 0x287a <strtod+0x17a>
    28a6:	14 ff       	sbrs	r17, 4
    28a8:	03 c0       	rjmp	.+6      	; 0x28b0 <strtod+0x1b0>
    28aa:	71 95       	neg	r23
    28ac:	61 95       	neg	r22
    28ae:	71 09       	sbc	r23, r1
    28b0:	c6 0f       	add	r28, r22
    28b2:	d7 1f       	adc	r29, r23
    28b4:	11 ff       	sbrs	r17, 1
    28b6:	08 c0       	rjmp	.+16     	; 0x28c8 <strtod+0x1c8>
    28b8:	c1 14       	cp	r12, r1
    28ba:	d1 04       	cpc	r13, r1
    28bc:	29 f0       	breq	.+10     	; 0x28c8 <strtod+0x1c8>
    28be:	cf 01       	movw	r24, r30
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f6 01       	movw	r30, r12
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
    28c8:	ca 01       	movw	r24, r20
    28ca:	b9 01       	movw	r22, r18
    28cc:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatunsisf>
    28d0:	21 2f       	mov	r18, r17
    28d2:	23 70       	andi	r18, 0x03	; 3
    28d4:	23 30       	cpi	r18, 0x03	; 3
    28d6:	19 f0       	breq	.+6      	; 0x28de <strtod+0x1de>
    28d8:	4b 01       	movw	r8, r22
    28da:	5c 01       	movw	r10, r24
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <strtod+0x1ea>
    28de:	4b 01       	movw	r8, r22
    28e0:	5c 01       	movw	r10, r24
    28e2:	b7 fa       	bst	r11, 7
    28e4:	b0 94       	com	r11
    28e6:	b7 f8       	bld	r11, 7
    28e8:	b0 94       	com	r11
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	a9 01       	movw	r20, r18
    28f0:	c5 01       	movw	r24, r10
    28f2:	b4 01       	movw	r22, r8
    28f4:	0e 94 9e 0c 	call	0x193c	; 0x193c <__cmpsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	09 f4       	brne	.+2      	; 0x28fe <strtod+0x1fe>
    28fc:	3e c0       	rjmp	.+124    	; 0x297a <strtod+0x27a>
    28fe:	d7 ff       	sbrs	r29, 7
    2900:	06 c0       	rjmp	.+12     	; 0x290e <strtod+0x20e>
    2902:	d1 95       	neg	r29
    2904:	c1 95       	neg	r28
    2906:	d1 09       	sbc	r29, r1
    2908:	05 ef       	ldi	r16, 0xF5	; 245
    290a:	10 e0       	ldi	r17, 0x00	; 0
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <strtod+0x212>
    290e:	0d e0       	ldi	r16, 0x0D	; 13
    2910:	11 e0       	ldi	r17, 0x01	; 1
    2912:	68 01       	movw	r12, r16
    2914:	f8 e1       	ldi	r31, 0x18	; 24
    2916:	cf 1a       	sub	r12, r31
    2918:	d1 08       	sbc	r13, r1
    291a:	90 e2       	ldi	r25, 0x20	; 32
    291c:	e9 2e       	mov	r14, r25
    291e:	f1 2c       	mov	r15, r1
    2920:	ce 15       	cp	r28, r14
    2922:	df 05       	cpc	r29, r15
    2924:	74 f0       	brlt	.+28     	; 0x2942 <strtod+0x242>
    2926:	f8 01       	movw	r30, r16
    2928:	25 91       	lpm	r18, Z+
    292a:	35 91       	lpm	r19, Z+
    292c:	45 91       	lpm	r20, Z+
    292e:	54 91       	lpm	r21, Z
    2930:	c5 01       	movw	r24, r10
    2932:	b4 01       	movw	r22, r8
    2934:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__mulsf3>
    2938:	4b 01       	movw	r8, r22
    293a:	5c 01       	movw	r10, r24
    293c:	ce 19       	sub	r28, r14
    293e:	df 09       	sbc	r29, r15
    2940:	ef cf       	rjmp	.-34     	; 0x2920 <strtod+0x220>
    2942:	04 50       	subi	r16, 0x04	; 4
    2944:	11 09       	sbc	r17, r1
    2946:	f5 94       	asr	r15
    2948:	e7 94       	ror	r14
    294a:	0c 15       	cp	r16, r12
    294c:	1d 05       	cpc	r17, r13
    294e:	41 f7       	brne	.-48     	; 0x2920 <strtod+0x220>
    2950:	8a 2d       	mov	r24, r10
    2952:	88 0f       	add	r24, r24
    2954:	8b 2d       	mov	r24, r11
    2956:	88 1f       	adc	r24, r24
    2958:	8f 3f       	cpi	r24, 0xFF	; 255
    295a:	49 f0       	breq	.+18     	; 0x296e <strtod+0x26e>
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	a9 01       	movw	r20, r18
    2962:	c5 01       	movw	r24, r10
    2964:	b4 01       	movw	r22, r8
    2966:	0e 94 9e 0c 	call	0x193c	; 0x193c <__cmpsf2>
    296a:	81 11       	cpse	r24, r1
    296c:	06 c0       	rjmp	.+12     	; 0x297a <strtod+0x27a>
    296e:	82 e2       	ldi	r24, 0x22	; 34
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	90 93 fc 00 	sts	0x00FC, r25	; 0x8000fc <errno+0x1>
    2976:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <errno>
    297a:	c5 01       	movw	r24, r10
    297c:	b4 01       	movw	r22, r8
    297e:	09 c0       	rjmp	.+18     	; 0x2992 <strtod+0x292>
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	80 e8       	ldi	r24, 0x80	; 128
    2986:	9f ef       	ldi	r25, 0xFF	; 255
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <strtod+0x292>
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	80 ec       	ldi	r24, 0xC0	; 192
    2990:	9f e7       	ldi	r25, 0x7F	; 127
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	ec e0       	ldi	r30, 0x0C	; 12
    2998:	0c 94 25 10 	jmp	0x204a	; 0x204a <__epilogue_restores__+0xc>

0000299c <isspace>:
    299c:	91 11       	cpse	r25, r1
    299e:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__ctype_isfalse>
    29a2:	80 32       	cpi	r24, 0x20	; 32
    29a4:	19 f0       	breq	.+6      	; 0x29ac <isspace+0x10>
    29a6:	89 50       	subi	r24, 0x09	; 9
    29a8:	85 50       	subi	r24, 0x05	; 5
    29aa:	c8 f7       	brcc	.-14     	; 0x299e <isspace+0x2>
    29ac:	08 95       	ret

000029ae <strncasecmp_P>:
    29ae:	fb 01       	movw	r30, r22
    29b0:	dc 01       	movw	r26, r24
    29b2:	41 50       	subi	r20, 0x01	; 1
    29b4:	50 40       	sbci	r21, 0x00	; 0
    29b6:	88 f0       	brcs	.+34     	; 0x29da <strncasecmp_P+0x2c>
    29b8:	8d 91       	ld	r24, X+
    29ba:	81 34       	cpi	r24, 0x41	; 65
    29bc:	1c f0       	brlt	.+6      	; 0x29c4 <strncasecmp_P+0x16>
    29be:	8b 35       	cpi	r24, 0x5B	; 91
    29c0:	0c f4       	brge	.+2      	; 0x29c4 <strncasecmp_P+0x16>
    29c2:	80 5e       	subi	r24, 0xE0	; 224
    29c4:	65 91       	lpm	r22, Z+
    29c6:	61 34       	cpi	r22, 0x41	; 65
    29c8:	1c f0       	brlt	.+6      	; 0x29d0 <strncasecmp_P+0x22>
    29ca:	6b 35       	cpi	r22, 0x5B	; 91
    29cc:	0c f4       	brge	.+2      	; 0x29d0 <strncasecmp_P+0x22>
    29ce:	60 5e       	subi	r22, 0xE0	; 224
    29d0:	86 1b       	sub	r24, r22
    29d2:	61 11       	cpse	r22, r1
    29d4:	71 f3       	breq	.-36     	; 0x29b2 <strncasecmp_P+0x4>
    29d6:	99 0b       	sbc	r25, r25
    29d8:	08 95       	ret
    29da:	88 1b       	sub	r24, r24
    29dc:	fc cf       	rjmp	.-8      	; 0x29d6 <strncasecmp_P+0x28>

000029de <strnlen_P>:
    29de:	fc 01       	movw	r30, r24
    29e0:	05 90       	lpm	r0, Z+
    29e2:	61 50       	subi	r22, 0x01	; 1
    29e4:	70 40       	sbci	r23, 0x00	; 0
    29e6:	01 10       	cpse	r0, r1
    29e8:	d8 f7       	brcc	.-10     	; 0x29e0 <strnlen_P+0x2>
    29ea:	80 95       	com	r24
    29ec:	90 95       	com	r25
    29ee:	8e 0f       	add	r24, r30
    29f0:	9f 1f       	adc	r25, r31
    29f2:	08 95       	ret

000029f4 <strnlen>:
    29f4:	fc 01       	movw	r30, r24
    29f6:	61 50       	subi	r22, 0x01	; 1
    29f8:	70 40       	sbci	r23, 0x00	; 0
    29fa:	01 90       	ld	r0, Z+
    29fc:	01 10       	cpse	r0, r1
    29fe:	d8 f7       	brcc	.-10     	; 0x29f6 <strnlen+0x2>
    2a00:	80 95       	com	r24
    2a02:	90 95       	com	r25
    2a04:	8e 0f       	add	r24, r30
    2a06:	9f 1f       	adc	r25, r31
    2a08:	08 95       	ret

00002a0a <fputc>:
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	fb 01       	movw	r30, r22
    2a14:	23 81       	ldd	r18, Z+3	; 0x03
    2a16:	21 fd       	sbrc	r18, 1
    2a18:	03 c0       	rjmp	.+6      	; 0x2a20 <fputc+0x16>
    2a1a:	8f ef       	ldi	r24, 0xFF	; 255
    2a1c:	9f ef       	ldi	r25, 0xFF	; 255
    2a1e:	2c c0       	rjmp	.+88     	; 0x2a78 <fputc+0x6e>
    2a20:	22 ff       	sbrs	r18, 2
    2a22:	16 c0       	rjmp	.+44     	; 0x2a50 <fputc+0x46>
    2a24:	46 81       	ldd	r20, Z+6	; 0x06
    2a26:	57 81       	ldd	r21, Z+7	; 0x07
    2a28:	24 81       	ldd	r18, Z+4	; 0x04
    2a2a:	35 81       	ldd	r19, Z+5	; 0x05
    2a2c:	42 17       	cp	r20, r18
    2a2e:	53 07       	cpc	r21, r19
    2a30:	44 f4       	brge	.+16     	; 0x2a42 <fputc+0x38>
    2a32:	a0 81       	ld	r26, Z
    2a34:	b1 81       	ldd	r27, Z+1	; 0x01
    2a36:	9d 01       	movw	r18, r26
    2a38:	2f 5f       	subi	r18, 0xFF	; 255
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	31 83       	std	Z+1, r19	; 0x01
    2a3e:	20 83       	st	Z, r18
    2a40:	8c 93       	st	X, r24
    2a42:	26 81       	ldd	r18, Z+6	; 0x06
    2a44:	37 81       	ldd	r19, Z+7	; 0x07
    2a46:	2f 5f       	subi	r18, 0xFF	; 255
    2a48:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4a:	37 83       	std	Z+7, r19	; 0x07
    2a4c:	26 83       	std	Z+6, r18	; 0x06
    2a4e:	14 c0       	rjmp	.+40     	; 0x2a78 <fputc+0x6e>
    2a50:	8b 01       	movw	r16, r22
    2a52:	ec 01       	movw	r28, r24
    2a54:	fb 01       	movw	r30, r22
    2a56:	00 84       	ldd	r0, Z+8	; 0x08
    2a58:	f1 85       	ldd	r31, Z+9	; 0x09
    2a5a:	e0 2d       	mov	r30, r0
    2a5c:	09 95       	icall
    2a5e:	89 2b       	or	r24, r25
    2a60:	e1 f6       	brne	.-72     	; 0x2a1a <fputc+0x10>
    2a62:	d8 01       	movw	r26, r16
    2a64:	16 96       	adiw	r26, 0x06	; 6
    2a66:	8d 91       	ld	r24, X+
    2a68:	9c 91       	ld	r25, X
    2a6a:	17 97       	sbiw	r26, 0x07	; 7
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	17 96       	adiw	r26, 0x07	; 7
    2a70:	9c 93       	st	X, r25
    2a72:	8e 93       	st	-X, r24
    2a74:	16 97       	sbiw	r26, 0x06	; 6
    2a76:	ce 01       	movw	r24, r28
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	08 95       	ret

00002a82 <__ultoa_invert>:
    2a82:	fa 01       	movw	r30, r20
    2a84:	aa 27       	eor	r26, r26
    2a86:	28 30       	cpi	r18, 0x08	; 8
    2a88:	51 f1       	breq	.+84     	; 0x2ade <__ultoa_invert+0x5c>
    2a8a:	20 31       	cpi	r18, 0x10	; 16
    2a8c:	81 f1       	breq	.+96     	; 0x2aee <__ultoa_invert+0x6c>
    2a8e:	e8 94       	clt
    2a90:	6f 93       	push	r22
    2a92:	6e 7f       	andi	r22, 0xFE	; 254
    2a94:	6e 5f       	subi	r22, 0xFE	; 254
    2a96:	7f 4f       	sbci	r23, 0xFF	; 255
    2a98:	8f 4f       	sbci	r24, 0xFF	; 255
    2a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9c:	af 4f       	sbci	r26, 0xFF	; 255
    2a9e:	b1 e0       	ldi	r27, 0x01	; 1
    2aa0:	3e d0       	rcall	.+124    	; 0x2b1e <__ultoa_invert+0x9c>
    2aa2:	b4 e0       	ldi	r27, 0x04	; 4
    2aa4:	3c d0       	rcall	.+120    	; 0x2b1e <__ultoa_invert+0x9c>
    2aa6:	67 0f       	add	r22, r23
    2aa8:	78 1f       	adc	r23, r24
    2aaa:	89 1f       	adc	r24, r25
    2aac:	9a 1f       	adc	r25, r26
    2aae:	a1 1d       	adc	r26, r1
    2ab0:	68 0f       	add	r22, r24
    2ab2:	79 1f       	adc	r23, r25
    2ab4:	8a 1f       	adc	r24, r26
    2ab6:	91 1d       	adc	r25, r1
    2ab8:	a1 1d       	adc	r26, r1
    2aba:	6a 0f       	add	r22, r26
    2abc:	71 1d       	adc	r23, r1
    2abe:	81 1d       	adc	r24, r1
    2ac0:	91 1d       	adc	r25, r1
    2ac2:	a1 1d       	adc	r26, r1
    2ac4:	20 d0       	rcall	.+64     	; 0x2b06 <__ultoa_invert+0x84>
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <__ultoa_invert+0x48>
    2ac8:	68 94       	set
    2aca:	3f 91       	pop	r19
    2acc:	2a e0       	ldi	r18, 0x0A	; 10
    2ace:	26 9f       	mul	r18, r22
    2ad0:	11 24       	eor	r1, r1
    2ad2:	30 19       	sub	r19, r0
    2ad4:	30 5d       	subi	r19, 0xD0	; 208
    2ad6:	31 93       	st	Z+, r19
    2ad8:	de f6       	brtc	.-74     	; 0x2a90 <__ultoa_invert+0xe>
    2ada:	cf 01       	movw	r24, r30
    2adc:	08 95       	ret
    2ade:	46 2f       	mov	r20, r22
    2ae0:	47 70       	andi	r20, 0x07	; 7
    2ae2:	40 5d       	subi	r20, 0xD0	; 208
    2ae4:	41 93       	st	Z+, r20
    2ae6:	b3 e0       	ldi	r27, 0x03	; 3
    2ae8:	0f d0       	rcall	.+30     	; 0x2b08 <__ultoa_invert+0x86>
    2aea:	c9 f7       	brne	.-14     	; 0x2ade <__ultoa_invert+0x5c>
    2aec:	f6 cf       	rjmp	.-20     	; 0x2ada <__ultoa_invert+0x58>
    2aee:	46 2f       	mov	r20, r22
    2af0:	4f 70       	andi	r20, 0x0F	; 15
    2af2:	40 5d       	subi	r20, 0xD0	; 208
    2af4:	4a 33       	cpi	r20, 0x3A	; 58
    2af6:	18 f0       	brcs	.+6      	; 0x2afe <__ultoa_invert+0x7c>
    2af8:	49 5d       	subi	r20, 0xD9	; 217
    2afa:	31 fd       	sbrc	r19, 1
    2afc:	40 52       	subi	r20, 0x20	; 32
    2afe:	41 93       	st	Z+, r20
    2b00:	02 d0       	rcall	.+4      	; 0x2b06 <__ultoa_invert+0x84>
    2b02:	a9 f7       	brne	.-22     	; 0x2aee <__ultoa_invert+0x6c>
    2b04:	ea cf       	rjmp	.-44     	; 0x2ada <__ultoa_invert+0x58>
    2b06:	b4 e0       	ldi	r27, 0x04	; 4
    2b08:	a6 95       	lsr	r26
    2b0a:	97 95       	ror	r25
    2b0c:	87 95       	ror	r24
    2b0e:	77 95       	ror	r23
    2b10:	67 95       	ror	r22
    2b12:	ba 95       	dec	r27
    2b14:	c9 f7       	brne	.-14     	; 0x2b08 <__ultoa_invert+0x86>
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	61 05       	cpc	r22, r1
    2b1a:	71 05       	cpc	r23, r1
    2b1c:	08 95       	ret
    2b1e:	9b 01       	movw	r18, r22
    2b20:	ac 01       	movw	r20, r24
    2b22:	0a 2e       	mov	r0, r26
    2b24:	06 94       	lsr	r0
    2b26:	57 95       	ror	r21
    2b28:	47 95       	ror	r20
    2b2a:	37 95       	ror	r19
    2b2c:	27 95       	ror	r18
    2b2e:	ba 95       	dec	r27
    2b30:	c9 f7       	brne	.-14     	; 0x2b24 <__ultoa_invert+0xa2>
    2b32:	62 0f       	add	r22, r18
    2b34:	73 1f       	adc	r23, r19
    2b36:	84 1f       	adc	r24, r20
    2b38:	95 1f       	adc	r25, r21
    2b3a:	a0 1d       	adc	r26, r0
    2b3c:	08 95       	ret

00002b3e <__ctype_isfalse>:
    2b3e:	99 27       	eor	r25, r25
    2b40:	88 27       	eor	r24, r24

00002b42 <__ctype_istrue>:
    2b42:	08 95       	ret

00002b44 <__muluhisi3>:
    2b44:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__umulhisi3>
    2b48:	a5 9f       	mul	r26, r21
    2b4a:	90 0d       	add	r25, r0
    2b4c:	b4 9f       	mul	r27, r20
    2b4e:	90 0d       	add	r25, r0
    2b50:	a4 9f       	mul	r26, r20
    2b52:	80 0d       	add	r24, r0
    2b54:	91 1d       	adc	r25, r1
    2b56:	11 24       	eor	r1, r1
    2b58:	08 95       	ret

00002b5a <__umulhisi3>:
    2b5a:	a2 9f       	mul	r26, r18
    2b5c:	b0 01       	movw	r22, r0
    2b5e:	b3 9f       	mul	r27, r19
    2b60:	c0 01       	movw	r24, r0
    2b62:	a3 9f       	mul	r26, r19
    2b64:	70 0d       	add	r23, r0
    2b66:	81 1d       	adc	r24, r1
    2b68:	11 24       	eor	r1, r1
    2b6a:	91 1d       	adc	r25, r1
    2b6c:	b2 9f       	mul	r27, r18
    2b6e:	70 0d       	add	r23, r0
    2b70:	81 1d       	adc	r24, r1
    2b72:	11 24       	eor	r1, r1
    2b74:	91 1d       	adc	r25, r1
    2b76:	08 95       	ret

00002b78 <_exit>:
    2b78:	f8 94       	cli

00002b7a <__stop_program>:
    2b7a:	ff cf       	rjmp	.-2      	; 0x2b7a <__stop_program>
