
APP_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000017fe  00001872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000126c  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b9a  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000368a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000037ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000393a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00005583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000646e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000721c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000737c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00007609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007dd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "SWITCH_CONFIG.h"
#include "SWITCH_INTERFACE.h"
#include <util/delay.h>
extern SW_t Switch_Arr_Stru_SwitchState [SW_NUM];
int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6d 97       	sbiw	r28, 0x1d	; 29
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	DIO_Enu_Init();
     b4a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DIO_Enu_Init>
	SWITCH_EnuInit(Switch_Arr_Stru_SwitchState);
     b4e:	88 e6       	ldi	r24, 0x68	; 104
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 24 0b 	call	0x1648	; 0x1648 <SWITCH_EnuInit>
	u8 pin_state;
	while(1)
	{
		SWITCH_EnuGetStates(&Switch_Arr_Stru_SwitchState[1], &pin_state);
     b56:	8b e6       	ldi	r24, 0x6B	; 107
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	9e 01       	movw	r18, r28
     b5c:	23 5e       	subi	r18, 0xE3	; 227
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	b9 01       	movw	r22, r18
     b62:	0e 94 99 0b 	call	0x1732	; 0x1732 <SWITCH_EnuGetStates>
		if (pin_state ==0)
     b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b68:	88 23       	and	r24, r24
     b6a:	09 f0       	breq	.+2      	; 0xb6e <main+0x38>
     b6c:	78 c0       	rjmp	.+240    	; 0xc5e <main+0x128>
		{
			DIO_Enu_SetPinValue(DIO_u8PORTA, DIO_u8PIN0 , DIO_u8HIGH);
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	41 e0       	ldi	r20, 0x01	; 1
     b74:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_Enu_SetPinValue>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	aa e7       	ldi	r26, 0x7A	; 122
     b7e:	b3 e4       	ldi	r27, 0x43	; 67
     b80:	89 8f       	std	Y+25, r24	; 0x19
     b82:	9a 8f       	std	Y+26, r25	; 0x1a
     b84:	ab 8f       	std	Y+27, r26	; 0x1b
     b86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b88:	69 8d       	ldd	r22, Y+25	; 0x19
     b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a ef       	ldi	r20, 0xFA	; 250
     b96:	54 e4       	ldi	r21, 0x44	; 68
     b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	8d 8b       	std	Y+21, r24	; 0x15
     ba2:	9e 8b       	std	Y+22, r25	; 0x16
     ba4:	af 8b       	std	Y+23, r26	; 0x17
     ba6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ba8:	6d 89       	ldd	r22, Y+21	; 0x15
     baa:	7e 89       	ldd	r23, Y+22	; 0x16
     bac:	8f 89       	ldd	r24, Y+23	; 0x17
     bae:	98 8d       	ldd	r25, Y+24	; 0x18
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <main+0x94>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9c 8b       	std	Y+20, r25	; 0x14
     bc6:	8b 8b       	std	Y+19, r24	; 0x13
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <main+0x112>
	else if (__tmp > 65535)
     bca:	6d 89       	ldd	r22, Y+21	; 0x15
     bcc:	7e 89       	ldd	r23, Y+22	; 0x16
     bce:	8f 89       	ldd	r24, Y+23	; 0x17
     bd0:	98 8d       	ldd	r25, Y+24	; 0x18
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	4f e7       	ldi	r20, 0x7F	; 127
     bd8:	57 e4       	ldi	r21, 0x47	; 71
     bda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bde:	18 16       	cp	r1, r24
     be0:	4c f5       	brge	.+82     	; 0xc34 <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be2:	69 8d       	ldd	r22, Y+25	; 0x19
     be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9c 8b       	std	Y+20, r25	; 0x14
     c08:	8b 8b       	std	Y+19, r24	; 0x13
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <main+0xf4>
     c0c:	88 ec       	ldi	r24, 0xC8	; 200
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9a 8b       	std	Y+18, r25	; 0x12
     c12:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c14:	89 89       	ldd	r24, Y+17	; 0x11
     c16:	9a 89       	ldd	r25, Y+18	; 0x12
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <main+0xe2>
     c1c:	9a 8b       	std	Y+18, r25	; 0x12
     c1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c20:	8b 89       	ldd	r24, Y+19	; 0x13
     c22:	9c 89       	ldd	r25, Y+20	; 0x14
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	9c 8b       	std	Y+20, r25	; 0x14
     c28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	9c 89       	ldd	r25, Y+20	; 0x14
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	69 f7       	brne	.-38     	; 0xc0c <main+0xd6>
     c32:	91 cf       	rjmp	.-222    	; 0xb56 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c34:	6d 89       	ldd	r22, Y+21	; 0x15
     c36:	7e 89       	ldd	r23, Y+22	; 0x16
     c38:	8f 89       	ldd	r24, Y+23	; 0x17
     c3a:	98 8d       	ldd	r25, Y+24	; 0x18
     c3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	9c 8b       	std	Y+20, r25	; 0x14
     c46:	8b 8b       	std	Y+19, r24	; 0x13
     c48:	8b 89       	ldd	r24, Y+19	; 0x13
     c4a:	9c 89       	ldd	r25, Y+20	; 0x14
     c4c:	98 8b       	std	Y+16, r25	; 0x10
     c4e:	8f 87       	std	Y+15, r24	; 0x0f
     c50:	8f 85       	ldd	r24, Y+15	; 0x0f
     c52:	98 89       	ldd	r25, Y+16	; 0x10
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <main+0x11e>
     c58:	98 8b       	std	Y+16, r25	; 0x10
     c5a:	8f 87       	std	Y+15, r24	; 0x0f
     c5c:	7c cf       	rjmp	.-264    	; 0xb56 <main+0x20>
			_delay_ms(250);
		}
		else
		{
			DIO_Enu_SetPinValue(DIO_u8PORTA, DIO_u8PIN0 , DIO_u8LOW);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_Enu_SetPinValue>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	aa e7       	ldi	r26, 0x7A	; 122
     c6e:	b3 e4       	ldi	r27, 0x43	; 67
     c70:	8b 87       	std	Y+11, r24	; 0x0b
     c72:	9c 87       	std	Y+12, r25	; 0x0c
     c74:	ad 87       	std	Y+13, r26	; 0x0d
     c76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c78:	6b 85       	ldd	r22, Y+11	; 0x0b
     c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a ef       	ldi	r20, 0xFA	; 250
     c86:	54 e4       	ldi	r21, 0x44	; 68
     c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	8f 83       	std	Y+7, r24	; 0x07
     c92:	98 87       	std	Y+8, r25	; 0x08
     c94:	a9 87       	std	Y+9, r26	; 0x09
     c96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c98:	6f 81       	ldd	r22, Y+7	; 0x07
     c9a:	78 85       	ldd	r23, Y+8	; 0x08
     c9c:	89 85       	ldd	r24, Y+9	; 0x09
     c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cac:	88 23       	and	r24, r24
     cae:	2c f4       	brge	.+10     	; 0xcba <main+0x184>
		__ticks = 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	8d 83       	std	Y+5, r24	; 0x05
     cb8:	3f c0       	rjmp	.+126    	; 0xd38 <main+0x202>
	else if (__tmp > 65535)
     cba:	6f 81       	ldd	r22, Y+7	; 0x07
     cbc:	78 85       	ldd	r23, Y+8	; 0x08
     cbe:	89 85       	ldd	r24, Y+9	; 0x09
     cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	3f ef       	ldi	r19, 0xFF	; 255
     cc6:	4f e7       	ldi	r20, 0x7F	; 127
     cc8:	57 e4       	ldi	r21, 0x47	; 71
     cca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cce:	18 16       	cp	r1, r24
     cd0:	4c f5       	brge	.+82     	; 0xd24 <main+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e2       	ldi	r20, 0x20	; 32
     ce0:	51 e4       	ldi	r21, 0x41	; 65
     ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	8d 83       	std	Y+5, r24	; 0x05
     cfa:	0f c0       	rjmp	.+30     	; 0xd1a <main+0x1e4>
     cfc:	88 ec       	ldi	r24, 0xC8	; 200
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9c 83       	std	Y+4, r25	; 0x04
     d02:	8b 83       	std	Y+3, r24	; 0x03
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <main+0x1d2>
     d0c:	9c 83       	std	Y+4, r25	; 0x04
     d0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d10:	8d 81       	ldd	r24, Y+5	; 0x05
     d12:	9e 81       	ldd	r25, Y+6	; 0x06
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	9e 83       	std	Y+6, r25	; 0x06
     d18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	69 f7       	brne	.-38     	; 0xcfc <main+0x1c6>
     d22:	19 cf       	rjmp	.-462    	; 0xb56 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	78 85       	ldd	r23, Y+8	; 0x08
     d28:	89 85       	ldd	r24, Y+9	; 0x09
     d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9e 83       	std	Y+6, r25	; 0x06
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <main+0x20e>
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	04 cf       	rjmp	.-504    	; 0xb56 <main+0x20>

00000d4e <DIO_Enu_Init>:

#include "DIO_PRIVATE.h"
#include "DIO_CONFIG.h"

ES_t DIO_Enu_Init(void)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	0f 92       	push	r0
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_EnuErrorState = ES_NOT_OK;
     d58:	19 82       	std	Y+1, r1	; 0x01

    DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     d5a:	ea e3       	ldi	r30, 0x3A	; 58
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	80 83       	st	Z, r24
    DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     d62:	e7 e3       	ldi	r30, 0x37	; 55
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	80 83       	st	Z, r24
    DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     d6a:	e4 e3       	ldi	r30, 0x34	; 52
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	80 83       	st	Z, r24
    DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     d72:	e1 e3       	ldi	r30, 0x31	; 49
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	80 83       	st	Z, r24

    PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
     d7a:	eb e3       	ldi	r30, 0x3B	; 59
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	10 82       	st	Z, r1
    PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
     d80:	e8 e3       	ldi	r30, 0x38	; 56
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	10 82       	st	Z, r1
    PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
     d86:	e5 e3       	ldi	r30, 0x35	; 53
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	10 82       	st	Z, r1
    PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
     d8c:	e2 e3       	ldi	r30, 0x32	; 50
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	10 82       	st	Z, r1

    Local_EnuErrorState = ES_OK;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01

    return Local_EnuErrorState;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
}
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <DIO_Enu_SetPortDirection>:

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <DIO_Enu_SetPortDirection+0x6>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <DIO_Enu_SetPortDirection+0x8>
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	8a 83       	std	Y+2, r24	; 0x02
     db0:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
     db2:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	a8 f5       	brcc	.+106    	; 0xe24 <DIO_Enu_SetPortDirection+0x84>
    {
        switch (Copy_u8PortID)
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	3d 83       	std	Y+5, r19	; 0x05
     dc2:	2c 83       	std	Y+4, r18	; 0x04
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	91 05       	cpc	r25, r1
     dcc:	d1 f0       	breq	.+52     	; 0xe02 <DIO_Enu_SetPortDirection+0x62>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	2c f4       	brge	.+10     	; 0xde2 <DIO_Enu_SetPortDirection+0x42>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	61 f0       	breq	.+24     	; 0xdf8 <DIO_Enu_SetPortDirection+0x58>
     de0:	1e c0       	rjmp	.+60     	; 0xe1e <DIO_Enu_SetPortDirection+0x7e>
     de2:	2c 81       	ldd	r18, Y+4	; 0x04
     de4:	3d 81       	ldd	r19, Y+5	; 0x05
     de6:	22 30       	cpi	r18, 0x02	; 2
     de8:	31 05       	cpc	r19, r1
     dea:	81 f0       	breq	.+32     	; 0xe0c <DIO_Enu_SetPortDirection+0x6c>
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	91 05       	cpc	r25, r1
     df4:	81 f0       	breq	.+32     	; 0xe16 <DIO_Enu_SetPortDirection+0x76>
     df6:	13 c0       	rjmp	.+38     	; 0xe1e <DIO_Enu_SetPortDirection+0x7e>
        {
        case DIO_PORTA:
            DDRA = Copy_u8Value;
     df8:	ea e3       	ldi	r30, 0x3A	; 58
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	80 83       	st	Z, r24
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
     e02:	e7 e3       	ldi	r30, 0x37	; 55
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	80 83       	st	Z, r24
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
     e0c:	e4 e3       	ldi	r30, 0x34	; 52
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	80 83       	st	Z, r24
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTD:
            DDRD = Copy_u8Value;
     e16:	e1 e3       	ldi	r30, 0x31	; 49
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_Enu_SetPortDirection+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_EnuErrorState;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <DIO_Enu_SetPortValue>:

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <DIO_Enu_SetPortValue+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_Enu_SetPortValue+0x8>
     e42:	0f 92       	push	r0
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
     e4c:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	a8 f5       	brcc	.+106    	; 0xebe <DIO_Enu_SetPortValue+0x84>
    {
        switch (Copy_u8PortID)
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3d 83       	std	Y+5, r19	; 0x05
     e5c:	2c 83       	std	Y+4, r18	; 0x04
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	91 05       	cpc	r25, r1
     e66:	d1 f0       	breq	.+52     	; 0xe9c <DIO_Enu_SetPortValue+0x62>
     e68:	2c 81       	ldd	r18, Y+4	; 0x04
     e6a:	3d 81       	ldd	r19, Y+5	; 0x05
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	2c f4       	brge	.+10     	; 0xe7c <DIO_Enu_SetPortValue+0x42>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	61 f0       	breq	.+24     	; 0xe92 <DIO_Enu_SetPortValue+0x58>
     e7a:	1e c0       	rjmp	.+60     	; 0xeb8 <DIO_Enu_SetPortValue+0x7e>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	81 f0       	breq	.+32     	; 0xea6 <DIO_Enu_SetPortValue+0x6c>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	91 05       	cpc	r25, r1
     e8e:	81 f0       	breq	.+32     	; 0xeb0 <DIO_Enu_SetPortValue+0x76>
     e90:	13 c0       	rjmp	.+38     	; 0xeb8 <DIO_Enu_SetPortValue+0x7e>
        {
        case DIO_PORTA:
            PORTA = Copy_u8Value;
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	80 83       	st	Z, r24
     e9a:	0e c0       	rjmp	.+28     	; 0xeb8 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
     e9c:	e8 e3       	ldi	r30, 0x38	; 56
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	80 83       	st	Z, r24
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
     ea6:	e5 e3       	ldi	r30, 0x35	; 53
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	80 83       	st	Z, r24
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTD:
            PORTD = Copy_u8Value;
     eb0:	e2 e3       	ldi	r30, 0x32	; 50
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_Enu_SetPortValue+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <DIO_Enu_SetPinDirection>:

ES_t DIO_Enu_SetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <DIO_Enu_SetPinDirection+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_Enu_SetPinDirection+0x8>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_Enu_SetPinDirection+0xa>
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	8a 83       	std	Y+2, r24	; 0x02
     ee4:	6b 83       	std	Y+3, r22	; 0x03
     ee6:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
     ee8:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8PortID <= DIO_PORTD &&
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	08 f0       	brcs	.+2      	; 0xef2 <DIO_Enu_SetPinDirection+0x1e>
     ef0:	d1 c0       	rjmp	.+418    	; 0x1094 <DIO_Enu_SetPinDirection+0x1c0>
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	88 30       	cpi	r24, 0x08	; 8
     ef6:	08 f0       	brcs	.+2      	; 0xefa <DIO_Enu_SetPinDirection+0x26>
     ef8:	cd c0       	rjmp	.+410    	; 0x1094 <DIO_Enu_SetPinDirection+0x1c0>
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	08 f0       	brcs	.+2      	; 0xf02 <DIO_Enu_SetPinDirection+0x2e>
     f00:	c9 c0       	rjmp	.+402    	; 0x1094 <DIO_Enu_SetPinDirection+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3e 83       	std	Y+6, r19	; 0x06
     f0a:	2d 83       	std	Y+5, r18	; 0x05
     f0c:	6d 81       	ldd	r22, Y+5	; 0x05
     f0e:	7e 81       	ldd	r23, Y+6	; 0x06
     f10:	61 30       	cpi	r22, 0x01	; 1
     f12:	71 05       	cpc	r23, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <DIO_Enu_SetPinDirection+0x44>
     f16:	41 c0       	rjmp	.+130    	; 0xf9a <DIO_Enu_SetPinDirection+0xc6>
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	91 05       	cpc	r25, r1
     f20:	34 f4       	brge	.+12     	; 0xf2e <DIO_Enu_SetPinDirection+0x5a>
     f22:	2d 81       	ldd	r18, Y+5	; 0x05
     f24:	3e 81       	ldd	r19, Y+6	; 0x06
     f26:	21 15       	cp	r18, r1
     f28:	31 05       	cpc	r19, r1
     f2a:	71 f0       	breq	.+28     	; 0xf48 <DIO_Enu_SetPinDirection+0x74>
     f2c:	b0 c0       	rjmp	.+352    	; 0x108e <DIO_Enu_SetPinDirection+0x1ba>
     f2e:	6d 81       	ldd	r22, Y+5	; 0x05
     f30:	7e 81       	ldd	r23, Y+6	; 0x06
     f32:	62 30       	cpi	r22, 0x02	; 2
     f34:	71 05       	cpc	r23, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <DIO_Enu_SetPinDirection+0x66>
     f38:	59 c0       	rjmp	.+178    	; 0xfec <DIO_Enu_SetPinDirection+0x118>
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <DIO_Enu_SetPinDirection+0x72>
     f44:	7c c0       	rjmp	.+248    	; 0x103e <DIO_Enu_SetPinDirection+0x16a>
     f46:	a3 c0       	rjmp	.+326    	; 0x108e <DIO_Enu_SetPinDirection+0x1ba>
        {
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     f48:	aa e3       	ldi	r26, 0x3A	; 58
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea e3       	ldi	r30, 0x3A	; 58
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_Enu_SetPinDirection+0x90>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	2a 95       	dec	r18
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_Enu_SetPinDirection+0x8c>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
            DDRA |= (Copy_u8Value << Copy_u8PinID);
     f6e:	aa e3       	ldi	r26, 0x3A	; 58
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e3       	ldi	r30, 0x3A	; 58
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	b9 01       	movw	r22, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_Enu_SetPinDirection+0xba>
     f8a:	66 0f       	add	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_Enu_SetPinDirection+0xb6>
     f92:	cb 01       	movw	r24, r22
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	7a c0       	rjmp	.+244    	; 0x108e <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     f9a:	a7 e3       	ldi	r26, 0x37	; 55
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e7 e3       	ldi	r30, 0x37	; 55
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_Enu_SetPinDirection+0xe2>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	2a 95       	dec	r18
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_Enu_SetPinDirection+0xde>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
            DDRB |= (Copy_u8Value << Copy_u8PinID);
     fc0:	a7 e3       	ldi	r26, 0x37	; 55
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	b9 01       	movw	r22, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_Enu_SetPinDirection+0x10c>
     fdc:	66 0f       	add	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	8a 95       	dec	r24
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_Enu_SetPinDirection+0x108>
     fe4:	cb 01       	movw	r24, r22
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	51 c0       	rjmp	.+162    	; 0x108e <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     fec:	a4 e3       	ldi	r26, 0x34	; 52
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e4 e3       	ldi	r30, 0x34	; 52
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_Enu_SetPinDirection+0x134>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	2a 95       	dec	r18
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_Enu_SetPinDirection+0x130>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
            DDRC |= (Copy_u8Value << Copy_u8PinID);
    1012:	a4 e3       	ldi	r26, 0x34	; 52
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e4 e3       	ldi	r30, 0x34	; 52
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	b9 01       	movw	r22, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_Enu_SetPinDirection+0x15e>
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	8a 95       	dec	r24
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_Enu_SetPinDirection+0x15a>
    1036:	cb 01       	movw	r24, r22
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	28 c0       	rjmp	.+80     	; 0x108e <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    103e:	a1 e3       	ldi	r26, 0x31	; 49
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e1 e3       	ldi	r30, 0x31	; 49
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_Enu_SetPinDirection+0x186>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	2a 95       	dec	r18
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_Enu_SetPinDirection+0x182>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
            DDRD |= (Copy_u8Value << Copy_u8PinID);
    1064:	a1 e3       	ldi	r26, 0x31	; 49
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e3       	ldi	r30, 0x31	; 49
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	b9 01       	movw	r22, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_Enu_SetPinDirection+0x1b0>
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_Enu_SetPinDirection+0x1ac>
    1088:	cb 01       	movw	r24, r22
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_Enu_SetPinDirection+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
}
    109a:	26 96       	adiw	r28, 0x06	; 6
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <DIO_Enu_SetPinValue>:

ES_t DIO_Enu_SetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_Enu_SetPinValue+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_Enu_SetPinValue+0x8>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_Enu_SetPinValue+0xa>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	6b 83       	std	Y+3, r22	; 0x03
    10be:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    10c0:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <DIO_Enu_SetPinValue+0x1e>
    10c8:	d1 c0       	rjmp	.+418    	; 0x126c <DIO_Enu_SetPinValue+0x1c0>
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 30       	cpi	r24, 0x08	; 8
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <DIO_Enu_SetPinValue+0x26>
    10d0:	cd c0       	rjmp	.+410    	; 0x126c <DIO_Enu_SetPinValue+0x1c0>
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	08 f0       	brcs	.+2      	; 0x10da <DIO_Enu_SetPinValue+0x2e>
    10d8:	c9 c0       	rjmp	.+402    	; 0x126c <DIO_Enu_SetPinValue+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3e 83       	std	Y+6, r19	; 0x06
    10e2:	2d 83       	std	Y+5, r18	; 0x05
    10e4:	6d 81       	ldd	r22, Y+5	; 0x05
    10e6:	7e 81       	ldd	r23, Y+6	; 0x06
    10e8:	61 30       	cpi	r22, 0x01	; 1
    10ea:	71 05       	cpc	r23, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <DIO_Enu_SetPinValue+0x44>
    10ee:	41 c0       	rjmp	.+130    	; 0x1172 <DIO_Enu_SetPinValue+0xc6>
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	91 05       	cpc	r25, r1
    10f8:	34 f4       	brge	.+12     	; 0x1106 <DIO_Enu_SetPinValue+0x5a>
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	21 15       	cp	r18, r1
    1100:	31 05       	cpc	r19, r1
    1102:	71 f0       	breq	.+28     	; 0x1120 <DIO_Enu_SetPinValue+0x74>
    1104:	b0 c0       	rjmp	.+352    	; 0x1266 <DIO_Enu_SetPinValue+0x1ba>
    1106:	6d 81       	ldd	r22, Y+5	; 0x05
    1108:	7e 81       	ldd	r23, Y+6	; 0x06
    110a:	62 30       	cpi	r22, 0x02	; 2
    110c:	71 05       	cpc	r23, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <DIO_Enu_SetPinValue+0x66>
    1110:	59 c0       	rjmp	.+178    	; 0x11c4 <DIO_Enu_SetPinValue+0x118>
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_Enu_SetPinValue+0x72>
    111c:	7c c0       	rjmp	.+248    	; 0x1216 <DIO_Enu_SetPinValue+0x16a>
    111e:	a3 c0       	rjmp	.+326    	; 0x1266 <DIO_Enu_SetPinValue+0x1ba>
        {
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1120:	ab e3       	ldi	r26, 0x3B	; 59
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	eb e3       	ldi	r30, 0x3B	; 59
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_Enu_SetPinValue+0x90>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	2a 95       	dec	r18
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_Enu_SetPinValue+0x8c>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
            PORTA |= (Copy_u8Value << Copy_u8PinID);
    1146:	ab e3       	ldi	r26, 0x3B	; 59
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	eb e3       	ldi	r30, 0x3B	; 59
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	b9 01       	movw	r22, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_Enu_SetPinValue+0xba>
    1162:	66 0f       	add	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_Enu_SetPinValue+0xb6>
    116a:	cb 01       	movw	r24, r22
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	7a c0       	rjmp	.+244    	; 0x1266 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1172:	a8 e3       	ldi	r26, 0x38	; 56
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_Enu_SetPinValue+0xe2>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	2a 95       	dec	r18
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_Enu_SetPinValue+0xde>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
            PORTB |= (Copy_u8Value << Copy_u8PinID);
    1198:	a8 e3       	ldi	r26, 0x38	; 56
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	b9 01       	movw	r22, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_Enu_SetPinValue+0x10c>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_Enu_SetPinValue+0x108>
    11bc:	cb 01       	movw	r24, r22
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	51 c0       	rjmp	.+162    	; 0x1266 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    11c4:	a5 e3       	ldi	r26, 0x35	; 53
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_Enu_SetPinValue+0x134>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	2a 95       	dec	r18
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_Enu_SetPinValue+0x130>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
            PORTC |= (Copy_u8Value << Copy_u8PinID);
    11ea:	a5 e3       	ldi	r26, 0x35	; 53
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e5 e3       	ldi	r30, 0x35	; 53
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	b9 01       	movw	r22, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_Enu_SetPinValue+0x15e>
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_Enu_SetPinValue+0x15a>
    120e:	cb 01       	movw	r24, r22
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	28 c0       	rjmp	.+80     	; 0x1266 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1216:	a2 e3       	ldi	r26, 0x32	; 50
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e2 e3       	ldi	r30, 0x32	; 50
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_Enu_SetPinValue+0x186>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	2a 95       	dec	r18
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_Enu_SetPinValue+0x182>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
            PORTD |= (Copy_u8Value << Copy_u8PinID);
    123c:	a2 e3       	ldi	r26, 0x32	; 50
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e2 e3       	ldi	r30, 0x32	; 50
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	b9 01       	movw	r22, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_Enu_SetPinValue+0x1b0>
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_Enu_SetPinValue+0x1ac>
    1260:	cb 01       	movw	r24, r22
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_Enu_SetPinValue+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
}
    1272:	26 96       	adiw	r28, 0x06	; 6
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <DIO_Enu_TogPortValue>:

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_Enu_TogPortValue+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <DIO_Enu_TogPortValue+0x8>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1292:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	08 f0       	brcs	.+2      	; 0x129c <DIO_Enu_TogPortValue+0x18>
    129a:	41 c0       	rjmp	.+130    	; 0x131e <DIO_Enu_TogPortValue+0x9a>
    {
        switch (Copy_u8PortID)
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3c 83       	std	Y+4, r19	; 0x04
    12a4:	2b 83       	std	Y+3, r18	; 0x03
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	e9 f0       	breq	.+58     	; 0x12ea <DIO_Enu_TogPortValue+0x66>
    12b0:	2b 81       	ldd	r18, Y+3	; 0x03
    12b2:	3c 81       	ldd	r19, Y+4	; 0x04
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <DIO_Enu_TogPortValue+0x40>
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	61 f0       	breq	.+24     	; 0x12da <DIO_Enu_TogPortValue+0x56>
    12c2:	2a c0       	rjmp	.+84     	; 0x1318 <DIO_Enu_TogPortValue+0x94>
    12c4:	2b 81       	ldd	r18, Y+3	; 0x03
    12c6:	3c 81       	ldd	r19, Y+4	; 0x04
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	b1 f0       	breq	.+44     	; 0x12fa <DIO_Enu_TogPortValue+0x76>
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	91 05       	cpc	r25, r1
    12d6:	c9 f0       	breq	.+50     	; 0x130a <DIO_Enu_TogPortValue+0x86>
    12d8:	1f c0       	rjmp	.+62     	; 0x1318 <DIO_Enu_TogPortValue+0x94>
        {
        case DIO_PORTA:
            PORTA = ~PORTA;
    12da:	ab e3       	ldi	r26, 0x3B	; 59
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	eb e3       	ldi	r30, 0x3B	; 59
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	80 95       	com	r24
    12e6:	8c 93       	st	X, r24
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
    12ea:	a8 e3       	ldi	r26, 0x38	; 56
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e8 e3       	ldi	r30, 0x38	; 56
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 95       	com	r24
    12f6:	8c 93       	st	X, r24
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
    12fa:	a5 e3       	ldi	r26, 0x35	; 53
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e3       	ldi	r30, 0x35	; 53
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 95       	com	r24
    1306:	8c 93       	st	X, r24
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTD:
            PORTD = ~PORTD;
    130a:	a2 e3       	ldi	r26, 0x32	; 50
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e2 e3       	ldi	r30, 0x32	; 50
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 95       	com	r24
    1316:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_Enu_TogPortValue+0x9e>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <DIO_Enu_TogPinValue>:

ES_t DIO_Enu_TogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <DIO_Enu_TogPinValue+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <DIO_Enu_TogPinValue+0x8>
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1344:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	08 f0       	brcs	.+2      	; 0x134e <DIO_Enu_TogPinValue+0x1c>
    134c:	75 c0       	rjmp	.+234    	; 0x1438 <DIO_Enu_TogPinValue+0x106>
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	08 f0       	brcs	.+2      	; 0x1356 <DIO_Enu_TogPinValue+0x24>
    1354:	71 c0       	rjmp	.+226    	; 0x1438 <DIO_Enu_TogPinValue+0x106>
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3d 83       	std	Y+5, r19	; 0x05
    135e:	2c 83       	std	Y+4, r18	; 0x04
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	49 f1       	breq	.+82     	; 0x13bc <DIO_Enu_TogPinValue+0x8a>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_Enu_TogPinValue+0x4c>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	61 f0       	breq	.+24     	; 0x1394 <DIO_Enu_TogPinValue+0x62>
    137c:	5a c0       	rjmp	.+180    	; 0x1432 <DIO_Enu_TogPinValue+0x100>
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	3d 81       	ldd	r19, Y+5	; 0x05
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	71 f1       	breq	.+92     	; 0x13e4 <DIO_Enu_TogPinValue+0xb2>
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	e9 f1       	breq	.+122    	; 0x140c <DIO_Enu_TogPinValue+0xda>
    1392:	4f c0       	rjmp	.+158    	; 0x1432 <DIO_Enu_TogPinValue+0x100>
        {
        case DIO_PORTA:
            TOG_BIT(PORTA,Copy_u8PinID);
    1394:	ab e3       	ldi	r26, 0x3B	; 59
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e3       	ldi	r30, 0x3B	; 59
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_Enu_TogPinValue+0x80>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_Enu_TogPinValue+0x7c>
    13b6:	84 27       	eor	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	3b c0       	rjmp	.+118    	; 0x1432 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB,Copy_u8PinID);
    13bc:	a8 e3       	ldi	r26, 0x38	; 56
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e8 e3       	ldi	r30, 0x38	; 56
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_Enu_TogPinValue+0xa8>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_Enu_TogPinValue+0xa4>
    13de:	84 27       	eor	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	27 c0       	rjmp	.+78     	; 0x1432 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC,Copy_u8PinID);
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_Enu_TogPinValue+0xd0>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_Enu_TogPinValue+0xcc>
    1406:	84 27       	eor	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	13 c0       	rjmp	.+38     	; 0x1432 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD,Copy_u8PinID);
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_Enu_TogPinValue+0xf8>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_Enu_TogPinValue+0xf4>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_Enu_TogPinValue+0x10a>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <DIO_Enu_GetPortValue>:

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <DIO_Enu_GetPortValue+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <DIO_Enu_GetPortValue+0x8>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <DIO_Enu_GetPortValue+0xa>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	8a 83       	std	Y+2, r24	; 0x02
    145e:	7c 83       	std	Y+4, r23	; 0x04
    1460:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1462:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	09 f4       	brne	.+2      	; 0x146e <DIO_Enu_GetPortValue+0x20>
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <DIO_Enu_GetPortValue+0xa6>
    {
        if (Copy_u8PortID <= DIO_PORTD)
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	e8 f5       	brcc	.+122    	; 0x14ee <DIO_Enu_GetPortValue+0xa0>
        {
            switch (Copy_u8PortID)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3e 83       	std	Y+6, r19	; 0x06
    147c:	2d 83       	std	Y+5, r18	; 0x05
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	e1 f0       	breq	.+56     	; 0x14c0 <DIO_Enu_GetPortValue+0x72>
    1488:	2d 81       	ldd	r18, Y+5	; 0x05
    148a:	3e 81       	ldd	r19, Y+6	; 0x06
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <DIO_Enu_GetPortValue+0x4e>
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 f0       	breq	.+24     	; 0x14b2 <DIO_Enu_GetPortValue+0x64>
    149a:	26 c0       	rjmp	.+76     	; 0x14e8 <DIO_Enu_GetPortValue+0x9a>
    149c:	2d 81       	ldd	r18, Y+5	; 0x05
    149e:	3e 81       	ldd	r19, Y+6	; 0x06
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <DIO_Enu_GetPortValue+0x80>
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	b1 f0       	breq	.+44     	; 0x14dc <DIO_Enu_GetPortValue+0x8e>
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <DIO_Enu_GetPortValue+0x9a>
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
    14b2:	e9 e3       	ldi	r30, 0x39	; 57
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ba:	fc 81       	ldd	r31, Y+4	; 0x04
    14bc:	80 83       	st	Z, r24
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
    14c0:	e6 e3       	ldi	r30, 0x36	; 54
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	eb 81       	ldd	r30, Y+3	; 0x03
    14c8:	fc 81       	ldd	r31, Y+4	; 0x04
    14ca:	80 83       	st	Z, r24
    14cc:	0d c0       	rjmp	.+26     	; 0x14e8 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    14ce:	e3 e3       	ldi	r30, 0x33	; 51
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	eb 81       	ldd	r30, Y+3	; 0x03
    14d6:	fc 81       	ldd	r31, Y+4	; 0x04
    14d8:	80 83       	st	Z, r24
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = PIND;
    14dc:	e0 e3       	ldi	r30, 0x30	; 48
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <DIO_Enu_GetPortValue+0xaa>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_Enu_GetPortValue+0xaa>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fa:	26 96       	adiw	r28, 0x06	; 6
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <DIO_Enu_GetPinValue>:

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	27 97       	sbiw	r28, 0x07	; 7
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	8a 83       	std	Y+2, r24	; 0x02
    1522:	6b 83       	std	Y+3, r22	; 0x03
    1524:	5d 83       	std	Y+5, r21	; 0x05
    1526:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1528:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	09 f4       	brne	.+2      	; 0x1534 <DIO_Enu_GetPinValue+0x28>
    1532:	7e c0       	rjmp	.+252    	; 0x1630 <DIO_Enu_GetPinValue+0x124>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	08 f0       	brcs	.+2      	; 0x153c <DIO_Enu_GetPinValue+0x30>
    153a:	77 c0       	rjmp	.+238    	; 0x162a <DIO_Enu_GetPinValue+0x11e>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	08 f0       	brcs	.+2      	; 0x1544 <DIO_Enu_GetPinValue+0x38>
    1542:	73 c0       	rjmp	.+230    	; 0x162a <DIO_Enu_GetPinValue+0x11e>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3f 83       	std	Y+7, r19	; 0x07
    154c:	2e 83       	std	Y+6, r18	; 0x06
    154e:	4e 81       	ldd	r20, Y+6	; 0x06
    1550:	5f 81       	ldd	r21, Y+7	; 0x07
    1552:	41 30       	cpi	r20, 0x01	; 1
    1554:	51 05       	cpc	r21, r1
    1556:	59 f1       	breq	.+86     	; 0x15ae <DIO_Enu_GetPinValue+0xa2>
    1558:	8e 81       	ldd	r24, Y+6	; 0x06
    155a:	9f 81       	ldd	r25, Y+7	; 0x07
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	34 f4       	brge	.+12     	; 0x156e <DIO_Enu_GetPinValue+0x62>
    1562:	2e 81       	ldd	r18, Y+6	; 0x06
    1564:	3f 81       	ldd	r19, Y+7	; 0x07
    1566:	21 15       	cp	r18, r1
    1568:	31 05       	cpc	r19, r1
    156a:	69 f0       	breq	.+26     	; 0x1586 <DIO_Enu_GetPinValue+0x7a>
    156c:	5b c0       	rjmp	.+182    	; 0x1624 <DIO_Enu_GetPinValue+0x118>
    156e:	4e 81       	ldd	r20, Y+6	; 0x06
    1570:	5f 81       	ldd	r21, Y+7	; 0x07
    1572:	42 30       	cpi	r20, 0x02	; 2
    1574:	51 05       	cpc	r21, r1
    1576:	79 f1       	breq	.+94     	; 0x15d6 <DIO_Enu_GetPinValue+0xca>
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <DIO_Enu_GetPinValue+0x78>
    1582:	3d c0       	rjmp	.+122    	; 0x15fe <DIO_Enu_GetPinValue+0xf2>
    1584:	4f c0       	rjmp	.+158    	; 0x1624 <DIO_Enu_GetPinValue+0x118>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
    1586:	e9 e3       	ldi	r30, 0x39	; 57
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a9 01       	movw	r20, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_Enu_GetPinValue+0x92>
    159a:	55 95       	asr	r21
    159c:	47 95       	ror	r20
    159e:	8a 95       	dec	r24
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_Enu_GetPinValue+0x8e>
    15a2:	ca 01       	movw	r24, r20
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	ec 81       	ldd	r30, Y+4	; 0x04
    15a8:	fd 81       	ldd	r31, Y+5	; 0x05
    15aa:	80 83       	st	Z, r24
    15ac:	3b c0       	rjmp	.+118    	; 0x1624 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    15ae:	e6 e3       	ldi	r30, 0x36	; 54
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a9 01       	movw	r20, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_Enu_GetPinValue+0xba>
    15c2:	55 95       	asr	r21
    15c4:	47 95       	ror	r20
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_Enu_GetPinValue+0xb6>
    15ca:	ca 01       	movw	r24, r20
    15cc:	81 70       	andi	r24, 0x01	; 1
    15ce:	ec 81       	ldd	r30, Y+4	; 0x04
    15d0:	fd 81       	ldd	r31, Y+5	; 0x05
    15d2:	80 83       	st	Z, r24
    15d4:	27 c0       	rjmp	.+78     	; 0x1624 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
    15d6:	e3 e3       	ldi	r30, 0x33	; 51
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a9 01       	movw	r20, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_Enu_GetPinValue+0xe2>
    15ea:	55 95       	asr	r21
    15ec:	47 95       	ror	r20
    15ee:	8a 95       	dec	r24
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_Enu_GetPinValue+0xde>
    15f2:	ca 01       	movw	r24, r20
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	ec 81       	ldd	r30, Y+4	; 0x04
    15f8:	fd 81       	ldd	r31, Y+5	; 0x05
    15fa:	80 83       	st	Z, r24
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    15fe:	e0 e3       	ldi	r30, 0x30	; 48
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_Enu_GetPinValue+0x10a>
    1612:	55 95       	asr	r21
    1614:	47 95       	ror	r20
    1616:	8a 95       	dec	r24
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_Enu_GetPinValue+0x106>
    161a:	ca 01       	movw	r24, r20
    161c:	81 70       	andi	r24, 0x01	; 1
    161e:	ec 81       	ldd	r30, Y+4	; 0x04
    1620:	fd 81       	ldd	r31, Y+5	; 0x05
    1622:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <DIO_Enu_GetPinValue+0x128>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_Enu_GetPinValue+0x128>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
}
    1636:	27 96       	adiw	r28, 0x07	; 7
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <SWITCH_EnuInit>:
#include "SWITCH_PRIVATE.h"
#include "SWITCH_CONFIG.h"
#include "DIO_INTERFACE.h"

ES_t SWITCH_EnuInit(SW_t *Copy_P_Arr_Str_Switchs)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <SWITCH_EnuInit+0x6>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <SWITCH_EnuInit+0x8>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1658:	1a 82       	std	Y+2, r1	; 0x02

    if (Copy_P_Arr_Str_Switchs != NULL)
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	09 f4       	brne	.+2      	; 0x1664 <SWITCH_EnuInit+0x1c>
    1662:	5d c0       	rjmp	.+186    	; 0x171e <SWITCH_EnuInit+0xd6>
    {
        u8 Local_u8Iterator = 0;
    1664:	19 82       	std	Y+1, r1	; 0x01
        for (Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    1666:	19 82       	std	Y+1, r1	; 0x01
    1668:	55 c0       	rjmp	.+170    	; 0x1714 <SWITCH_EnuInit+0xcc>
        {
            Local_EnuErrorState = DIO_Enu_SetPinDirection(Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PortID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PinID, DIO_u8INPUT);
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	c9 01       	movw	r24, r18
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	28 0f       	add	r18, r24
    1678:	39 1f       	adc	r19, r25
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	fc 01       	movw	r30, r24
    1680:	e2 0f       	add	r30, r18
    1682:	f3 1f       	adc	r31, r19
    1684:	40 81       	ld	r20, Z
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	c9 01       	movw	r24, r18
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	28 0f       	add	r18, r24
    1694:	39 1f       	adc	r19, r25
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	fc 01       	movw	r30, r24
    169c:	e2 0f       	add	r30, r18
    169e:	f3 1f       	adc	r31, r19
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	84 2f       	mov	r24, r20
    16a4:	69 2f       	mov	r22, r25
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_Enu_SetPinDirection>
    16ac:	8a 83       	std	Y+2, r24	; 0x02
            Local_EnuErrorState = DIO_Enu_SetPinValue(Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PortID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PinID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_Status);
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	c9 01       	movw	r24, r18
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	28 0f       	add	r18, r24
    16bc:	39 1f       	adc	r19, r25
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	fc 01       	movw	r30, r24
    16c4:	e2 0f       	add	r30, r18
    16c6:	f3 1f       	adc	r31, r19
    16c8:	50 81       	ld	r21, Z
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	c9 01       	movw	r24, r18
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	28 0f       	add	r18, r24
    16d8:	39 1f       	adc	r19, r25
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	41 81       	ldd	r20, Z+1	; 0x01
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	c9 01       	movw	r24, r18
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	28 0f       	add	r18, r24
    16f4:	39 1f       	adc	r19, r25
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	92 81       	ldd	r25, Z+2	; 0x02
    1702:	85 2f       	mov	r24, r21
    1704:	64 2f       	mov	r22, r20
    1706:	49 2f       	mov	r20, r25
    1708:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_Enu_SetPinValue>
    170c:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_P_Arr_Str_Switchs != NULL)
    {
        u8 Local_u8Iterator = 0;
        for (Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	08 f4       	brcc	.+2      	; 0x171c <SWITCH_EnuInit+0xd4>
    171a:	a7 cf       	rjmp	.-178    	; 0x166a <SWITCH_EnuInit+0x22>
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <SWITCH_EnuInit+0xda>
            Local_EnuErrorState = DIO_Enu_SetPinValue(Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PortID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PinID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_Status);
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_EnuErrorState;
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <SWITCH_EnuGetStates>:
ES_t SWITCH_EnuGetStates(SW_t *Copy_P_Arr_Str_Switch, u8 *Copy_pu8SwState)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <SWITCH_EnuGetStates+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <SWITCH_EnuGetStates+0x8>
    173a:	0f 92       	push	r0
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	9b 83       	std	Y+3, r25	; 0x03
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	7d 83       	std	Y+5, r23	; 0x05
    1746:	6c 83       	std	Y+4, r22	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1748:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_P_Arr_Str_Switch != NULL && Copy_pu8SwState != NULL)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	91 f0       	breq	.+36     	; 0x1776 <SWITCH_EnuGetStates+0x44>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	71 f0       	breq	.+28     	; 0x1776 <SWITCH_EnuGetStates+0x44>
    {
        Local_EnuErrorState = DIO_Enu_GetPinValue(Copy_P_Arr_Str_Switch->SW_PortID, Copy_P_Arr_Str_Switch->SW_PinID, Copy_pu8SwState);
    175a:	ea 81       	ldd	r30, Y+2	; 0x02
    175c:	fb 81       	ldd	r31, Y+3	; 0x03
    175e:	80 81       	ld	r24, Z
    1760:	ea 81       	ldd	r30, Y+2	; 0x02
    1762:	fb 81       	ldd	r31, Y+3	; 0x03
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	2c 81       	ldd	r18, Y+4	; 0x04
    1768:	3d 81       	ldd	r19, Y+5	; 0x05
    176a:	69 2f       	mov	r22, r25
    176c:	a9 01       	movw	r20, r18
    176e:	0e 94 86 0a 	call	0x150c	; 0x150c <DIO_Enu_GetPinValue>
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	02 c0       	rjmp	.+4      	; 0x177a <SWITCH_EnuGetStates+0x48>
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <__prologue_saves__>:
    178c:	2f 92       	push	r2
    178e:	3f 92       	push	r3
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ca 1b       	sub	r28, r26
    17b6:	db 0b       	sbc	r29, r27
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	09 94       	ijmp

000017c4 <__epilogue_restores__>:
    17c4:	2a 88       	ldd	r2, Y+18	; 0x12
    17c6:	39 88       	ldd	r3, Y+17	; 0x11
    17c8:	48 88       	ldd	r4, Y+16	; 0x10
    17ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    17cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    17ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    17d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d6:	b9 84       	ldd	r11, Y+9	; 0x09
    17d8:	c8 84       	ldd	r12, Y+8	; 0x08
    17da:	df 80       	ldd	r13, Y+7	; 0x07
    17dc:	ee 80       	ldd	r14, Y+6	; 0x06
    17de:	fd 80       	ldd	r15, Y+5	; 0x05
    17e0:	0c 81       	ldd	r16, Y+4	; 0x04
    17e2:	1b 81       	ldd	r17, Y+3	; 0x03
    17e4:	aa 81       	ldd	r26, Y+2	; 0x02
    17e6:	b9 81       	ldd	r27, Y+1	; 0x01
    17e8:	ce 0f       	add	r28, r30
    17ea:	d1 1d       	adc	r29, r1
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	ed 01       	movw	r28, r26
    17f8:	08 95       	ret

000017fa <_exit>:
    17fa:	f8 94       	cli

000017fc <__stop_program>:
    17fc:	ff cf       	rjmp	.-2      	; 0x17fc <__stop_program>
