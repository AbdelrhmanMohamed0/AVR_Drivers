
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000658  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000658  000006cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017d4  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000979  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d62  00000000  00000000  000029b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  00003718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c6  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000160d  00000000  00000000  00004076  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00005683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 15 03 	call	0x62a	; 0x62a <main>
  7a:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Enu_Init>:
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
  86:	87 bb       	out	0x17, r24	; 23
  88:	84 bb       	out	0x14, r24	; 20
  8a:	80 ef       	ldi	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
  8e:	1b ba       	out	0x1b, r1	; 27
  90:	18 ba       	out	0x18, r1	; 24
  92:	15 ba       	out	0x15, r1	; 21
  94:	8f e0       	ldi	r24, 0x0F	; 15
  96:	82 bb       	out	0x12, r24	; 18
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	08 95       	ret

0000009c <DIO_Enu_SetPinDirection>:
  9c:	84 30       	cpi	r24, 0x04	; 4
  9e:	08 f0       	brcs	.+2      	; 0xa2 <DIO_Enu_SetPinDirection+0x6>
  a0:	67 c0       	rjmp	.+206    	; 0x170 <DIO_Enu_SetPinDirection+0xd4>
  a2:	68 30       	cpi	r22, 0x08	; 8
  a4:	08 f0       	brcs	.+2      	; 0xa8 <DIO_Enu_SetPinDirection+0xc>
  a6:	66 c0       	rjmp	.+204    	; 0x174 <DIO_Enu_SetPinDirection+0xd8>
  a8:	42 30       	cpi	r20, 0x02	; 2
  aa:	08 f0       	brcs	.+2      	; 0xae <DIO_Enu_SetPinDirection+0x12>
  ac:	65 c0       	rjmp	.+202    	; 0x178 <DIO_Enu_SetPinDirection+0xdc>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	e9 f0       	breq	.+58     	; 0xec <DIO_Enu_SetPinDirection+0x50>
  b2:	30 f0       	brcs	.+12     	; 0xc0 <DIO_Enu_SetPinDirection+0x24>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	81 f1       	breq	.+96     	; 0x118 <DIO_Enu_SetPinDirection+0x7c>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <DIO_Enu_SetPinDirection+0x22>
  bc:	43 c0       	rjmp	.+134    	; 0x144 <DIO_Enu_SetPinDirection+0xa8>
  be:	5e c0       	rjmp	.+188    	; 0x17c <DIO_Enu_SetPinDirection+0xe0>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	06 2e       	mov	r0, r22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_Enu_SetPinDirection+0x30>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_Enu_SetPinDirection+0x2c>
  d0:	80 95       	com	r24
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	28 23       	and	r18, r24
  d6:	84 2f       	mov	r24, r20
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_Enu_SetPinDirection+0x44>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_Enu_SetPinDirection+0x40>
  e4:	82 2b       	or	r24, r18
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_Enu_SetPinDirection+0x5c>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_Enu_SetPinDirection+0x58>
  fc:	20 95       	com	r18
  fe:	87 b3       	in	r24, 0x17	; 23
 100:	28 23       	and	r18, r24
 102:	84 2f       	mov	r24, r20
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_Enu_SetPinDirection+0x70>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_Enu_SetPinDirection+0x6c>
 110:	82 2b       	or	r24, r18
 112:	87 bb       	out	0x17, r24	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	06 2e       	mov	r0, r22
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_Enu_SetPinDirection+0x88>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_Enu_SetPinDirection+0x84>
 128:	20 95       	com	r18
 12a:	84 b3       	in	r24, 0x14	; 20
 12c:	28 23       	and	r18, r24
 12e:	84 2f       	mov	r24, r20
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_Enu_SetPinDirection+0x9c>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_Enu_SetPinDirection+0x98>
 13c:	82 2b       	or	r24, r18
 13e:	84 bb       	out	0x14, r24	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	06 2e       	mov	r0, r22
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_Enu_SetPinDirection+0xb4>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_Enu_SetPinDirection+0xb0>
 154:	20 95       	com	r18
 156:	81 b3       	in	r24, 0x11	; 17
 158:	28 23       	and	r18, r24
 15a:	84 2f       	mov	r24, r20
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_Enu_SetPinDirection+0xc8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_Enu_SetPinDirection+0xc4>
 168:	82 2b       	or	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	08 95       	ret
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	08 95       	ret
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	08 95       	ret
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	08 95       	ret
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret

00000180 <DIO_Enu_SetPinValue>:
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	08 f0       	brcs	.+2      	; 0x186 <DIO_Enu_SetPinValue+0x6>
 184:	67 c0       	rjmp	.+206    	; 0x254 <DIO_Enu_SetPinValue+0xd4>
 186:	68 30       	cpi	r22, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_Enu_SetPinValue+0xc>
 18a:	66 c0       	rjmp	.+204    	; 0x258 <DIO_Enu_SetPinValue+0xd8>
 18c:	42 30       	cpi	r20, 0x02	; 2
 18e:	08 f0       	brcs	.+2      	; 0x192 <DIO_Enu_SetPinValue+0x12>
 190:	65 c0       	rjmp	.+202    	; 0x25c <DIO_Enu_SetPinValue+0xdc>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	e9 f0       	breq	.+58     	; 0x1d0 <DIO_Enu_SetPinValue+0x50>
 196:	30 f0       	brcs	.+12     	; 0x1a4 <DIO_Enu_SetPinValue+0x24>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	81 f1       	breq	.+96     	; 0x1fc <DIO_Enu_SetPinValue+0x7c>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_Enu_SetPinValue+0x22>
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <DIO_Enu_SetPinValue+0xa8>
 1a2:	5e c0       	rjmp	.+188    	; 0x260 <DIO_Enu_SetPinValue+0xe0>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	06 2e       	mov	r0, r22
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_Enu_SetPinValue+0x30>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_Enu_SetPinValue+0x2c>
 1b4:	80 95       	com	r24
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	28 23       	and	r18, r24
 1ba:	84 2f       	mov	r24, r20
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_Enu_SetPinValue+0x44>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_Enu_SetPinValue+0x40>
 1c8:	82 2b       	or	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	08 95       	ret
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	06 2e       	mov	r0, r22
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_Enu_SetPinValue+0x5c>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_Enu_SetPinValue+0x58>
 1e0:	20 95       	com	r18
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	28 23       	and	r18, r24
 1e6:	84 2f       	mov	r24, r20
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_Enu_SetPinValue+0x70>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_Enu_SetPinValue+0x6c>
 1f4:	82 2b       	or	r24, r18
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	06 2e       	mov	r0, r22
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_Enu_SetPinValue+0x88>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_Enu_SetPinValue+0x84>
 20c:	20 95       	com	r18
 20e:	85 b3       	in	r24, 0x15	; 21
 210:	28 23       	and	r18, r24
 212:	84 2f       	mov	r24, r20
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_Enu_SetPinValue+0x9c>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_Enu_SetPinValue+0x98>
 220:	82 2b       	or	r24, r18
 222:	85 bb       	out	0x15, r24	; 21
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	06 2e       	mov	r0, r22
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_Enu_SetPinValue+0xb4>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_Enu_SetPinValue+0xb0>
 238:	20 95       	com	r18
 23a:	82 b3       	in	r24, 0x12	; 18
 23c:	28 23       	and	r18, r24
 23e:	84 2f       	mov	r24, r20
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_Enu_SetPinValue+0xc8>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_Enu_SetPinValue+0xc4>
 24c:	82 2b       	or	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	08 95       	ret
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	08 95       	ret
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	08 95       	ret
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	08 95       	ret
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret

00000264 <DIO_Enu_GetPinValue>:

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
 264:	41 15       	cp	r20, r1
 266:	51 05       	cpc	r21, r1
 268:	e1 f1       	breq	.+120    	; 0x2e2 <DIO_Enu_GetPinValue+0x7e>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	e0 f5       	brcc	.+120    	; 0x2e6 <DIO_Enu_GetPinValue+0x82>
 26e:	68 30       	cpi	r22, 0x08	; 8
 270:	e0 f5       	brcc	.+120    	; 0x2ea <DIO_Enu_GetPinValue+0x86>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 f0       	breq	.+36     	; 0x29a <DIO_Enu_GetPinValue+0x36>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_Enu_GetPinValue+0x1e>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	d9 f0       	breq	.+54     	; 0x2b2 <DIO_Enu_GetPinValue+0x4e>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	29 f1       	breq	.+74     	; 0x2ca <DIO_Enu_GetPinValue+0x66>
 280:	36 c0       	rjmp	.+108    	; 0x2ee <DIO_Enu_GetPinValue+0x8a>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
 282:	89 b3       	in	r24, 0x19	; 25
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_Enu_GetPinValue+0x28>
 288:	95 95       	asr	r25
 28a:	87 95       	ror	r24
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_Enu_GetPinValue+0x24>
 290:	81 70       	andi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
 296:	81 e0       	ldi	r24, 0x01	; 1
        {
            switch (Copy_u8PortID)
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
 298:	08 95       	ret
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
 29a:	86 b3       	in	r24, 0x16	; 22
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_Enu_GetPinValue+0x40>
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_Enu_GetPinValue+0x3c>
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	fa 01       	movw	r30, r20
 2ac:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
 2b0:	08 95       	ret
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
 2b2:	83 b3       	in	r24, 0x13	; 19
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_Enu_GetPinValue+0x58>
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_Enu_GetPinValue+0x54>
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	fa 01       	movw	r30, r20
 2c4:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
 2c8:	08 95       	ret
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
 2ca:	80 b3       	in	r24, 0x10	; 16
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_Enu_GetPinValue+0x70>
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_Enu_GetPinValue+0x6c>
 2d8:	81 70       	andi	r24, 0x01	; 1
 2da:	fa 01       	movw	r30, r20
 2dc:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
 2de:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
 2e0:	08 95       	ret
            Local_EnuErrorState = ES_OUT_OF_RANGE;
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	08 95       	ret
            }
            Local_EnuErrorState = ES_OK;
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	08 95       	ret
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	08 95       	ret
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
 2f0:	08 95       	ret

000002f2 <DIO_Enu_WriteHighNibbles>:
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	10 f5       	brcc	.+68     	; 0x33a <DIO_Enu_WriteHighNibbles+0x48>
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
 2f6:	62 95       	swap	r22
 2f8:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PortID)
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	61 f0       	breq	.+24     	; 0x316 <DIO_Enu_WriteHighNibbles+0x24>
 2fe:	28 f0       	brcs	.+10     	; 0x30a <DIO_Enu_WriteHighNibbles+0x18>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	79 f0       	breq	.+30     	; 0x322 <DIO_Enu_WriteHighNibbles+0x30>
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	99 f0       	breq	.+38     	; 0x32e <DIO_Enu_WriteHighNibbles+0x3c>
 308:	1a c0       	rjmp	.+52     	; 0x33e <DIO_Enu_WriteHighNibbles+0x4c>
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
 30a:	8b b3       	in	r24, 0x1b	; 27
 30c:	8f 70       	andi	r24, 0x0F	; 15
			PORTA |=Copy_u8Value;			
 30e:	68 2b       	or	r22, r24
 310:	6b bb       	out	0x1b, r22	; 27
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 312:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8PortID)
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
			PORTA |=Copy_u8Value;			
			break ;
 314:	08 95       	ret
		case DIO_PORTB:
			PORTB &=0x0f;                 
 316:	88 b3       	in	r24, 0x18	; 24
 318:	8f 70       	andi	r24, 0x0F	; 15
			PORTB |=Copy_u8Value;
 31a:	68 2b       	or	r22, r24
 31c:	68 bb       	out	0x18, r22	; 24
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 31e:	81 e0       	ldi	r24, 0x01	; 1
			PORTA |=Copy_u8Value;			
			break ;
		case DIO_PORTB:
			PORTB &=0x0f;                 
			PORTB |=Copy_u8Value;
			break ;
 320:	08 95       	ret
		case DIO_PORTC :
			PORTC &=0x0f;                 
 322:	85 b3       	in	r24, 0x15	; 21
 324:	8f 70       	andi	r24, 0x0F	; 15
			PORTC |=Copy_u8Value;
 326:	68 2b       	or	r22, r24
 328:	65 bb       	out	0x15, r22	; 21
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 32a:	81 e0       	ldi	r24, 0x01	; 1
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
			PORTC |=Copy_u8Value;
			break ;
 32c:	08 95       	ret
		case DIO_PORTD:
			PORTD &=0x0f;                 
 32e:	82 b3       	in	r24, 0x12	; 18
 330:	8f 70       	andi	r24, 0x0F	; 15
			PORTD |=Copy_u8Value;
 332:	68 2b       	or	r22, r24
 334:	62 bb       	out	0x12, r22	; 18
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 336:	81 e0       	ldi	r24, 0x01	; 1
			PORTC |=Copy_u8Value;
			break ;
		case DIO_PORTD:
			PORTD &=0x0f;                 
			PORTD |=Copy_u8Value;
			break ;
 338:	08 95       	ret
        }
        Local_EnuErrorState = ES_OK;
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	08 95       	ret
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 33e:	81 e0       	ldi	r24, 0x01	; 1
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

	return Local_EnuErrorState ;

}
 340:	08 95       	ret

00000342 <KPD_enu_Init>:
{
	ES_t Local_EnuErrorState = ES_NOT_OK;

	/*This code equivalent to connect pull up for the pins of the rows */

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R0, DIO_u8INPUT);
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R1, DIO_u8INPUT);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R2, DIO_u8INPUT);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R3, DIO_u8INPUT);
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	63 e0       	ldi	r22, 0x03	; 3
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_R0, DIO_u8HIGH);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R1, DIO_u8HIGH);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R2, DIO_u8HIGH);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R3, DIO_u8HIGH);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>

	/*connect the pins of the columns as output pins (HIGH)*/

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C0, DIO_u8OUTPUT);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	64 e0       	ldi	r22, 0x04	; 4
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C1, DIO_u8OUTPUT);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	65 e0       	ldi	r22, 0x05	; 5
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C2, DIO_u8OUTPUT);
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	66 e0       	ldi	r22, 0x06	; 6
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C3, DIO_u8OUTPUT);
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	67 e0       	ldi	r22, 0x07	; 7
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_C0, DIO_u8HIGH);
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	64 e0       	ldi	r22, 0x04	; 4
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C1, DIO_u8HIGH);
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	65 e0       	ldi	r22, 0x05	; 5
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C2, DIO_u8HIGH);
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	66 e0       	ldi	r22, 0x06	; 6
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C3, DIO_u8HIGH);
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	67 e0       	ldi	r22, 0x07	; 7
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>

	Local_EnuErrorState = ES_OK;

	return Local_EnuErrorState;
}
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	08 95       	ret

000003e6 <KPD_enu_GetPressed>:

ES_t KPD_enu_GetPressed(u8 *Copy_pu8Value)
{
 3e6:	af 92       	push	r10
 3e8:	bf 92       	push	r11
 3ea:	cf 92       	push	r12
 3ec:	df 92       	push	r13
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	1f 92       	push	r1
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	5c 01       	movw	r10, r24
	ES_t Local_EnuErrorState = ES_NOT_OK;
	u8 LOC_u8PinState;
	u8 LOC_u8ColumnIndex, LOC_u8RowIndex;
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
	static u8 LOC_u8KPDRowArr[ROWS_NUM] = {KPD_R0, KPD_R1, KPD_R2, KPD_R3};
	*Copy_pu8Value = NOTPRESSED;
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	f5 01       	movw	r30, r10
 406:	80 83       	st	Z, r24
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
 408:	00 e0       	ldi	r16, 0x00	; 0
 40a:	43 c0       	rjmp	.+134    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
 40c:	c0 2e       	mov	r12, r16
 40e:	d1 2c       	mov	r13, r1
 410:	f6 01       	movw	r30, r12
 412:	ec 59       	subi	r30, 0x9C	; 156
 414:	ff 4f       	sbci	r31, 0xFF	; 255
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	60 81       	ld	r22, Z
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
 420:	10 e0       	ldi	r17, 0x00	; 0
 422:	2c c0       	rjmp	.+88     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
 424:	e1 2e       	mov	r14, r17
 426:	f1 2c       	mov	r15, r1
 428:	f7 01       	movw	r30, r14
 42a:	e0 5a       	subi	r30, 0xA0	; 160
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	ae 01       	movw	r20, r28
 430:	4f 5f       	subi	r20, 0xFF	; 255
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	60 81       	ld	r22, Z
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 32 01 	call	0x264	; 0x264 <DIO_Enu_GetPinValue>
			if (LOC_u8PinState == DIO_u8LOW)
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	81 11       	cpse	r24, r1
 440:	1c c0       	rjmp	.+56     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
 442:	c7 01       	movw	r24, r14
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	88 59       	subi	r24, 0x98	; 152
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	fc 01       	movw	r30, r24
 452:	ec 0d       	add	r30, r12
 454:	fd 1d       	adc	r31, r13
 456:	80 81       	ld	r24, Z
 458:	f5 01       	movw	r30, r10
 45a:	80 83       	st	Z, r24
				while (LOC_u8PinState == DIO_u8LOW)
 45c:	0a c0       	rjmp	.+20     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
				{
					DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
 45e:	ae 01       	movw	r20, r28
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	f7 01       	movw	r30, r14
 466:	e0 5a       	subi	r30, 0xA0	; 160
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	60 81       	ld	r22, Z
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	0e 94 32 01 	call	0x264	; 0x264 <DIO_Enu_GetPinValue>
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
			if (LOC_u8PinState == DIO_u8LOW)
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
				while (LOC_u8PinState == DIO_u8LOW)
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 23       	and	r24, r24
 476:	99 f3       	breq	.-26     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 478:	0f c0       	rjmp	.+30     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
	static u8 LOC_u8KPDRowArr[ROWS_NUM] = {KPD_R0, KPD_R1, KPD_R2, KPD_R3};
	*Copy_pu8Value = NOTPRESSED;
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
 47a:	1f 5f       	subi	r17, 0xFF	; 255
 47c:	14 30       	cpi	r17, 0x04	; 4
 47e:	90 f2       	brcs	.-92     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				}
				Local_EnuErrorState = ES_OK;
				return Local_EnuErrorState;
			}
		}
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
 480:	f6 01       	movw	r30, r12
 482:	ec 59       	subi	r30, 0x9C	; 156
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	60 81       	ld	r22, Z
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
	u8 LOC_u8PinState;
	u8 LOC_u8ColumnIndex, LOC_u8RowIndex;
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
	static u8 LOC_u8KPDRowArr[ROWS_NUM] = {KPD_R0, KPD_R1, KPD_R2, KPD_R3};
	*Copy_pu8Value = NOTPRESSED;
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
 490:	0f 5f       	subi	r16, 0xFF	; 255
 492:	04 30       	cpi	r16, 0x04	; 4
 494:	08 f4       	brcc	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 496:	ba cf       	rjmp	.-140    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		}
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
	}
	Local_EnuErrorState = ES_OK;
	return Local_EnuErrorState;
}
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0f 90       	pop	r0
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	df 90       	pop	r13
 4aa:	cf 90       	pop	r12
 4ac:	bf 90       	pop	r11
 4ae:	af 90       	pop	r10
 4b0:	08 95       	ret

000004b2 <LCD_voidSendFallingEdge>:
        LCD_enuSendData(LOC_u8Iterator);
    }
    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
 4bc:	8f ec       	ldi	r24, 0xCF	; 207
 4be:	97 e0       	ldi	r25, 0x07	; 7
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <LCD_voidSendFallingEdge+0xe>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCD_voidSendFallingEdge+0x14>
 4c6:	00 00       	nop
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
 4d2:	8f ec       	ldi	r24, 0xCF	; 207
 4d4:	97 e0       	ldi	r25, 0x07	; 7
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCD_voidSendFallingEdge+0x24>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCD_voidSendFallingEdge+0x2a>
 4dc:	00 00       	nop
 4de:	08 95       	ret

000004e0 <LCD_enuSendCommand>:
 4e0:	cf 93       	push	r28
 4e2:	c8 2f       	mov	r28, r24
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
 4f8:	6c 2f       	mov	r22, r28
 4fa:	62 95       	swap	r22
 4fc:	6f 70       	andi	r22, 0x0F	; 15
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_Enu_WriteHighNibbles>
 504:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_voidSendFallingEdge>
 508:	6c 2f       	mov	r22, r28
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_Enu_WriteHighNibbles>
 510:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_voidSendFallingEdge>
 514:	8f ec       	ldi	r24, 0xCF	; 207
 516:	97 e0       	ldi	r25, 0x07	; 7
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_enuSendCommand+0x38>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_enuSendCommand+0x3e>
 51e:	00 00       	nop
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <LCD_enuSendData>:
 526:	cf 93       	push	r28
 528:	c8 2f       	mov	r28, r24
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_Enu_SetPinValue>
 53e:	6c 2f       	mov	r22, r28
 540:	62 95       	swap	r22
 542:	6f 70       	andi	r22, 0x0F	; 15
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_Enu_WriteHighNibbles>
 54a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_voidSendFallingEdge>
 54e:	6c 2f       	mov	r22, r28
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_Enu_WriteHighNibbles>
 556:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_voidSendFallingEdge>
 55a:	8f ec       	ldi	r24, 0xCF	; 207
 55c:	97 e0       	ldi	r25, 0x07	; 7
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <LCD_enuSendData+0x38>
 562:	00 c0       	rjmp	.+0      	; 0x564 <LCD_enuSendData+0x3e>
 564:	00 00       	nop
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <LCD_enuClearScreen>:

ES_t LCD_enuClearScreen(void)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;
    LCD_enuSendCommand(lcd_Clear);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	8f e9       	ldi	r24, 0x9F	; 159
 574:	9f e0       	ldi	r25, 0x0F	; 15
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCD_enuClearScreen+0xa>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <LCD_enuClearScreen+0x10>
 57c:	00 00       	nop
    _delay_ms(2); // wait more than 1.53 ms

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	08 95       	ret

00000582 <LCD_enuInit>:
 582:	2f e7       	ldi	r18, 0x7F	; 127
 584:	88 e3       	ldi	r24, 0x38	; 56
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <LCD_enuInit+0x6>
 590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_enuInit+0x10>
 592:	00 00       	nop

#elif LCD_MODE == 4

    // 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
    _delay_ms(50);
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN4, DIO_u8OUTPUT);
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	64 e0       	ldi	r22, 0x04	; 4
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN5, DIO_u8OUTPUT);
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	65 e0       	ldi	r22, 0x05	; 5
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN6, DIO_u8OUTPUT);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	66 e0       	ldi	r22, 0x06	; 6
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN7, DIO_u8OUTPUT);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	67 e0       	ldi	r22, 0x07	; 7
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RS, DIO_u8OUTPUT);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RW, DIO_u8OUTPUT);
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_EN, DIO_u8OUTPUT);
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	62 e0       	ldi	r22, 0x02	; 2
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_Enu_SetPinDirection>

    /*return home*/
    LCD_enuSendCommand(lcd_Home);
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuSendCommand>
 5e0:	8f e5       	ldi	r24, 0x5F	; 95
 5e2:	9a ee       	ldi	r25, 0xEA	; 234
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <LCD_enuInit+0x62>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <LCD_enuInit+0x68>
 5ea:	00 00       	nop
    _delay_ms(30);

    /*FUNCTION SET Command*/
    LCD_enuSendCommand(FOUR_BITS); // 4 Bit Mode
 5ec:	88 e2       	ldi	r24, 0x28	; 40
 5ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuSendCommand>
 5f2:	8f ec       	ldi	r24, 0xCF	; 207
 5f4:	97 e0       	ldi	r25, 0x07	; 7
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <LCD_enuInit+0x74>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <LCD_enuInit+0x7a>
 5fc:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY & Cursor (ON / OFF) Control */
    LCD_enuSendCommand(lcd_DisplayOn_CursorOff);
 5fe:	8c e0       	ldi	r24, 0x0C	; 12
 600:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuSendCommand>
 604:	8f ec       	ldi	r24, 0xCF	; 207
 606:	97 e0       	ldi	r25, 0x07	; 7
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <LCD_enuInit+0x86>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <LCD_enuInit+0x8c>
 60e:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY CLEAR */
    LCD_enuClearScreen();
 610:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_enuClearScreen>

    /* ENTRY MODE  Set*/
    LCD_enuSendCommand(lcd_EntryMode);
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuSendCommand>
 61a:	8f ec       	ldi	r24, 0xCF	; 207
 61c:	97 e0       	ldi	r25, 0x07	; 7
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <LCD_enuInit+0x9c>
 622:	00 c0       	rjmp	.+0      	; 0x624 <LCD_enuInit+0xa2>
 624:	00 00       	nop
#endif

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	08 95       	ret

0000062a <main>:
#include "LCD_INTERFACE.h"
#include "KEYPAD_INTERFACE.h"
#include <util/delay.h>

int main(void)
{
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	1f 92       	push	r1
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
	DIO_Enu_Init();
 634:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Enu_Init>
	LCD_enuInit();
 638:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_enuInit>
	KPD_enu_Init();
 63c:	0e 94 a1 01 	call	0x342	; 0x342 <KPD_enu_Init>
u8 pressed_key;

	while(1){
		do{
		KPD_enu_GetPressed(&pressed_key);
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <KPD_enu_GetPressed>
		}while(pressed_key==0xff);
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	8f 3f       	cpi	r24, 0xFF	; 255
 64c:	c9 f3       	breq	.-14     	; 0x640 <main+0x16>
		LCD_enuSendData(pressed_key);
 64e:	0e 94 93 02 	call	0x526	; 0x526 <LCD_enuSendData>
	}
 652:	f6 cf       	rjmp	.-20     	; 0x640 <main+0x16>

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
