
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003f2  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbd  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  000015c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbe  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00002af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067c  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f9c  00000000  00000000  000033d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_1>
   8:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_2>
   c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 01 	call	0x3be	; 0x3be <main>
  8a:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Enu_Init>:
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
  96:	9b ef       	ldi	r25, 0xFB	; 251
  98:	97 bb       	out	0x17, r25	; 23
  9a:	84 bb       	out	0x14, r24	; 20
  9c:	80 ef       	ldi	r24, 0xF0	; 240
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	1b ba       	out	0x1b, r1	; 27
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	15 ba       	out	0x15, r1	; 21
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	08 95       	ret

000000b0 <DIO_Enu_TogPinValue>:

ES_t DIO_Enu_TogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD &&
  b0:	84 30       	cpi	r24, 0x04	; 4
  b2:	d0 f5       	brcc	.+116    	; 0x128 <DIO_Enu_TogPinValue+0x78>
  b4:	68 30       	cpi	r22, 0x08	; 8
  b6:	d0 f5       	brcc	.+116    	; 0x12c <DIO_Enu_TogPinValue+0x7c>
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 f0       	breq	.+36     	; 0xe0 <DIO_Enu_TogPinValue+0x30>
  bc:	28 f0       	brcs	.+10     	; 0xc8 <DIO_Enu_TogPinValue+0x18>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	d9 f0       	breq	.+54     	; 0xf8 <DIO_Enu_TogPinValue+0x48>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	29 f1       	breq	.+74     	; 0x110 <DIO_Enu_TogPinValue+0x60>
  c6:	34 c0       	rjmp	.+104    	; 0x130 <DIO_Enu_TogPinValue+0x80>
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_Enu_TogPinValue+0x22>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_Enu_TogPinValue+0x1e>
  d6:	9b b3       	in	r25, 0x1b	; 27
  d8:	89 27       	eor	r24, r25
  da:	8b bb       	out	0x1b, r24	; 27
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
            break;
        }
        Local_EnuErrorState = ES_OK;
  dc:	81 e0       	ldi	r24, 0x01	; 1
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
            break;
  de:	08 95       	ret
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_Enu_TogPinValue+0x3a>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_Enu_TogPinValue+0x36>
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	89 27       	eor	r24, r25
  f2:	88 bb       	out	0x18, r24	; 24
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
            break;
        }
        Local_EnuErrorState = ES_OK;
  f4:	81 e0       	ldi	r24, 0x01	; 1
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
            break;
  f6:	08 95       	ret
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_Enu_TogPinValue+0x52>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_Enu_TogPinValue+0x4e>
 106:	95 b3       	in	r25, 0x15	; 21
 108:	89 27       	eor	r24, r25
 10a:	85 bb       	out	0x15, r24	; 21
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
            break;
        }
        Local_EnuErrorState = ES_OK;
 10c:	81 e0       	ldi	r24, 0x01	; 1
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
            break;
 10e:	08 95       	ret
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_Enu_TogPinValue+0x6a>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_Enu_TogPinValue+0x66>
 11e:	92 b3       	in	r25, 0x12	; 18
 120:	89 27       	eor	r24, r25
 122:	82 bb       	out	0x12, r24	; 18
            break;
        }
        Local_EnuErrorState = ES_OK;
 124:	81 e0       	ldi	r24, 0x01	; 1
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
            break;
 126:	08 95       	ret
        }
        Local_EnuErrorState = ES_OK;
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	08 95       	ret
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	08 95       	ret
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
            break;
        }
        Local_EnuErrorState = ES_OK;
 130:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
 132:	08 95       	ret

00000134 <EXTI_enuInit>:
    else
    {
        Local_enuErrorState = ES_OUT_OF_RANGE;
    }
    return Local_enuErrorState;
}
 134:	ac 01       	movw	r20, r24
 136:	89 2b       	or	r24, r25
 138:	09 f0       	breq	.+2      	; 0x13c <EXTI_enuInit+0x8>
 13a:	a6 c0       	rjmp	.+332    	; 0x288 <EXTI_enuInit+0x154>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	08 95       	ret
 140:	29 2f       	mov	r18, r25
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	2e 0f       	add	r18, r30
 14c:	3f 1f       	adc	r19, r31
 14e:	fa 01       	movw	r30, r20
 150:	e2 0f       	add	r30, r18
 152:	f3 1f       	adc	r31, r19
 154:	21 81       	ldd	r18, Z+1	; 0x01
 156:	21 30       	cpi	r18, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <EXTI_enuInit+0x28>
 15a:	78 c0       	rjmp	.+240    	; 0x24c <EXTI_enuInit+0x118>
 15c:	20 81       	ld	r18, Z
 15e:	21 30       	cpi	r18, 0x01	; 1
 160:	99 f1       	breq	.+102    	; 0x1c8 <EXTI_enuInit+0x94>
 162:	20 f0       	brcs	.+8      	; 0x16c <EXTI_enuInit+0x38>
 164:	22 30       	cpi	r18, 0x02	; 2
 166:	09 f4       	brne	.+2      	; 0x16a <EXTI_enuInit+0x36>
 168:	5d c0       	rjmp	.+186    	; 0x224 <EXTI_enuInit+0xf0>
 16a:	8c c0       	rjmp	.+280    	; 0x284 <EXTI_enuInit+0x150>
 16c:	25 b7       	in	r18, 0x35	; 53
 16e:	2e 7f       	andi	r18, 0xFE	; 254
 170:	25 bf       	out	0x35, r18	; 53
 172:	25 b7       	in	r18, 0x35	; 53
 174:	2d 7f       	andi	r18, 0xFD	; 253
 176:	25 bf       	out	0x35, r18	; 53
 178:	2b b7       	in	r18, 0x3b	; 59
 17a:	20 64       	ori	r18, 0x40	; 64
 17c:	2b bf       	out	0x3b, r18	; 59
 17e:	22 81       	ldd	r18, Z+2	; 0x02
 180:	21 30       	cpi	r18, 0x01	; 1
 182:	69 f0       	breq	.+26     	; 0x19e <EXTI_enuInit+0x6a>
 184:	28 f0       	brcs	.+10     	; 0x190 <EXTI_enuInit+0x5c>
 186:	22 30       	cpi	r18, 0x02	; 2
 188:	89 f0       	breq	.+34     	; 0x1ac <EXTI_enuInit+0x78>
 18a:	23 30       	cpi	r18, 0x03	; 3
 18c:	b1 f0       	breq	.+44     	; 0x1ba <EXTI_enuInit+0x86>
 18e:	73 c0       	rjmp	.+230    	; 0x276 <EXTI_enuInit+0x142>
 190:	25 b7       	in	r18, 0x35	; 53
 192:	2e 7f       	andi	r18, 0xFE	; 254
 194:	25 bf       	out	0x35, r18	; 53
 196:	25 b7       	in	r18, 0x35	; 53
 198:	2d 7f       	andi	r18, 0xFD	; 253
 19a:	25 bf       	out	0x35, r18	; 53
 19c:	73 c0       	rjmp	.+230    	; 0x284 <EXTI_enuInit+0x150>
 19e:	25 b7       	in	r18, 0x35	; 53
 1a0:	21 60       	ori	r18, 0x01	; 1
 1a2:	25 bf       	out	0x35, r18	; 53
 1a4:	25 b7       	in	r18, 0x35	; 53
 1a6:	2d 7f       	andi	r18, 0xFD	; 253
 1a8:	25 bf       	out	0x35, r18	; 53
 1aa:	6c c0       	rjmp	.+216    	; 0x284 <EXTI_enuInit+0x150>
 1ac:	25 b7       	in	r18, 0x35	; 53
 1ae:	2e 7f       	andi	r18, 0xFE	; 254
 1b0:	25 bf       	out	0x35, r18	; 53
 1b2:	25 b7       	in	r18, 0x35	; 53
 1b4:	22 60       	ori	r18, 0x02	; 2
 1b6:	25 bf       	out	0x35, r18	; 53
 1b8:	65 c0       	rjmp	.+202    	; 0x284 <EXTI_enuInit+0x150>
 1ba:	25 b7       	in	r18, 0x35	; 53
 1bc:	21 60       	ori	r18, 0x01	; 1
 1be:	25 bf       	out	0x35, r18	; 53
 1c0:	25 b7       	in	r18, 0x35	; 53
 1c2:	22 60       	ori	r18, 0x02	; 2
 1c4:	25 bf       	out	0x35, r18	; 53
 1c6:	5e c0       	rjmp	.+188    	; 0x284 <EXTI_enuInit+0x150>
 1c8:	25 b7       	in	r18, 0x35	; 53
 1ca:	2b 7f       	andi	r18, 0xFB	; 251
 1cc:	25 bf       	out	0x35, r18	; 53
 1ce:	25 b7       	in	r18, 0x35	; 53
 1d0:	27 7f       	andi	r18, 0xF7	; 247
 1d2:	25 bf       	out	0x35, r18	; 53
 1d4:	2b b7       	in	r18, 0x3b	; 59
 1d6:	20 68       	ori	r18, 0x80	; 128
 1d8:	2b bf       	out	0x3b, r18	; 59
 1da:	22 81       	ldd	r18, Z+2	; 0x02
 1dc:	21 30       	cpi	r18, 0x01	; 1
 1de:	69 f0       	breq	.+26     	; 0x1fa <EXTI_enuInit+0xc6>
 1e0:	28 f0       	brcs	.+10     	; 0x1ec <EXTI_enuInit+0xb8>
 1e2:	22 30       	cpi	r18, 0x02	; 2
 1e4:	89 f0       	breq	.+34     	; 0x208 <EXTI_enuInit+0xd4>
 1e6:	23 30       	cpi	r18, 0x03	; 3
 1e8:	b1 f0       	breq	.+44     	; 0x216 <EXTI_enuInit+0xe2>
 1ea:	47 c0       	rjmp	.+142    	; 0x27a <EXTI_enuInit+0x146>
 1ec:	25 b7       	in	r18, 0x35	; 53
 1ee:	2b 7f       	andi	r18, 0xFB	; 251
 1f0:	25 bf       	out	0x35, r18	; 53
 1f2:	25 b7       	in	r18, 0x35	; 53
 1f4:	27 7f       	andi	r18, 0xF7	; 247
 1f6:	25 bf       	out	0x35, r18	; 53
 1f8:	45 c0       	rjmp	.+138    	; 0x284 <EXTI_enuInit+0x150>
 1fa:	25 b7       	in	r18, 0x35	; 53
 1fc:	24 60       	ori	r18, 0x04	; 4
 1fe:	25 bf       	out	0x35, r18	; 53
 200:	25 b7       	in	r18, 0x35	; 53
 202:	27 7f       	andi	r18, 0xF7	; 247
 204:	25 bf       	out	0x35, r18	; 53
 206:	3e c0       	rjmp	.+124    	; 0x284 <EXTI_enuInit+0x150>
 208:	25 b7       	in	r18, 0x35	; 53
 20a:	2b 7f       	andi	r18, 0xFB	; 251
 20c:	25 bf       	out	0x35, r18	; 53
 20e:	25 b7       	in	r18, 0x35	; 53
 210:	28 60       	ori	r18, 0x08	; 8
 212:	25 bf       	out	0x35, r18	; 53
 214:	37 c0       	rjmp	.+110    	; 0x284 <EXTI_enuInit+0x150>
 216:	25 b7       	in	r18, 0x35	; 53
 218:	24 60       	ori	r18, 0x04	; 4
 21a:	25 bf       	out	0x35, r18	; 53
 21c:	25 b7       	in	r18, 0x35	; 53
 21e:	28 60       	ori	r18, 0x08	; 8
 220:	25 bf       	out	0x35, r18	; 53
 222:	30 c0       	rjmp	.+96     	; 0x284 <EXTI_enuInit+0x150>
 224:	25 b7       	in	r18, 0x35	; 53
 226:	2f 7b       	andi	r18, 0xBF	; 191
 228:	25 bf       	out	0x35, r18	; 53
 22a:	2b b7       	in	r18, 0x3b	; 59
 22c:	20 62       	ori	r18, 0x20	; 32
 22e:	2b bf       	out	0x3b, r18	; 59
 230:	22 81       	ldd	r18, Z+2	; 0x02
 232:	22 30       	cpi	r18, 0x02	; 2
 234:	19 f0       	breq	.+6      	; 0x23c <EXTI_enuInit+0x108>
 236:	23 30       	cpi	r18, 0x03	; 3
 238:	29 f0       	breq	.+10     	; 0x244 <EXTI_enuInit+0x110>
 23a:	21 c0       	rjmp	.+66     	; 0x27e <EXTI_enuInit+0x14a>
 23c:	24 b7       	in	r18, 0x34	; 52
 23e:	2f 7b       	andi	r18, 0xBF	; 191
 240:	24 bf       	out	0x34, r18	; 52
 242:	20 c0       	rjmp	.+64     	; 0x284 <EXTI_enuInit+0x150>
 244:	24 b7       	in	r18, 0x34	; 52
 246:	20 64       	ori	r18, 0x40	; 64
 248:	24 bf       	out	0x34, r18	; 52
 24a:	1c c0       	rjmp	.+56     	; 0x284 <EXTI_enuInit+0x150>
 24c:	21 11       	cpse	r18, r1
 24e:	1a c0       	rjmp	.+52     	; 0x284 <EXTI_enuInit+0x150>
 250:	20 81       	ld	r18, Z
 252:	21 30       	cpi	r18, 0x01	; 1
 254:	41 f0       	breq	.+16     	; 0x266 <EXTI_enuInit+0x132>
 256:	18 f0       	brcs	.+6      	; 0x25e <EXTI_enuInit+0x12a>
 258:	22 30       	cpi	r18, 0x02	; 2
 25a:	49 f0       	breq	.+18     	; 0x26e <EXTI_enuInit+0x13a>
 25c:	12 c0       	rjmp	.+36     	; 0x282 <EXTI_enuInit+0x14e>
 25e:	2b b7       	in	r18, 0x3b	; 59
 260:	2f 7b       	andi	r18, 0xBF	; 191
 262:	2b bf       	out	0x3b, r18	; 59
 264:	0f c0       	rjmp	.+30     	; 0x284 <EXTI_enuInit+0x150>
 266:	2b b7       	in	r18, 0x3b	; 59
 268:	2f 77       	andi	r18, 0x7F	; 127
 26a:	2b bf       	out	0x3b, r18	; 59
 26c:	0b c0       	rjmp	.+22     	; 0x284 <EXTI_enuInit+0x150>
 26e:	2b b7       	in	r18, 0x3b	; 59
 270:	2f 7d       	andi	r18, 0xDF	; 223
 272:	2b bf       	out	0x3b, r18	; 59
 274:	07 c0       	rjmp	.+14     	; 0x284 <EXTI_enuInit+0x150>
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	05 c0       	rjmp	.+10     	; 0x284 <EXTI_enuInit+0x150>
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	03 c0       	rjmp	.+6      	; 0x284 <EXTI_enuInit+0x150>
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	01 c0       	rjmp	.+2      	; 0x284 <EXTI_enuInit+0x150>
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	9f 5f       	subi	r25, 0xFF	; 255
 286:	02 c0       	rjmp	.+4      	; 0x28c <EXTI_enuInit+0x158>
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	93 30       	cpi	r25, 0x03	; 3
 28e:	08 f4       	brcc	.+2      	; 0x292 <EXTI_enuInit+0x15e>
 290:	57 cf       	rjmp	.-338    	; 0x140 <EXTI_enuInit+0xc>
 292:	08 95       	ret

00000294 <EXI_SetCallBack>:

void EXI_SetCallBack(ExInterruptSource_type Copy_enuEXTI_ID, void (*LocalPtr)(void))
{
    switch (Copy_enuEXTI_ID)
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	49 f0       	breq	.+18     	; 0x2aa <EXI_SetCallBack+0x16>
 298:	18 f0       	brcs	.+6      	; 0x2a0 <EXI_SetCallBack+0xc>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	59 f0       	breq	.+22     	; 0x2b4 <EXI_SetCallBack+0x20>
 29e:	08 95       	ret
    {
    case EX_INT0:
        INT0_Fptr = LocalPtr;
 2a0:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <INT0_Fptr+0x1>
 2a4:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <INT0_Fptr>
        break;
 2a8:	08 95       	ret
    case EX_INT1:
        INT1_Fptr = LocalPtr;
 2aa:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <INT1_Fptr+0x1>
 2ae:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <INT1_Fptr>
        break;
 2b2:	08 95       	ret
    case EX_INT2:
        INT2_Fptr = LocalPtr;
 2b4:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <__data_end+0x1>
 2b8:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <__data_end>
 2bc:	08 95       	ret

000002be <__vector_1>:
        break;
    }
}

ISR(INT0_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
    if (INT0_Fptr != NULL)
 2e0:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <INT0_Fptr>
 2e4:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <INT0_Fptr+0x1>
 2e8:	30 97       	sbiw	r30, 0x00	; 0
 2ea:	09 f0       	breq	.+2      	; 0x2ee <__vector_1+0x30>
    {
        INT0_Fptr();
 2ec:	09 95       	icall
    }
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_2>:
ISR(INT1_vect)
{
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
    if (INT1_Fptr != NULL)
 332:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <INT1_Fptr>
 336:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <INT1_Fptr+0x1>
 33a:	30 97       	sbiw	r30, 0x00	; 0
 33c:	09 f0       	breq	.+2      	; 0x340 <__vector_2+0x30>
    {
        INT1_Fptr();
 33e:	09 95       	icall
    }
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_3>:
ISR(INT2_vect)
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
    if (INT2_Fptr != NULL)
 384:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 388:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 38c:	30 97       	sbiw	r30, 0x00	; 0
 38e:	09 f0       	breq	.+2      	; 0x392 <__vector_3+0x30>
    {
        INT2_Fptr();
 390:	09 95       	icall
    }
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <FUN>:
	
	}
}

void FUN(void){
	DIO_Enu_TogPinValue(DIO_u8PORTD,DIO_u8PIN7);
 3b4:	67 e0       	ldi	r22, 0x07	; 7
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_Enu_TogPinValue>
 3bc:	08 95       	ret

000003be <main>:
void FUN(void);
EXTI_t EXTI_AstrEXTIConfig[3];
int main(void)
{

	CGI();
 3be:	f8 94       	cli
	DIO_Enu_Init();
 3c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Enu_Init>
	EXTI_enuInit(EXTI_AstrEXTIConfig);
 3c4:	80 e6       	ldi	r24, 0x60	; 96
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 9a 00 	call	0x134	; 0x134 <EXTI_enuInit>
	SGI();
 3cc:	78 94       	sei
	EXI_SetCallBack(EX_INT0,FUN);
 3ce:	6a ed       	ldi	r22, 0xDA	; 218
 3d0:	71 e0       	ldi	r23, 0x01	; 1
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 4a 01 	call	0x294	; 0x294 <EXI_SetCallBack>
	EXI_SetCallBack(EX_INT1,FUN);
 3d8:	6a ed       	ldi	r22, 0xDA	; 218
 3da:	71 e0       	ldi	r23, 0x01	; 1
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 4a 01 	call	0x294	; 0x294 <EXI_SetCallBack>
	EXI_SetCallBack(EX_INT2,FUN);
 3e2:	6a ed       	ldi	r22, 0xDA	; 218
 3e4:	71 e0       	ldi	r23, 0x01	; 1
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	0e 94 4a 01 	call	0x294	; 0x294 <EXI_SetCallBack>
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <main+0x2e>

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>
