
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  00003cd0  00003d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001ce  008001ce  00003ed2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ed2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000438b  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f34  00000000  00000000  00008597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a5c  00000000  00000000  000094cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000944  00000000  00000000  0000bf28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4b  00000000  00000000  0000c86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003894  00000000  00000000  0000d3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00010c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__ctors_end>
       4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_1>
       8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_2>
       c:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_3>
      10:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      14:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      18:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      1c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      20:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      24:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      28:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      30:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      34:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      38:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      3c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      40:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      44:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      48:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      4c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      50:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      54:	9c 10       	cpse	r9, r12
      56:	a5 10       	cpse	r10, r5
      58:	ae 10       	cpse	r10, r14
      5a:	b7 10       	cpse	r11, r7
      5c:	c0 10       	cpse	r12, r0
      5e:	c9 10       	cpse	r12, r9
      60:	d2 10       	cpse	r13, r2
      62:	db 10       	cpse	r13, r11
      64:	e4 10       	cpse	r14, r4
      66:	ed 10       	cpse	r14, r13
      68:	2c 11       	cpse	r18, r12
      6a:	2c 11       	cpse	r18, r12
      6c:	2c 11       	cpse	r18, r12
      6e:	2c 11       	cpse	r18, r12
      70:	2c 11       	cpse	r18, r12
      72:	2c 11       	cpse	r18, r12
      74:	2c 11       	cpse	r18, r12
      76:	f6 10       	cpse	r15, r6
      78:	ff 10       	cpse	r15, r15
      7a:	08 11       	cpse	r16, r8
      7c:	11 11       	cpse	r17, r1
      7e:	1a 11       	cpse	r17, r10
      80:	23 11       	cpse	r18, r3
      82:	07 63       	ori	r16, 0x37	; 55
      84:	42 36       	cpi	r20, 0x62	; 98
      86:	b7 9b       	sbis	0x16, 7	; 22
      88:	d8 a7       	std	Y+40, r29	; 0x28
      8a:	1a 39       	cpi	r17, 0x9A	; 154
      8c:	68 56       	subi	r22, 0x68	; 104
      8e:	18 ae       	std	Y+56, r1	; 0x38
      90:	ba ab       	std	Y+50, r27	; 0x32
      92:	55 8c       	ldd	r5, Z+29	; 0x1d
      94:	1d 3c       	cpi	r17, 0xCD	; 205
      96:	b7 cc       	rjmp	.-1682   	; 0xfffffa06 <__eeprom_end+0xff7efa06>
      98:	57 63       	ori	r21, 0x37	; 55
      9a:	bd 6d       	ori	r27, 0xDD	; 221
      9c:	ed fd       	.word	0xfded	; ????
      9e:	75 3e       	cpi	r23, 0xE5	; 229
      a0:	f6 17       	cp	r31, r22
      a2:	72 31       	cpi	r23, 0x12	; 18
      a4:	bf 00       	.word	0x00bf	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	08 00       	.word	0x0008	; ????
      ac:	00 00       	nop
      ae:	be 92       	st	-X, r11
      b0:	24 49       	sbci	r18, 0x94	; 148
      b2:	12 3e       	cpi	r17, 0xE2	; 226
      b4:	ab aa       	std	Y+51, r10	; 0x33
      b6:	aa 2a       	or	r10, r26
      b8:	be cd       	rjmp	.-1156   	; 0xfffffc36 <__eeprom_end+0xff7efc36>
      ba:	cc cc       	rjmp	.-1640   	; 0xfffffa54 <__eeprom_end+0xff7efa54>
      bc:	4c 3e       	cpi	r20, 0xEC	; 236
      be:	00 00       	nop
      c0:	00 80       	ld	r0, Z
      c2:	be ab       	std	Y+54, r27	; 0x36
      c4:	aa aa       	std	Y+50, r10	; 0x32
      c6:	aa 3e       	cpi	r26, 0xEA	; 234
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 08       	sbc	r0, r0
      d8:	41 78       	andi	r20, 0x81	; 129
      da:	d3 bb       	out	0x13, r29	; 19
      dc:	43 87       	std	Z+11, r20	; 0x0b
      de:	d1 13       	cpse	r29, r17
      e0:	3d 19       	sub	r19, r13
      e2:	0e 3c       	cpi	r16, 0xCE	; 206
      e4:	c3 bd       	out	0x23, r28	; 35
      e6:	42 82       	std	Z+2, r4	; 0x02
      e8:	ad 2b       	or	r26, r29
      ea:	3e 68       	ori	r19, 0x8E	; 142
      ec:	ec 82       	std	Y+4, r14	; 0x04
      ee:	76 be       	out	0x36, r7	; 54
      f0:	d9 8f       	std	Y+25, r29	; 0x19
      f2:	e1 a9       	ldd	r30, Z+49	; 0x31
      f4:	3e 4c       	sbci	r19, 0xCE	; 206
      f6:	80 ef       	ldi	r24, 0xF0	; 240
      f8:	ff be       	out	0x3f, r15	; 63
      fa:	01 c4       	rjmp	.+2050   	; 0x8fe <LCD_enuSendNumber+0x18>
      fc:	ff 7f       	andi	r31, 0xFF	; 255
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
	...

00000104 <__trampolines_end>:
     104:	4e 41       	sbci	r20, 0x1E	; 30
     106:	4e 49       	Address 0x00000106 is out of bounds.
.word	0xffff	; ????

00000107 <pstr_inity>:
     107:	49 4e 49 54 59                                      INITY

0000010c <pstr_inf>:
     10c:	49 4e 46                                            INF

0000010f <pwr_m10>:
     10f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     11f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000127 <pwr_p10>:
     127:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     137:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000140 <__ctors_end>:
     140:	11 24       	eor	r1, r1
     142:	1f be       	out	0x3f, r1	; 63
     144:	cf e5       	ldi	r28, 0x5F	; 95
     146:	d8 e0       	ldi	r29, 0x08	; 8
     148:	de bf       	out	0x3e, r29	; 62
     14a:	cd bf       	out	0x3d, r28	; 61

0000014c <__do_copy_data>:
     14c:	11 e0       	ldi	r17, 0x01	; 1
     14e:	a0 e6       	ldi	r26, 0x60	; 96
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	e0 ed       	ldi	r30, 0xD0	; 208
     154:	fc e3       	ldi	r31, 0x3C	; 60
     156:	02 c0       	rjmp	.+4      	; 0x15c <__do_copy_data+0x10>
     158:	05 90       	lpm	r0, Z+
     15a:	0d 92       	st	X+, r0
     15c:	ae 3c       	cpi	r26, 0xCE	; 206
     15e:	b1 07       	cpc	r27, r17
     160:	d9 f7       	brne	.-10     	; 0x158 <__do_copy_data+0xc>

00000162 <__do_clear_bss>:
     162:	21 e0       	ldi	r18, 0x01	; 1
     164:	ae ec       	ldi	r26, 0xCE	; 206
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	01 c0       	rjmp	.+2      	; 0x16c <.do_clear_bss_start>

0000016a <.do_clear_bss_loop>:
     16a:	1d 92       	st	X+, r1

0000016c <.do_clear_bss_start>:
     16c:	a3 3f       	cpi	r26, 0xF3	; 243
     16e:	b2 07       	cpc	r27, r18
     170:	e1 f7       	brne	.-8      	; 0x16a <.do_clear_bss_loop>
     172:	0e 94 b0 12 	call	0x2560	; 0x2560 <main>
     176:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <_exit>

0000017a <__bad_interrupt>:
     17a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017e <DIO_Enu_Init>:
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	8a bb       	out	0x1a, r24	; 26
     182:	87 bb       	out	0x17, r24	; 23
     184:	14 ba       	out	0x14, r1	; 20
     186:	98 ef       	ldi	r25, 0xF8	; 248
     188:	91 bb       	out	0x11, r25	; 17
     18a:	1b ba       	out	0x1b, r1	; 27
     18c:	18 ba       	out	0x18, r1	; 24
     18e:	85 bb       	out	0x15, r24	; 21
     190:	87 e0       	ldi	r24, 0x07	; 7
     192:	82 bb       	out	0x12, r24	; 18
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	08 95       	ret

00000198 <DIO_Enu_SetPinDirection>:
     198:	84 30       	cpi	r24, 0x04	; 4
     19a:	08 f0       	brcs	.+2      	; 0x19e <DIO_Enu_SetPinDirection+0x6>
     19c:	67 c0       	rjmp	.+206    	; 0x26c <DIO_Enu_SetPinDirection+0xd4>
     19e:	68 30       	cpi	r22, 0x08	; 8
     1a0:	08 f0       	brcs	.+2      	; 0x1a4 <DIO_Enu_SetPinDirection+0xc>
     1a2:	66 c0       	rjmp	.+204    	; 0x270 <DIO_Enu_SetPinDirection+0xd8>
     1a4:	42 30       	cpi	r20, 0x02	; 2
     1a6:	08 f0       	brcs	.+2      	; 0x1aa <DIO_Enu_SetPinDirection+0x12>
     1a8:	65 c0       	rjmp	.+202    	; 0x274 <DIO_Enu_SetPinDirection+0xdc>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	e9 f0       	breq	.+58     	; 0x1e8 <DIO_Enu_SetPinDirection+0x50>
     1ae:	30 f0       	brcs	.+12     	; 0x1bc <DIO_Enu_SetPinDirection+0x24>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	81 f1       	breq	.+96     	; 0x214 <DIO_Enu_SetPinDirection+0x7c>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_Enu_SetPinDirection+0x22>
     1b8:	43 c0       	rjmp	.+134    	; 0x240 <DIO_Enu_SetPinDirection+0xa8>
     1ba:	5e c0       	rjmp	.+188    	; 0x278 <DIO_Enu_SetPinDirection+0xe0>
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	06 2e       	mov	r0, r22
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_Enu_SetPinDirection+0x30>
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	0a 94       	dec	r0
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_Enu_SetPinDirection+0x2c>
     1cc:	80 95       	com	r24
     1ce:	2a b3       	in	r18, 0x1a	; 26
     1d0:	28 23       	and	r18, r24
     1d2:	84 2f       	mov	r24, r20
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_Enu_SetPinDirection+0x44>
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	6a 95       	dec	r22
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_Enu_SetPinDirection+0x40>
     1e0:	82 2b       	or	r24, r18
     1e2:	8a bb       	out	0x1a, r24	; 26
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret
     1e8:	21 e0       	ldi	r18, 0x01	; 1
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	06 2e       	mov	r0, r22
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_Enu_SetPinDirection+0x5c>
     1f0:	22 0f       	add	r18, r18
     1f2:	33 1f       	adc	r19, r19
     1f4:	0a 94       	dec	r0
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_Enu_SetPinDirection+0x58>
     1f8:	20 95       	com	r18
     1fa:	87 b3       	in	r24, 0x17	; 23
     1fc:	28 23       	and	r18, r24
     1fe:	84 2f       	mov	r24, r20
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_Enu_SetPinDirection+0x70>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	6a 95       	dec	r22
     20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_Enu_SetPinDirection+0x6c>
     20c:	82 2b       	or	r24, r18
     20e:	87 bb       	out	0x17, r24	; 23
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	08 95       	ret
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	06 2e       	mov	r0, r22
     21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_Enu_SetPinDirection+0x88>
     21c:	22 0f       	add	r18, r18
     21e:	33 1f       	adc	r19, r19
     220:	0a 94       	dec	r0
     222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_Enu_SetPinDirection+0x84>
     224:	20 95       	com	r18
     226:	84 b3       	in	r24, 0x14	; 20
     228:	28 23       	and	r18, r24
     22a:	84 2f       	mov	r24, r20
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_Enu_SetPinDirection+0x9c>
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	6a 95       	dec	r22
     236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_Enu_SetPinDirection+0x98>
     238:	82 2b       	or	r24, r18
     23a:	84 bb       	out	0x14, r24	; 20
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	08 95       	ret
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	06 2e       	mov	r0, r22
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Enu_SetPinDirection+0xb4>
     248:	22 0f       	add	r18, r18
     24a:	33 1f       	adc	r19, r19
     24c:	0a 94       	dec	r0
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Enu_SetPinDirection+0xb0>
     250:	20 95       	com	r18
     252:	81 b3       	in	r24, 0x11	; 17
     254:	28 23       	and	r18, r24
     256:	84 2f       	mov	r24, r20
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_Enu_SetPinDirection+0xc8>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	6a 95       	dec	r22
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_Enu_SetPinDirection+0xc4>
     264:	82 2b       	or	r24, r18
     266:	81 bb       	out	0x11, r24	; 17
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	08 95       	ret
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	08 95       	ret
     270:	83 e0       	ldi	r24, 0x03	; 3
     272:	08 95       	ret
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	08 95       	ret
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	08 95       	ret

0000027c <DIO_Enu_SetPinValue>:
     27c:	84 30       	cpi	r24, 0x04	; 4
     27e:	08 f0       	brcs	.+2      	; 0x282 <DIO_Enu_SetPinValue+0x6>
     280:	67 c0       	rjmp	.+206    	; 0x350 <DIO_Enu_SetPinValue+0xd4>
     282:	68 30       	cpi	r22, 0x08	; 8
     284:	08 f0       	brcs	.+2      	; 0x288 <DIO_Enu_SetPinValue+0xc>
     286:	66 c0       	rjmp	.+204    	; 0x354 <DIO_Enu_SetPinValue+0xd8>
     288:	42 30       	cpi	r20, 0x02	; 2
     28a:	08 f0       	brcs	.+2      	; 0x28e <DIO_Enu_SetPinValue+0x12>
     28c:	65 c0       	rjmp	.+202    	; 0x358 <DIO_Enu_SetPinValue+0xdc>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	e9 f0       	breq	.+58     	; 0x2cc <DIO_Enu_SetPinValue+0x50>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <DIO_Enu_SetPinValue+0x24>
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	81 f1       	breq	.+96     	; 0x2f8 <DIO_Enu_SetPinValue+0x7c>
     298:	83 30       	cpi	r24, 0x03	; 3
     29a:	09 f4       	brne	.+2      	; 0x29e <DIO_Enu_SetPinValue+0x22>
     29c:	43 c0       	rjmp	.+134    	; 0x324 <DIO_Enu_SetPinValue+0xa8>
     29e:	5e c0       	rjmp	.+188    	; 0x35c <DIO_Enu_SetPinValue+0xe0>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	06 2e       	mov	r0, r22
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_Enu_SetPinValue+0x30>
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_Enu_SetPinValue+0x2c>
     2b0:	80 95       	com	r24
     2b2:	2b b3       	in	r18, 0x1b	; 27
     2b4:	28 23       	and	r18, r24
     2b6:	84 2f       	mov	r24, r20
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_Enu_SetPinValue+0x44>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_Enu_SetPinValue+0x40>
     2c4:	82 2b       	or	r24, r18
     2c6:	8b bb       	out	0x1b, r24	; 27
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	08 95       	ret
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	06 2e       	mov	r0, r22
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_Enu_SetPinValue+0x5c>
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	0a 94       	dec	r0
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_Enu_SetPinValue+0x58>
     2dc:	20 95       	com	r18
     2de:	88 b3       	in	r24, 0x18	; 24
     2e0:	28 23       	and	r18, r24
     2e2:	84 2f       	mov	r24, r20
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_Enu_SetPinValue+0x70>
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	6a 95       	dec	r22
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_Enu_SetPinValue+0x6c>
     2f0:	82 2b       	or	r24, r18
     2f2:	88 bb       	out	0x18, r24	; 24
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	08 95       	ret
     2f8:	21 e0       	ldi	r18, 0x01	; 1
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	06 2e       	mov	r0, r22
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_Enu_SetPinValue+0x88>
     300:	22 0f       	add	r18, r18
     302:	33 1f       	adc	r19, r19
     304:	0a 94       	dec	r0
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_Enu_SetPinValue+0x84>
     308:	20 95       	com	r18
     30a:	85 b3       	in	r24, 0x15	; 21
     30c:	28 23       	and	r18, r24
     30e:	84 2f       	mov	r24, r20
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_Enu_SetPinValue+0x9c>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	6a 95       	dec	r22
     31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_Enu_SetPinValue+0x98>
     31c:	82 2b       	or	r24, r18
     31e:	85 bb       	out	0x15, r24	; 21
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	08 95       	ret
     324:	21 e0       	ldi	r18, 0x01	; 1
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	06 2e       	mov	r0, r22
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Enu_SetPinValue+0xb4>
     32c:	22 0f       	add	r18, r18
     32e:	33 1f       	adc	r19, r19
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Enu_SetPinValue+0xb0>
     334:	20 95       	com	r18
     336:	82 b3       	in	r24, 0x12	; 18
     338:	28 23       	and	r18, r24
     33a:	84 2f       	mov	r24, r20
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_Enu_SetPinValue+0xc8>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_Enu_SetPinValue+0xc4>
     348:	82 2b       	or	r24, r18
     34a:	82 bb       	out	0x12, r24	; 18
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	08 95       	ret
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	08 95       	ret
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	08 95       	ret
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	08 95       	ret
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	08 95       	ret

00000360 <DIO_Enu_GetPinValue>:

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
     360:	41 15       	cp	r20, r1
     362:	51 05       	cpc	r21, r1
     364:	e1 f1       	breq	.+120    	; 0x3de <DIO_Enu_GetPinValue+0x7e>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
     366:	84 30       	cpi	r24, 0x04	; 4
     368:	e0 f5       	brcc	.+120    	; 0x3e2 <DIO_Enu_GetPinValue+0x82>
     36a:	68 30       	cpi	r22, 0x08	; 8
     36c:	e0 f5       	brcc	.+120    	; 0x3e6 <DIO_Enu_GetPinValue+0x86>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	91 f0       	breq	.+36     	; 0x396 <DIO_Enu_GetPinValue+0x36>
     372:	28 f0       	brcs	.+10     	; 0x37e <DIO_Enu_GetPinValue+0x1e>
     374:	82 30       	cpi	r24, 0x02	; 2
     376:	d9 f0       	breq	.+54     	; 0x3ae <DIO_Enu_GetPinValue+0x4e>
     378:	83 30       	cpi	r24, 0x03	; 3
     37a:	29 f1       	breq	.+74     	; 0x3c6 <DIO_Enu_GetPinValue+0x66>
     37c:	36 c0       	rjmp	.+108    	; 0x3ea <DIO_Enu_GetPinValue+0x8a>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
     37e:	89 b3       	in	r24, 0x19	; 25
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_Enu_GetPinValue+0x28>
     384:	95 95       	asr	r25
     386:	87 95       	ror	r24
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_Enu_GetPinValue+0x24>
     38c:	81 70       	andi	r24, 0x01	; 1
     38e:	fa 01       	movw	r30, r20
     390:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     392:	81 e0       	ldi	r24, 0x01	; 1
        {
            switch (Copy_u8PortID)
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
     394:	08 95       	ret
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
     396:	86 b3       	in	r24, 0x16	; 22
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_Enu_GetPinValue+0x40>
     39c:	95 95       	asr	r25
     39e:	87 95       	ror	r24
     3a0:	6a 95       	dec	r22
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_Enu_GetPinValue+0x3c>
     3a4:	81 70       	andi	r24, 0x01	; 1
     3a6:	fa 01       	movw	r30, r20
     3a8:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
     3ac:	08 95       	ret
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
     3ae:	83 b3       	in	r24, 0x13	; 19
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_Enu_GetPinValue+0x58>
     3b4:	95 95       	asr	r25
     3b6:	87 95       	ror	r24
     3b8:	6a 95       	dec	r22
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_Enu_GetPinValue+0x54>
     3bc:	81 70       	andi	r24, 0x01	; 1
     3be:	fa 01       	movw	r30, r20
     3c0:	80 83       	st	Z, r24
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
     3c4:	08 95       	ret
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
     3c6:	80 b3       	in	r24, 0x10	; 16
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_Enu_GetPinValue+0x70>
     3cc:	95 95       	asr	r25
     3ce:	87 95       	ror	r24
     3d0:	6a 95       	dec	r22
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_Enu_GetPinValue+0x6c>
     3d4:	81 70       	andi	r24, 0x01	; 1
     3d6:	fa 01       	movw	r30, r20
     3d8:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
     3da:	81 e0       	ldi	r24, 0x01	; 1
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
     3dc:	08 95       	ret
            Local_EnuErrorState = ES_OUT_OF_RANGE;
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	08 95       	ret
            }
            Local_EnuErrorState = ES_OK;
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	08 95       	ret
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	08 95       	ret
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
                break;
            }
            Local_EnuErrorState = ES_OK;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
     3ec:	08 95       	ret

000003ee <DIO_Enu_WriteHighNibbles>:
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID, u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

    if ((Copy_u8PortID <= DIO_PORTD))
     3ee:	84 30       	cpi	r24, 0x04	; 4
     3f0:	10 f5       	brcc	.+68     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
    {
        Copy_u8Value = (Copy_u8Value << 4);
     3f2:	62 95       	swap	r22
     3f4:	60 7f       	andi	r22, 0xF0	; 240
        switch (Copy_u8PortID)
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	61 f0       	breq	.+24     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     3fa:	28 f0       	brcs	.+10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	79 f0       	breq	.+30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	99 f0       	breq	.+38     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     404:	1a c0       	rjmp	.+52     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
        {
        case DIO_PORTA:
            PORTA &= 0x0f;
     406:	8b b3       	in	r24, 0x1b	; 27
     408:	8f 70       	andi	r24, 0x0F	; 15
            PORTA |= Copy_u8Value;
     40a:	68 2b       	or	r22, r24
     40c:	6b bb       	out	0x1b, r22	; 27
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     40e:	81 e0       	ldi	r24, 0x01	; 1
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            PORTA &= 0x0f;
            PORTA |= Copy_u8Value;
            break;
     410:	08 95       	ret
        case DIO_PORTB:
            PORTB &= 0x0f;
     412:	88 b3       	in	r24, 0x18	; 24
     414:	8f 70       	andi	r24, 0x0F	; 15
            PORTB |= Copy_u8Value;
     416:	68 2b       	or	r22, r24
     418:	68 bb       	out	0x18, r22	; 24
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     41a:	81 e0       	ldi	r24, 0x01	; 1
            PORTA |= Copy_u8Value;
            break;
        case DIO_PORTB:
            PORTB &= 0x0f;
            PORTB |= Copy_u8Value;
            break;
     41c:	08 95       	ret
        case DIO_PORTC:
            PORTC &= 0x0f;
     41e:	85 b3       	in	r24, 0x15	; 21
     420:	8f 70       	andi	r24, 0x0F	; 15
            PORTC |= Copy_u8Value;
     422:	68 2b       	or	r22, r24
     424:	65 bb       	out	0x15, r22	; 21
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     426:	81 e0       	ldi	r24, 0x01	; 1
            PORTB |= Copy_u8Value;
            break;
        case DIO_PORTC:
            PORTC &= 0x0f;
            PORTC |= Copy_u8Value;
            break;
     428:	08 95       	ret
        case DIO_PORTD:
            PORTD &= 0x0f;
     42a:	82 b3       	in	r24, 0x12	; 18
     42c:	8f 70       	andi	r24, 0x0F	; 15
            PORTD |= Copy_u8Value;
     42e:	68 2b       	or	r22, r24
     430:	62 bb       	out	0x12, r22	; 18
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     432:	81 e0       	ldi	r24, 0x01	; 1
            PORTC |= Copy_u8Value;
            break;
        case DIO_PORTD:
            PORTD &= 0x0f;
            PORTD |= Copy_u8Value;
            break;
     434:	08 95       	ret
        }
        Local_EnuErrorState = ES_OK;
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	08 95       	ret
            PORTD |= Copy_u8Value;
            break;
        default:
            break;
        }
        Local_EnuErrorState = ES_OK;
     43a:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
     43c:	08 95       	ret

0000043e <EXI_SetCallBack>:
		break;
	case EX_INT1:
		CLR_BIT(GICR, INT1);
		break;
	case EX_INT2:
		CLR_BIT(GICR, INT2);
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	49 f0       	breq	.+18     	; 0x454 <EXI_SetCallBack+0x16>
     442:	18 f0       	brcs	.+6      	; 0x44a <EXI_SetCallBack+0xc>
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	59 f0       	breq	.+22     	; 0x45e <EXI_SetCallBack+0x20>
     448:	08 95       	ret
     44a:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <INT0_Fptr+0x1>
     44e:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <INT0_Fptr>
     452:	08 95       	ret
     454:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <INT1_Fptr+0x1>
     458:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <INT1_Fptr>
     45c:	08 95       	ret
     45e:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <__data_end+0x1>
     462:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <__data_end>
     466:	08 95       	ret

00000468 <EXI_Enable>:
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	41 f0       	breq	.+16     	; 0x47c <EXI_Enable+0x14>
     46c:	18 f0       	brcs	.+6      	; 0x474 <EXI_Enable+0xc>
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	49 f0       	breq	.+18     	; 0x484 <EXI_Enable+0x1c>
     472:	08 95       	ret
     474:	8b b7       	in	r24, 0x3b	; 59
     476:	80 64       	ori	r24, 0x40	; 64
     478:	8b bf       	out	0x3b, r24	; 59
     47a:	08 95       	ret
     47c:	8b b7       	in	r24, 0x3b	; 59
     47e:	80 68       	ori	r24, 0x80	; 128
     480:	8b bf       	out	0x3b, r24	; 59
     482:	08 95       	ret
     484:	8b b7       	in	r24, 0x3b	; 59
     486:	80 62       	ori	r24, 0x20	; 32
     488:	8b bf       	out	0x3b, r24	; 59
     48a:	08 95       	ret

0000048c <EXI_TriggerEdge>:
	}
}
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt, TriggerEdge_type Edge)
{
	switch (Interrupt)
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	49 f1       	breq	.+82     	; 0x4e2 <EXI_TriggerEdge+0x56>
     490:	20 f0       	brcs	.+8      	; 0x49a <EXI_TriggerEdge+0xe>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	09 f4       	brne	.+2      	; 0x498 <EXI_TriggerEdge+0xc>
     496:	49 c0       	rjmp	.+146    	; 0x52a <EXI_TriggerEdge+0x9e>
     498:	08 95       	ret
	{
	case EX_INT0:
		switch (Edge)
     49a:	61 30       	cpi	r22, 0x01	; 1
     49c:	69 f0       	breq	.+26     	; 0x4b8 <EXI_TriggerEdge+0x2c>
     49e:	28 f0       	brcs	.+10     	; 0x4aa <EXI_TriggerEdge+0x1e>
     4a0:	62 30       	cpi	r22, 0x02	; 2
     4a2:	89 f0       	breq	.+34     	; 0x4c6 <EXI_TriggerEdge+0x3a>
     4a4:	63 30       	cpi	r22, 0x03	; 3
     4a6:	b1 f0       	breq	.+44     	; 0x4d4 <EXI_TriggerEdge+0x48>
     4a8:	08 95       	ret
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC00);
     4aa:	85 b7       	in	r24, 0x35	; 53
     4ac:	8e 7f       	andi	r24, 0xFE	; 254
     4ae:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC01);
     4b0:	85 b7       	in	r24, 0x35	; 53
     4b2:	8d 7f       	andi	r24, 0xFD	; 253
     4b4:	85 bf       	out	0x35, r24	; 53
			break;
     4b6:	08 95       	ret
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR, ISC00);
     4b8:	85 b7       	in	r24, 0x35	; 53
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC01);
     4be:	85 b7       	in	r24, 0x35	; 53
     4c0:	8d 7f       	andi	r24, 0xFD	; 253
     4c2:	85 bf       	out	0x35, r24	; 53
			break;
     4c4:	08 95       	ret
		case FALLING_EDGE:
			CLR_BIT(MCUCR, ISC00);
     4c6:	85 b7       	in	r24, 0x35	; 53
     4c8:	8e 7f       	andi	r24, 0xFE	; 254
     4ca:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC01);
     4cc:	85 b7       	in	r24, 0x35	; 53
     4ce:	82 60       	ori	r24, 0x02	; 2
     4d0:	85 bf       	out	0x35, r24	; 53
			break;
     4d2:	08 95       	ret
		case RISING_EDGE:
			SET_BIT(MCUCR, ISC00);
     4d4:	85 b7       	in	r24, 0x35	; 53
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC01);
     4da:	85 b7       	in	r24, 0x35	; 53
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	85 bf       	out	0x35, r24	; 53
			break;
     4e0:	08 95       	ret
		}
		break;
	case EX_INT1:
		switch (Edge)
     4e2:	61 30       	cpi	r22, 0x01	; 1
     4e4:	69 f0       	breq	.+26     	; 0x500 <EXI_TriggerEdge+0x74>
     4e6:	28 f0       	brcs	.+10     	; 0x4f2 <EXI_TriggerEdge+0x66>
     4e8:	62 30       	cpi	r22, 0x02	; 2
     4ea:	89 f0       	breq	.+34     	; 0x50e <EXI_TriggerEdge+0x82>
     4ec:	63 30       	cpi	r22, 0x03	; 3
     4ee:	b1 f0       	breq	.+44     	; 0x51c <EXI_TriggerEdge+0x90>
     4f0:	08 95       	ret
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR, ISC10);
     4f2:	85 b7       	in	r24, 0x35	; 53
     4f4:	8b 7f       	andi	r24, 0xFB	; 251
     4f6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC11);
     4f8:	85 b7       	in	r24, 0x35	; 53
     4fa:	87 7f       	andi	r24, 0xF7	; 247
     4fc:	85 bf       	out	0x35, r24	; 53
			break;
     4fe:	08 95       	ret
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR, ISC10);
     500:	85 b7       	in	r24, 0x35	; 53
     502:	84 60       	ori	r24, 0x04	; 4
     504:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR, ISC11);
     506:	85 b7       	in	r24, 0x35	; 53
     508:	87 7f       	andi	r24, 0xF7	; 247
     50a:	85 bf       	out	0x35, r24	; 53
			break;
     50c:	08 95       	ret
		case FALLING_EDGE:
			CLR_BIT(MCUCR, ISC10);
     50e:	85 b7       	in	r24, 0x35	; 53
     510:	8b 7f       	andi	r24, 0xFB	; 251
     512:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC11);
     514:	85 b7       	in	r24, 0x35	; 53
     516:	88 60       	ori	r24, 0x08	; 8
     518:	85 bf       	out	0x35, r24	; 53
			break;
     51a:	08 95       	ret
		case RISING_EDGE:
			SET_BIT(MCUCR, ISC10);
     51c:	85 b7       	in	r24, 0x35	; 53
     51e:	84 60       	ori	r24, 0x04	; 4
     520:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC11);
     522:	85 b7       	in	r24, 0x35	; 53
     524:	88 60       	ori	r24, 0x08	; 8
     526:	85 bf       	out	0x35, r24	; 53
			break;
     528:	08 95       	ret
		}
		break;
	case EX_INT2:
		switch (Edge)
     52a:	62 30       	cpi	r22, 0x02	; 2
     52c:	19 f0       	breq	.+6      	; 0x534 <EXI_TriggerEdge+0xa8>
     52e:	63 30       	cpi	r22, 0x03	; 3
     530:	29 f0       	breq	.+10     	; 0x53c <EXI_TriggerEdge+0xb0>
     532:	08 c0       	rjmp	.+16     	; 0x544 <EXI_TriggerEdge+0xb8>
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR, ISC2);
     534:	84 b7       	in	r24, 0x34	; 52
     536:	8f 7b       	andi	r24, 0xBF	; 191
     538:	84 bf       	out	0x34, r24	; 52
			break;
     53a:	08 95       	ret
		case RISING_EDGE:
			SET_BIT(MCUCSR, ISC2);
     53c:	84 b7       	in	r24, 0x34	; 52
     53e:	80 64       	ori	r24, 0x40	; 64
     540:	84 bf       	out	0x34, r24	; 52
			break;
     542:	08 95       	ret
		default:
			CLR_BIT(MCUCSR, ISC2);
     544:	84 b7       	in	r24, 0x34	; 52
     546:	8f 7b       	andi	r24, 0xBF	; 191
     548:	84 bf       	out	0x34, r24	; 52
     54a:	08 95       	ret

0000054c <__vector_1>:
		break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	2f 93       	push	r18
     558:	3f 93       	push	r19
     55a:	4f 93       	push	r20
     55c:	5f 93       	push	r21
     55e:	6f 93       	push	r22
     560:	7f 93       	push	r23
     562:	8f 93       	push	r24
     564:	9f 93       	push	r25
     566:	af 93       	push	r26
     568:	bf 93       	push	r27
     56a:	ef 93       	push	r30
     56c:	ff 93       	push	r31
	if (INT0_Fptr != NULL)
     56e:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <INT0_Fptr>
     572:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <INT0_Fptr+0x1>
     576:	30 97       	sbiw	r30, 0x00	; 0
     578:	09 f0       	breq	.+2      	; 0x57c <__vector_1+0x30>
	{
		INT0_Fptr();
     57a:	09 95       	icall
	}
}
     57c:	ff 91       	pop	r31
     57e:	ef 91       	pop	r30
     580:	bf 91       	pop	r27
     582:	af 91       	pop	r26
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	7f 91       	pop	r23
     58a:	6f 91       	pop	r22
     58c:	5f 91       	pop	r21
     58e:	4f 91       	pop	r20
     590:	3f 91       	pop	r19
     592:	2f 91       	pop	r18
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <__vector_2>:
ISR(INT1_vect)
{
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
	if (INT1_Fptr != NULL)
     5c0:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <INT1_Fptr>
     5c4:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <INT1_Fptr+0x1>
     5c8:	30 97       	sbiw	r30, 0x00	; 0
     5ca:	09 f0       	breq	.+2      	; 0x5ce <__vector_2+0x30>
	{
		INT1_Fptr();
     5cc:	09 95       	icall
	}
}
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	7f 91       	pop	r23
     5dc:	6f 91       	pop	r22
     5de:	5f 91       	pop	r21
     5e0:	4f 91       	pop	r20
     5e2:	3f 91       	pop	r19
     5e4:	2f 91       	pop	r18
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <__vector_3>:
ISR(INT2_vect)
{
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	2f 93       	push	r18
     5fc:	3f 93       	push	r19
     5fe:	4f 93       	push	r20
     600:	5f 93       	push	r21
     602:	6f 93       	push	r22
     604:	7f 93       	push	r23
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	af 93       	push	r26
     60c:	bf 93       	push	r27
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
	if (INT2_Fptr != NULL)
     612:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <__data_end>
     616:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <__data_end+0x1>
     61a:	30 97       	sbiw	r30, 0x00	; 0
     61c:	09 f0       	breq	.+2      	; 0x620 <__vector_3+0x30>
	{
		INT2_Fptr();
     61e:	09 95       	icall
	}
}
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <KPD_enu_Init>:
{
	ES_t Local_EnuErrorState = ES_NOT_OK;

	/*This code equivalent to connect pull up for the pins of the rows */

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R0, DIO_u8INPUT);
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R1, DIO_u8INPUT);
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R2, DIO_u8INPUT);
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	62 e0       	ldi	r22, 0x02	; 2
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R3, DIO_u8INPUT);
     660:	40 e0       	ldi	r20, 0x00	; 0
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_R0, DIO_u8HIGH);
     66a:	41 e0       	ldi	r20, 0x01	; 1
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R1, DIO_u8HIGH);
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R2, DIO_u8HIGH);
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	62 e0       	ldi	r22, 0x02	; 2
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R3, DIO_u8HIGH);
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	63 e0       	ldi	r22, 0x03	; 3
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>

	/*connect the pins of the columns as output pins (HIGH)*/

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C0, DIO_u8OUTPUT);
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	64 e0       	ldi	r22, 0x04	; 4
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C1, DIO_u8OUTPUT);
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	65 e0       	ldi	r22, 0x05	; 5
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C2, DIO_u8OUTPUT);
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	66 e0       	ldi	r22, 0x06	; 6
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C3, DIO_u8OUTPUT);
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	67 e0       	ldi	r22, 0x07	; 7
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_C0, DIO_u8HIGH);
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C1, DIO_u8HIGH);
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	65 e0       	ldi	r22, 0x05	; 5
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C2, DIO_u8HIGH);
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	66 e0       	ldi	r22, 0x06	; 6
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C3, DIO_u8HIGH);
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	67 e0       	ldi	r22, 0x07	; 7
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>

#if COLS_NUM == 6
	DIO_Enu_SetPinDirection(KPD_PORT_PLUS, KPD_C4, DIO_u8OUTPUT);
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT_PLUS, KPD_C5, DIO_u8OUTPUT);
     6ec:	41 e0       	ldi	r20, 0x01	; 1
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinValue(KPD_PORT_PLUS, KPD_C4, DIO_u8HIGH);
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT_PLUS, KPD_C5, DIO_u8HIGH);
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
#endif
	Local_EnuErrorState = ES_OK;

	return Local_EnuErrorState;
}
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	08 95       	ret

0000070e <KPD_enu_GetPressed>:

ES_t KPD_enu_GetPressed(u8 *Copy_pu8Value)
{
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	1f 92       	push	r1
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	6c 01       	movw	r12, r24
#if COLS_NUM == 4
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
#elif COLS_NUM == 6
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3, KPD_C4, KPD_C5};
#endif
	*Copy_pu8Value = NOTPRESSED;
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	f6 01       	movw	r30, r12
     72a:	80 83       	st	Z, r24
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	5c c0       	rjmp	.+184    	; 0x7e8 <KPD_enu_GetPressed+0xda>
	{
#if COLS_NUM == 4
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
#elif COLS_NUM == 6
		if (LOC_u8ColumnIndex < 4)
     730:	04 30       	cpi	r16, 0x04	; 4
     732:	58 f4       	brcc	.+22     	; 0x74a <KPD_enu_GetPressed+0x3c>
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
     734:	e0 2f       	mov	r30, r16
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	e5 59       	subi	r30, 0x95	; 149
     73a:	ff 4f       	sbci	r31, 0xFF	; 255
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	60 81       	ld	r22, Z
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>

	return Local_EnuErrorState;
}

ES_t KPD_enu_GetPressed(u8 *Copy_pu8Value)
{
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	37 c0       	rjmp	.+110    	; 0x7b8 <KPD_enu_GetPressed+0xaa>
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
#elif COLS_NUM == 6
		if (LOC_u8ColumnIndex < 4)
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		else
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
     74a:	e0 2f       	mov	r30, r16
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	e5 59       	subi	r30, 0x95	; 149
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	60 81       	ld	r22, Z
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     75c:	f4 cf       	rjmp	.-24     	; 0x746 <KPD_enu_GetPressed+0x38>
#endif
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
     75e:	e1 2e       	mov	r14, r17
     760:	f1 2c       	mov	r15, r1
     762:	f7 01       	movw	r30, r14
     764:	e9 59       	subi	r30, 0x99	; 153
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	ae 01       	movw	r20, r28
     76a:	4f 5f       	subi	r20, 0xFF	; 255
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	60 81       	ld	r22, Z
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_Enu_GetPinValue>
			if (LOC_u8PinState == DIO_u8LOW)
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	81 11       	cpse	r24, r1
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <KPD_enu_GetPressed+0xa8>
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
     77c:	f7 01       	movw	r30, r14
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ee 0d       	add	r30, r14
     784:	ff 1d       	adc	r31, r15
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ef 58       	subi	r30, 0x8F	; 143
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	e0 0f       	add	r30, r16
     790:	f1 1d       	adc	r31, r1
     792:	80 81       	ld	r24, Z
     794:	f6 01       	movw	r30, r12
     796:	80 83       	st	Z, r24
				while (LOC_u8PinState == DIO_u8LOW)
     798:	0a c0       	rjmp	.+20     	; 0x7ae <KPD_enu_GetPressed+0xa0>
				{
					DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
     79a:	ae 01       	movw	r20, r28
     79c:	4f 5f       	subi	r20, 0xFF	; 255
     79e:	5f 4f       	sbci	r21, 0xFF	; 255
     7a0:	f7 01       	movw	r30, r14
     7a2:	e9 59       	subi	r30, 0x99	; 153
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	60 81       	ld	r22, Z
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_Enu_GetPinValue>
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
			if (LOC_u8PinState == DIO_u8LOW)
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
				while (LOC_u8PinState == DIO_u8LOW)
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	88 23       	and	r24, r24
     7b2:	99 f3       	breq	.-26     	; 0x79a <KPD_enu_GetPressed+0x8c>
     7b4:	1c c0       	rjmp	.+56     	; 0x7ee <KPD_enu_GetPressed+0xe0>
		if (LOC_u8ColumnIndex < 4)
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		else
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
#endif
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
     7b6:	1f 5f       	subi	r17, 0xFF	; 255
     7b8:	14 30       	cpi	r17, 0x04	; 4
     7ba:	88 f2       	brcs	.-94     	; 0x75e <KPD_enu_GetPressed+0x50>
			}
		}
#if COLS_NUM == 4
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
#elif COLS_NUM == 6
		if (LOC_u8ColumnIndex < 4)
     7bc:	04 30       	cpi	r16, 0x04	; 4
     7be:	50 f4       	brcc	.+20     	; 0x7d4 <KPD_enu_GetPressed+0xc6>
			DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
     7c0:	e0 2f       	mov	r30, r16
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	e5 59       	subi	r30, 0x95	; 149
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	60 81       	ld	r22, Z
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <KPD_enu_GetPressed+0xd8>
		else
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
     7d4:	e0 2f       	mov	r30, r16
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	e5 59       	subi	r30, 0x95	; 149
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	60 81       	ld	r22, Z
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
#elif COLS_NUM == 6
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3, KPD_C4, KPD_C5};
#endif
	*Copy_pu8Value = NOTPRESSED;
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	06 30       	cpi	r16, 0x06	; 6
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <KPD_enu_GetPressed+0xe0>
     7ec:	a1 cf       	rjmp	.-190    	; 0x730 <KPD_enu_GetPressed+0x22>
			DIO_Enu_SetPinValue(KPD_PORT_PLUS, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
#endif
	}
	Local_EnuErrorState = ES_OK;
	return Local_EnuErrorState;
}
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <LCD_voidSendFallingEdge>:
        LCD_enuSendData(LOC_u8Iterator);
    }
    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	62 e0       	ldi	r22, 0x02	; 2
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     80e:	8f ec       	ldi	r24, 0xCF	; 207
     810:	97 e0       	ldi	r25, 0x07	; 7
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <LCD_voidSendFallingEdge+0xe>
     816:	00 c0       	rjmp	.+0      	; 0x818 <LCD_voidSendFallingEdge+0x14>
     818:	00 00       	nop
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	62 e0       	ldi	r22, 0x02	; 2
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     824:	8f ec       	ldi	r24, 0xCF	; 207
     826:	97 e0       	ldi	r25, 0x07	; 7
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <LCD_voidSendFallingEdge+0x24>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <LCD_voidSendFallingEdge+0x2a>
     82e:	00 00       	nop
     830:	08 95       	ret

00000832 <LCD_enuSendCommand>:
     832:	cf 93       	push	r28
     834:	c8 2f       	mov	r28, r24
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     84a:	6c 2f       	mov	r22, r28
     84c:	62 95       	swap	r22
     84e:	6f 70       	andi	r22, 0x0F	; 15
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_Enu_WriteHighNibbles>
     856:	0e 94 02 04 	call	0x804	; 0x804 <LCD_voidSendFallingEdge>
     85a:	6c 2f       	mov	r22, r28
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_Enu_WriteHighNibbles>
     862:	0e 94 02 04 	call	0x804	; 0x804 <LCD_voidSendFallingEdge>
     866:	8f ec       	ldi	r24, 0xCF	; 207
     868:	97 e0       	ldi	r25, 0x07	; 7
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 00       	nop
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <LCD_enuSendData>:
     878:	cf 93       	push	r28
     87a:	c8 2f       	mov	r28, r24
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_Enu_SetPinValue>
     890:	6c 2f       	mov	r22, r28
     892:	62 95       	swap	r22
     894:	6f 70       	andi	r22, 0x0F	; 15
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_Enu_WriteHighNibbles>
     89c:	0e 94 02 04 	call	0x804	; 0x804 <LCD_voidSendFallingEdge>
     8a0:	6c 2f       	mov	r22, r28
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_Enu_WriteHighNibbles>
     8a8:	0e 94 02 04 	call	0x804	; 0x804 <LCD_voidSendFallingEdge>
     8ac:	8f ec       	ldi	r24, 0xCF	; 207
     8ae:	97 e0       	ldi	r25, 0x07	; 7
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <LCD_enuSendData+0x38>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <LCD_enuSendData+0x3e>
     8b6:	00 00       	nop
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <LCD_enuSendString>:
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	8c 01       	movw	r16, r24
     8c6:	c0 e0       	ldi	r28, 0x00	; 0
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <LCD_enuSendString+0x12>
     8ca:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
     8ce:	cf 5f       	subi	r28, 0xFF	; 255
     8d0:	f8 01       	movw	r30, r16
     8d2:	ec 0f       	add	r30, r28
     8d4:	f1 1d       	adc	r31, r1
     8d6:	80 81       	ld	r24, Z
     8d8:	81 11       	cpse	r24, r1
     8da:	f7 cf       	rjmp	.-18     	; 0x8ca <LCD_enuSendString+0xc>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <LCD_enuSendNumber>:
     8e6:	2f 92       	push	r2
     8e8:	3f 92       	push	r3
     8ea:	4f 92       	push	r4
     8ec:	5f 92       	push	r5
     8ee:	6f 92       	push	r6
     8f0:	7f 92       	push	r7
     8f2:	8f 92       	push	r8
     8f4:	9f 92       	push	r9
     8f6:	af 92       	push	r10
     8f8:	bf 92       	push	r11
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	28 97       	sbiw	r28, 0x08	; 8
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	29 83       	std	Y+1, r18	; 0x01
     91c:	3a 83       	std	Y+2, r19	; 0x02
     91e:	4b 83       	std	Y+3, r20	; 0x03
     920:	5c 83       	std	Y+4, r21	; 0x04
     922:	6d 83       	std	Y+5, r22	; 0x05
     924:	7e 83       	std	Y+6, r23	; 0x06
     926:	38 2e       	mov	r3, r24
     928:	29 2e       	mov	r2, r25
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	0e 94 9e 18 	call	0x313c	; 0x313c <__cmpdi2_s8>
     930:	21 f4       	brne	.+8      	; 0x93a <LCD_enuSendNumber+0x54>
     932:	80 e3       	ldi	r24, 0x30	; 48
     934:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
     938:	e2 c0       	rjmp	.+452    	; 0xafe <LCD_enuSendNumber+0x218>
     93a:	29 81       	ldd	r18, Y+1	; 0x01
     93c:	3a 81       	ldd	r19, Y+2	; 0x02
     93e:	4b 81       	ldd	r20, Y+3	; 0x03
     940:	5c 81       	ldd	r21, Y+4	; 0x04
     942:	6d 81       	ldd	r22, Y+5	; 0x05
     944:	7e 81       	ldd	r23, Y+6	; 0x06
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	0e 94 9e 18 	call	0x313c	; 0x313c <__cmpdi2_s8>
     94c:	6c f4       	brge	.+26     	; 0x968 <LCD_enuSendNumber+0x82>
     94e:	0e 94 35 18 	call	0x306a	; 0x306a <__negdi2>
     952:	29 83       	std	Y+1, r18	; 0x01
     954:	3a 83       	std	Y+2, r19	; 0x02
     956:	4b 83       	std	Y+3, r20	; 0x03
     958:	5c 83       	std	Y+4, r21	; 0x04
     95a:	6d 83       	std	Y+5, r22	; 0x05
     95c:	7e 83       	std	Y+6, r23	; 0x06
     95e:	38 2e       	mov	r3, r24
     960:	29 2e       	mov	r2, r25
     962:	8d e2       	ldi	r24, 0x2D	; 45
     964:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	18 86       	std	Y+8, r1	; 0x08
     96c:	91 2c       	mov	r9, r1
     96e:	81 2c       	mov	r8, r1
     970:	71 2c       	mov	r7, r1
     972:	61 2c       	mov	r6, r1
     974:	51 2c       	mov	r5, r1
     976:	41 2c       	mov	r4, r1
     978:	8f 83       	std	Y+7, r24	; 0x07
     97a:	7c c0       	rjmp	.+248    	; 0xa74 <LCD_enuSendNumber+0x18e>
     97c:	2f 81       	ldd	r18, Y+7	; 0x07
     97e:	38 85       	ldd	r19, Y+8	; 0x08
     980:	49 2d       	mov	r20, r9
     982:	58 2d       	mov	r21, r8
     984:	67 2d       	mov	r22, r7
     986:	76 2d       	mov	r23, r6
     988:	85 2d       	mov	r24, r5
     98a:	94 2d       	mov	r25, r4
     98c:	01 e0       	ldi	r16, 0x01	; 1
     98e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__ashldi3>
     992:	82 2e       	mov	r8, r18
     994:	93 2e       	mov	r9, r19
     996:	48 87       	std	Y+8, r20	; 0x08
     998:	5f 83       	std	Y+7, r21	; 0x07
     99a:	b6 2f       	mov	r27, r22
     99c:	a7 2f       	mov	r26, r23
     99e:	f8 2f       	mov	r31, r24
     9a0:	e9 2f       	mov	r30, r25
     9a2:	02 e0       	ldi	r16, 0x02	; 2
     9a4:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__ashldi3>
     9a8:	a2 2e       	mov	r10, r18
     9aa:	b3 2e       	mov	r11, r19
     9ac:	c4 2e       	mov	r12, r20
     9ae:	d5 2e       	mov	r13, r21
     9b0:	e6 2e       	mov	r14, r22
     9b2:	f7 2e       	mov	r15, r23
     9b4:	08 2f       	mov	r16, r24
     9b6:	19 2f       	mov	r17, r25
     9b8:	28 2d       	mov	r18, r8
     9ba:	39 2d       	mov	r19, r9
     9bc:	48 85       	ldd	r20, Y+8	; 0x08
     9be:	5f 81       	ldd	r21, Y+7	; 0x07
     9c0:	6b 2f       	mov	r22, r27
     9c2:	7a 2f       	mov	r23, r26
     9c4:	8f 2f       	mov	r24, r31
     9c6:	9e 2f       	mov	r25, r30
     9c8:	0e 94 95 18 	call	0x312a	; 0x312a <__adddi3>
     9cc:	28 87       	std	Y+8, r18	; 0x08
     9ce:	3f 83       	std	Y+7, r19	; 0x07
     9d0:	94 2e       	mov	r9, r20
     9d2:	85 2e       	mov	r8, r21
     9d4:	76 2e       	mov	r7, r22
     9d6:	67 2e       	mov	r6, r23
     9d8:	58 2e       	mov	r5, r24
     9da:	49 2e       	mov	r4, r25
     9dc:	0f 2e       	mov	r0, r31
     9de:	fa e0       	ldi	r31, 0x0A	; 10
     9e0:	af 2e       	mov	r10, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	b1 2c       	mov	r11, r1
     9e6:	c1 2c       	mov	r12, r1
     9e8:	d1 2c       	mov	r13, r1
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	29 81       	ldd	r18, Y+1	; 0x01
     9f4:	3a 81       	ldd	r19, Y+2	; 0x02
     9f6:	4b 81       	ldd	r20, Y+3	; 0x03
     9f8:	5c 81       	ldd	r21, Y+4	; 0x04
     9fa:	6d 81       	ldd	r22, Y+5	; 0x05
     9fc:	7e 81       	ldd	r23, Y+6	; 0x06
     9fe:	83 2d       	mov	r24, r3
     a00:	92 2d       	mov	r25, r2
     a02:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__moddi3>
     a06:	a2 2e       	mov	r10, r18
     a08:	b3 2e       	mov	r11, r19
     a0a:	c4 2e       	mov	r12, r20
     a0c:	d5 2e       	mov	r13, r21
     a0e:	e6 2e       	mov	r14, r22
     a10:	f7 2e       	mov	r15, r23
     a12:	08 2f       	mov	r16, r24
     a14:	19 2f       	mov	r17, r25
     a16:	28 85       	ldd	r18, Y+8	; 0x08
     a18:	3f 81       	ldd	r19, Y+7	; 0x07
     a1a:	49 2d       	mov	r20, r9
     a1c:	58 2d       	mov	r21, r8
     a1e:	67 2d       	mov	r22, r7
     a20:	76 2d       	mov	r23, r6
     a22:	85 2d       	mov	r24, r5
     a24:	94 2d       	mov	r25, r4
     a26:	0e 94 95 18 	call	0x312a	; 0x312a <__adddi3>
     a2a:	2f 83       	std	Y+7, r18	; 0x07
     a2c:	38 87       	std	Y+8, r19	; 0x08
     a2e:	94 2e       	mov	r9, r20
     a30:	85 2e       	mov	r8, r21
     a32:	76 2e       	mov	r7, r22
     a34:	67 2e       	mov	r6, r23
     a36:	58 2e       	mov	r5, r24
     a38:	49 2e       	mov	r4, r25
     a3a:	0f 2e       	mov	r0, r31
     a3c:	fa e0       	ldi	r31, 0x0A	; 10
     a3e:	af 2e       	mov	r10, r31
     a40:	f0 2d       	mov	r31, r0
     a42:	b1 2c       	mov	r11, r1
     a44:	c1 2c       	mov	r12, r1
     a46:	d1 2c       	mov	r13, r1
     a48:	e1 2c       	mov	r14, r1
     a4a:	f1 2c       	mov	r15, r1
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	29 81       	ldd	r18, Y+1	; 0x01
     a52:	3a 81       	ldd	r19, Y+2	; 0x02
     a54:	4b 81       	ldd	r20, Y+3	; 0x03
     a56:	5c 81       	ldd	r21, Y+4	; 0x04
     a58:	6d 81       	ldd	r22, Y+5	; 0x05
     a5a:	7e 81       	ldd	r23, Y+6	; 0x06
     a5c:	83 2d       	mov	r24, r3
     a5e:	92 2d       	mov	r25, r2
     a60:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divdi3>
     a64:	29 83       	std	Y+1, r18	; 0x01
     a66:	3a 83       	std	Y+2, r19	; 0x02
     a68:	4b 83       	std	Y+3, r20	; 0x03
     a6a:	5c 83       	std	Y+4, r21	; 0x04
     a6c:	6d 83       	std	Y+5, r22	; 0x05
     a6e:	7e 83       	std	Y+6, r23	; 0x06
     a70:	38 2e       	mov	r3, r24
     a72:	29 2e       	mov	r2, r25
     a74:	29 81       	ldd	r18, Y+1	; 0x01
     a76:	3a 81       	ldd	r19, Y+2	; 0x02
     a78:	4b 81       	ldd	r20, Y+3	; 0x03
     a7a:	5c 81       	ldd	r21, Y+4	; 0x04
     a7c:	6d 81       	ldd	r22, Y+5	; 0x05
     a7e:	7e 81       	ldd	r23, Y+6	; 0x06
     a80:	83 2d       	mov	r24, r3
     a82:	92 2d       	mov	r25, r2
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	0e 94 9e 18 	call	0x313c	; 0x313c <__cmpdi2_s8>
     a8a:	09 f0       	breq	.+2      	; 0xa8e <LCD_enuSendNumber+0x1a8>
     a8c:	77 cf       	rjmp	.-274    	; 0x97c <LCD_enuSendNumber+0x96>
     a8e:	2b c0       	rjmp	.+86     	; 0xae6 <LCD_enuSendNumber+0x200>
     a90:	0f 2e       	mov	r0, r31
     a92:	fa e0       	ldi	r31, 0x0A	; 10
     a94:	af 2e       	mov	r10, r31
     a96:	f0 2d       	mov	r31, r0
     a98:	b1 2c       	mov	r11, r1
     a9a:	c1 2c       	mov	r12, r1
     a9c:	d1 2c       	mov	r13, r1
     a9e:	e1 2c       	mov	r14, r1
     aa0:	f1 2c       	mov	r15, r1
     aa2:	00 e0       	ldi	r16, 0x00	; 0
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	2f 81       	ldd	r18, Y+7	; 0x07
     aa8:	38 85       	ldd	r19, Y+8	; 0x08
     aaa:	49 2d       	mov	r20, r9
     aac:	58 2d       	mov	r21, r8
     aae:	67 2d       	mov	r22, r7
     ab0:	76 2d       	mov	r23, r6
     ab2:	85 2d       	mov	r24, r5
     ab4:	94 2d       	mov	r25, r4
     ab6:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__umoddi3>
     aba:	80 e3       	ldi	r24, 0x30	; 48
     abc:	82 0f       	add	r24, r18
     abe:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
     ac2:	2f 81       	ldd	r18, Y+7	; 0x07
     ac4:	38 85       	ldd	r19, Y+8	; 0x08
     ac6:	49 2d       	mov	r20, r9
     ac8:	58 2d       	mov	r21, r8
     aca:	67 2d       	mov	r22, r7
     acc:	76 2d       	mov	r23, r6
     ace:	85 2d       	mov	r24, r5
     ad0:	94 2d       	mov	r25, r4
     ad2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__udivdi3>
     ad6:	2f 83       	std	Y+7, r18	; 0x07
     ad8:	38 87       	std	Y+8, r19	; 0x08
     ada:	94 2e       	mov	r9, r20
     adc:	85 2e       	mov	r8, r21
     ade:	76 2e       	mov	r7, r22
     ae0:	67 2e       	mov	r6, r23
     ae2:	58 2e       	mov	r5, r24
     ae4:	49 2e       	mov	r4, r25
     ae6:	2f 81       	ldd	r18, Y+7	; 0x07
     ae8:	38 85       	ldd	r19, Y+8	; 0x08
     aea:	49 2d       	mov	r20, r9
     aec:	58 2d       	mov	r21, r8
     aee:	67 2d       	mov	r22, r7
     af0:	76 2d       	mov	r23, r6
     af2:	85 2d       	mov	r24, r5
     af4:	94 2d       	mov	r25, r4
     af6:	a1 e0       	ldi	r26, 0x01	; 1
     af8:	0e 94 9e 18 	call	0x313c	; 0x313c <__cmpdi2_s8>
     afc:	49 f6       	brne	.-110    	; 0xa90 <LCD_enuSendNumber+0x1aa>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	28 96       	adiw	r28, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	9f 90       	pop	r9
     b22:	8f 90       	pop	r8
     b24:	7f 90       	pop	r7
     b26:	6f 90       	pop	r6
     b28:	5f 90       	pop	r5
     b2a:	4f 90       	pop	r4
     b2c:	3f 90       	pop	r3
     b2e:	2f 90       	pop	r2
     b30:	08 95       	ret

00000b32 <LCD_enuSetPosition>:
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	98 0f       	add	r25, r24
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	70 f4       	brcc	.+28     	; 0xb56 <LCD_enuSetPosition+0x24>
     b3a:	61 31       	cpi	r22, 0x11	; 17
     b3c:	70 f4       	brcc	.+28     	; 0xb5a <LCD_enuSetPosition+0x28>
     b3e:	66 23       	and	r22, r22
     b40:	71 f0       	breq	.+28     	; 0xb5e <LCD_enuSetPosition+0x2c>
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	19 f4       	brne	.+6      	; 0xb4c <LCD_enuSetPosition+0x1a>
     b46:	2f e7       	ldi	r18, 0x7F	; 127
     b48:	26 0f       	add	r18, r22
     b4a:	0a c0       	rjmp	.+20     	; 0xb60 <LCD_enuSetPosition+0x2e>
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	41 f4       	brne	.+16     	; 0xb60 <LCD_enuSetPosition+0x2e>
     b50:	2f eb       	ldi	r18, 0xBF	; 191
     b52:	26 0f       	add	r18, r22
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <LCD_enuSetPosition+0x2e>
     b56:	20 e8       	ldi	r18, 0x80	; 128
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <LCD_enuSetPosition+0x2e>
     b5a:	20 e8       	ldi	r18, 0x80	; 128
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <LCD_enuSetPosition+0x2e>
     b5e:	20 e8       	ldi	r18, 0x80	; 128
     b60:	82 2f       	mov	r24, r18
     b62:	0e 94 19 04 	call	0x832	; 0x832 <LCD_enuSendCommand>
     b66:	8f ec       	ldi	r24, 0xCF	; 207
     b68:	97 e0       	ldi	r25, 0x07	; 7
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <LCD_enuSetPosition+0x38>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <LCD_enuSetPosition+0x3e>
     b70:	00 00       	nop
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	08 95       	ret

00000b76 <LCD_enuClearScreen>:

ES_t LCD_enuClearScreen(void)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;
    LCD_enuSendCommand(lcd_Clear);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e 94 19 04 	call	0x832	; 0x832 <LCD_enuSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b7c:	8f e9       	ldi	r24, 0x9F	; 159
     b7e:	9f e0       	ldi	r25, 0x0F	; 15
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <LCD_enuClearScreen+0xa>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <LCD_enuClearScreen+0x10>
     b86:	00 00       	nop
    _delay_ms(2); // wait more than 1.53 ms

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	08 95       	ret

00000b8c <LCD_enuInit>:
     b8c:	2f e7       	ldi	r18, 0x7F	; 127
     b8e:	88 e3       	ldi	r24, 0x38	; 56
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	80 40       	sbci	r24, 0x00	; 0
     b96:	90 40       	sbci	r25, 0x00	; 0
     b98:	e1 f7       	brne	.-8      	; 0xb92 <LCD_enuInit+0x6>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <LCD_enuInit+0x10>
     b9c:	00 00       	nop

#elif LCD_MODE == 4

    // 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
    _delay_ms(50);
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN4, DIO_u8OUTPUT);
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	64 e0       	ldi	r22, 0x04	; 4
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN5, DIO_u8OUTPUT);
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	65 e0       	ldi	r22, 0x05	; 5
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN6, DIO_u8OUTPUT);
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	66 e0       	ldi	r22, 0x06	; 6
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN7, DIO_u8OUTPUT);
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	67 e0       	ldi	r22, 0x07	; 7
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RS, DIO_u8OUTPUT);
     bc6:	41 e0       	ldi	r20, 0x01	; 1
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RW, DIO_u8OUTPUT);
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_EN, DIO_u8OUTPUT);
     bda:	41 e0       	ldi	r20, 0x01	; 1
     bdc:	62 e0       	ldi	r22, 0x02	; 2
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_Enu_SetPinDirection>

    /*return home*/
    LCD_enuSendCommand(lcd_Home);
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	0e 94 19 04 	call	0x832	; 0x832 <LCD_enuSendCommand>
     bea:	8f e5       	ldi	r24, 0x5F	; 95
     bec:	9a ee       	ldi	r25, 0xEA	; 234
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <LCD_enuInit+0x62>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <LCD_enuInit+0x68>
     bf4:	00 00       	nop
    _delay_ms(30);

    /*FUNCTION SET Command*/
    LCD_enuSendCommand(FOUR_BITS); // 4 Bit Mode
     bf6:	88 e2       	ldi	r24, 0x28	; 40
     bf8:	0e 94 19 04 	call	0x832	; 0x832 <LCD_enuSendCommand>
     bfc:	8f ec       	ldi	r24, 0xCF	; 207
     bfe:	97 e0       	ldi	r25, 0x07	; 7
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <LCD_enuInit+0x74>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <LCD_enuInit+0x7a>
     c06:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY & Cursor (ON / OFF) Control */
    LCD_enuSendCommand(lcd_DisplayOn_CursorOff);
     c08:	8c e0       	ldi	r24, 0x0C	; 12
     c0a:	0e 94 19 04 	call	0x832	; 0x832 <LCD_enuSendCommand>
     c0e:	8f ec       	ldi	r24, 0xCF	; 207
     c10:	97 e0       	ldi	r25, 0x07	; 7
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <LCD_enuInit+0x86>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <LCD_enuInit+0x8c>
     c18:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY CLEAR */
    LCD_enuClearScreen();
     c1a:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>

    /* ENTRY MODE  Set*/
    LCD_enuSendCommand(lcd_EntryMode);
     c1e:	86 e0       	ldi	r24, 0x06	; 6
     c20:	0e 94 19 04 	call	0x832	; 0x832 <LCD_enuSendCommand>
     c24:	8f ec       	ldi	r24, 0xCF	; 207
     c26:	97 e0       	ldi	r25, 0x07	; 7
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <LCD_enuInit+0x9c>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <LCD_enuInit+0xa2>
     c2e:	00 00       	nop
#endif

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	08 95       	ret

00000c34 <display>:
	}
}

void display(ELEMENT_TYPE ch)
{
	printf("%f  ", ch.f64_element);
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	7f 93       	push	r23
     c3a:	6f 93       	push	r22
     c3c:	89 e8       	ldi	r24, 0x89	; 137
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	0e 94 33 1a 	call	0x3466	; 0x3466 <printf>
}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	08 95       	ret

00000c56 <reverse>:
#include "APP.h"
u8 array_num[16],flag1=0;
// A utility function to reverse a string
void reverse(char *str, int len)
{
	int i = 0, j = len - 1, temp;
     c56:	61 50       	subi	r22, 0x01	; 1
     c58:	71 09       	sbc	r23, r1
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
	while (i < j)
     c5e:	0e c0       	rjmp	.+28     	; 0xc7c <reverse+0x26>
	{
		temp = str[i];
     c60:	dc 01       	movw	r26, r24
     c62:	a2 0f       	add	r26, r18
     c64:	b3 1f       	adc	r27, r19
     c66:	4c 91       	ld	r20, X
		str[i] = str[j];
     c68:	fc 01       	movw	r30, r24
     c6a:	e6 0f       	add	r30, r22
     c6c:	f7 1f       	adc	r31, r23
     c6e:	50 81       	ld	r21, Z
     c70:	5c 93       	st	X, r21
		str[j] = temp;
     c72:	40 83       	st	Z, r20
		i++;
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
		j--;
     c78:	61 50       	subi	r22, 0x01	; 1
     c7a:	71 09       	sbc	r23, r1
u8 array_num[16],flag1=0;
// A utility function to reverse a string
void reverse(char *str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j)
     c7c:	26 17       	cp	r18, r22
     c7e:	37 07       	cpc	r19, r23
     c80:	7c f3       	brlt	.-34     	; 0xc60 <reverse+0xa>
		str[i] = str[j];
		str[j] = temp;
		i++;
		j--;
	}
}
     c82:	08 95       	ret

00000c84 <intToStr>:

// Converts a given integer x to string str[]. d is the number
// of digits required in the output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	8b 01       	movw	r16, r22
     c8e:	9a 01       	movw	r18, r20
	int i = 0;
     c90:	c0 e0       	ldi	r28, 0x00	; 0
     c92:	d0 e0       	ldi	r29, 0x00	; 0
	while (x)
     c94:	0c c0       	rjmp	.+24     	; 0xcae <intToStr+0x2a>
	{
		str[i++] = (x % 10) + '0';
     c96:	f8 01       	movw	r30, r16
     c98:	ec 0f       	add	r30, r28
     c9a:	fd 1f       	adc	r31, r29
     c9c:	6a e0       	ldi	r22, 0x0A	; 10
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <__divmodhi4>
     ca4:	80 5d       	subi	r24, 0xD0	; 208
     ca6:	80 83       	st	Z, r24
		x = x / 10;
     ca8:	86 2f       	mov	r24, r22
     caa:	97 2f       	mov	r25, r23
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
	{
		str[i++] = (x % 10) + '0';
     cac:	21 96       	adiw	r28, 0x01	; 1
// of digits required in the output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	91 f7       	brne	.-28     	; 0xc96 <intToStr+0x12>
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <intToStr+0x3c>
	}

	// If the number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
		str[i++] = '0';
     cb4:	f8 01       	movw	r30, r16
     cb6:	ec 0f       	add	r30, r28
     cb8:	fd 1f       	adc	r31, r29
     cba:	80 e3       	ldi	r24, 0x30	; 48
     cbc:	80 83       	st	Z, r24
     cbe:	21 96       	adiw	r28, 0x01	; 1
		x = x / 10;
	}

	// If the number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     cc0:	c2 17       	cp	r28, r18
     cc2:	d3 07       	cpc	r29, r19
     cc4:	bc f3       	brlt	.-18     	; 0xcb4 <intToStr+0x30>
		str[i++] = '0';

	reverse(str, i);
     cc6:	be 01       	movw	r22, r28
     cc8:	c8 01       	movw	r24, r16
     cca:	0e 94 2b 06 	call	0xc56	; 0xc56 <reverse>
	str[i] = '\0';
     cce:	f8 01       	movw	r30, r16
     cd0:	ec 0f       	add	r30, r28
     cd2:	fd 1f       	adc	r31, r29
     cd4:	10 82       	st	Z, r1
	return i;
}
     cd6:	ce 01       	movw	r24, r28
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char *res, int afterpoint)
{
     ce2:	4f 92       	push	r4
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	6b 01       	movw	r12, r22
     d04:	7c 01       	movw	r14, r24
     d06:	8a 01       	movw	r16, r20
     d08:	e9 01       	movw	r28, r18
	if (n < 0)
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	a9 01       	movw	r20, r18
     d10:	0e 94 3a 14 	call	0x2874	; 0x2874 <__cmpsf2>
     d14:	88 23       	and	r24, r24
     d16:	24 f4       	brge	.+8      	; 0xd20 <ftoa+0x3e>
		n *= -1;
     d18:	f7 fa       	bst	r15, 7
     d1a:	f0 94       	com	r15
     d1c:	f7 f8       	bld	r15, 7
     d1e:	f0 94       	com	r15
	// Extract integer part
	int ipart = (int)n;
     d20:	c7 01       	movw	r24, r14
     d22:	b6 01       	movw	r22, r12
     d24:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixsfsi>
     d28:	4b 01       	movw	r8, r22
     d2a:	5c 01       	movw	r10, r24

	// Extract floating part
	float fpart = n - (float)ipart;
     d2c:	07 2e       	mov	r0, r23
     d2e:	00 0c       	add	r0, r0
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__floatsisf>
     d38:	9b 01       	movw	r18, r22
     d3a:	ac 01       	movw	r20, r24
     d3c:	c7 01       	movw	r24, r14
     d3e:	b6 01       	movw	r22, r12
     d40:	0e 94 cd 13 	call	0x279a	; 0x279a <__subsf3>
     d44:	2b 01       	movw	r4, r22
     d46:	3c 01       	movw	r6, r24

	// Convert integer part to string
	int i = intToStr(ipart, res, 0);
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	b8 01       	movw	r22, r16
     d4e:	c4 01       	movw	r24, r8
     d50:	0e 94 42 06 	call	0xc84	; 0xc84 <intToStr>
     d54:	7c 01       	movw	r14, r24

	// Check for display option after point
	if (afterpoint != 0)
     d56:	20 97       	sbiw	r28, 0x00	; 0
     d58:	39 f1       	breq	.+78     	; 0xda8 <ftoa+0xc6>
	{
		res[i] = '.'; // Add dot
     d5a:	f8 01       	movw	r30, r16
     d5c:	e8 0f       	add	r30, r24
     d5e:	f9 1f       	adc	r31, r25
     d60:	8e e2       	ldi	r24, 0x2E	; 46
     d62:	80 83       	st	Z, r24

		// Get the value of fraction part up to given number of points after dot.
		fpart = fpart * pow(10, afterpoint);
     d64:	be 01       	movw	r22, r28
     d66:	0d 2e       	mov	r0, r29
     d68:	00 0c       	add	r0, r0
     d6a:	88 0b       	sbc	r24, r24
     d6c:	99 0b       	sbc	r25, r25
     d6e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__floatsisf>
     d72:	9b 01       	movw	r18, r22
     d74:	ac 01       	movw	r20, r24
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e2       	ldi	r24, 0x20	; 32
     d7c:	91 e4       	ldi	r25, 0x41	; 65
     d7e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <pow>
     d82:	9b 01       	movw	r18, r22
     d84:	ac 01       	movw	r20, r24
     d86:	c3 01       	movw	r24, r6
     d88:	b2 01       	movw	r22, r4
     d8a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>

		intToStr((int)fpart, res + i + 1, afterpoint);
     d8e:	2f ef       	ldi	r18, 0xFF	; 255
     d90:	e2 1a       	sub	r14, r18
     d92:	f2 0a       	sbc	r15, r18
     d94:	e0 0e       	add	r14, r16
     d96:	f1 1e       	adc	r15, r17
     d98:	0e 94 b1 14 	call	0x2962	; 0x2962 <__fixsfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	ae 01       	movw	r20, r28
     da2:	b7 01       	movw	r22, r14
     da4:	0e 94 42 06 	call	0xc84	; 0xc84 <intToStr>
	}
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	08 95       	ret

00000dca <Is_digit>:
{
	printf("%f  ", ch.f64_element);
}
int Is_digit(u8 ch)
{
	return (!(ch < '0' || ch > '9'));
     dca:	80 53       	subi	r24, 0x30	; 48
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	8a 30       	cpi	r24, 0x0A	; 10
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <Is_digit+0xa>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
}
     dd4:	89 2f       	mov	r24, r25
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	08 95       	ret

00000dda <Is_unery_operator>:

int Is_unery_operator(u8 op)
{
	return (op == '+' || op == '-' || op == '*' || op == '/' || op == '^');
     dda:	8b 32       	cpi	r24, 0x2B	; 43
     ddc:	59 f0       	breq	.+22     	; 0xdf4 <Is_unery_operator+0x1a>
     dde:	8d 32       	cpi	r24, 0x2D	; 45
     de0:	61 f0       	breq	.+24     	; 0xdfa <Is_unery_operator+0x20>
     de2:	8a 32       	cpi	r24, 0x2A	; 42
     de4:	69 f0       	breq	.+26     	; 0xe00 <Is_unery_operator+0x26>
     de6:	8f 32       	cpi	r24, 0x2F	; 47
     de8:	71 f0       	breq	.+28     	; 0xe06 <Is_unery_operator+0x2c>
     dea:	8e 35       	cpi	r24, 0x5E	; 94
     dec:	79 f4       	brne	.+30     	; 0xe0c <Is_unery_operator+0x32>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	08 95       	ret
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	08 95       	ret
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	08 95       	ret
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	08 95       	ret
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	08 95       	ret
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
}
     e10:	08 95       	ret

00000e12 <Precedance_element1_is_grater>:

int Precedance_element1_is_grater(ELEMENT_TYPE element_1, ELEMENT_TYPE element_2)
{
	if (element_1.u8_element == '^')
     e12:	6e 35       	cpi	r22, 0x5E	; 94
     e14:	99 f0       	breq	.+38     	; 0xe3c <Precedance_element1_is_grater+0x2a>
		return 1;
	else if (element_1.u8_element == '*' || element_1.u8_element == '/')
     e16:	6a 32       	cpi	r22, 0x2A	; 42
     e18:	11 f0       	breq	.+4      	; 0xe1e <Precedance_element1_is_grater+0xc>
     e1a:	6f 32       	cpi	r22, 0x2F	; 47
     e1c:	31 f4       	brne	.+12     	; 0xe2a <Precedance_element1_is_grater+0x18>
	{
		return (!(element_2.u8_element == '^'));
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	2e 35       	cpi	r18, 0x5E	; 94
     e22:	09 f4       	brne	.+2      	; 0xe26 <Precedance_element1_is_grater+0x14>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	08 95       	ret
	}
	else
	{
		return (!(element_2.u8_element == '^' || element_2.u8_element == '*' || element_2.u8_element == '/'));
     e2a:	2e 35       	cpi	r18, 0x5E	; 94
     e2c:	51 f0       	breq	.+20     	; 0xe42 <Precedance_element1_is_grater+0x30>
     e2e:	2a 32       	cpi	r18, 0x2A	; 42
     e30:	59 f0       	breq	.+22     	; 0xe48 <Precedance_element1_is_grater+0x36>
     e32:	2f 32       	cpi	r18, 0x2F	; 47
     e34:	61 f4       	brne	.+24     	; 0xe4e <Precedance_element1_is_grater+0x3c>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	08 95       	ret
}

int Precedance_element1_is_grater(ELEMENT_TYPE element_1, ELEMENT_TYPE element_2)
{
	if (element_1.u8_element == '^')
		return 1;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	08 95       	ret
	{
		return (!(element_2.u8_element == '^'));
	}
	else
	{
		return (!(element_2.u8_element == '^' || element_2.u8_element == '*' || element_2.u8_element == '/'));
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	08 95       	ret
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	08 95       	ret
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     e52:	08 95       	ret

00000e54 <Infix_To_Postfix>:
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
}

void Infix_To_Postfix(u8 *array, Stack *postfix)
{
     e54:	7f 92       	push	r7
     e56:	8f 92       	push	r8
     e58:	9f 92       	push	r9
     e5a:	af 92       	push	r10
     e5c:	bf 92       	push	r11
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	2e 97       	sbiw	r28, 0x0e	; 14
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	8c 01       	movw	r16, r24
     e80:	6b 01       	movw	r12, r22
	Stack check;
	ELEMENT_TYPE top_element, poped_element, element;
	u8 flag1 = 0, flag2 = 0;
	stack_init(&check);
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	0e 94 f6 12 	call	0x25ec	; 0x25ec <stack_init>
	if (array[0] == '-')
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 81       	ld	r24, Z
     e8e:	8d 32       	cpi	r24, 0x2D	; 45
     e90:	29 f4       	brne	.+10     	; 0xe9c <Infix_To_Postfix+0x48>
	{
		flag1 = 1;
		array++;
     e92:	0f 5f       	subi	r16, 0xFF	; 255
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
	ELEMENT_TYPE top_element, poped_element, element;
	u8 flag1 = 0, flag2 = 0;
	stack_init(&check);
	if (array[0] == '-')
	{
		flag1 = 1;
     e96:	77 24       	eor	r7, r7
     e98:	73 94       	inc	r7
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <Infix_To_Postfix+0x4a>

void Infix_To_Postfix(u8 *array, Stack *postfix)
{
	Stack check;
	ELEMENT_TYPE top_element, poped_element, element;
	u8 flag1 = 0, flag2 = 0;
     e9c:	71 2c       	mov	r7, r1
				continue;
			}
			else if ((Is_unery_operator(*(array - 1))) && element.u8_element == '-')
			{
				array++;
				flag2 = 1;
     e9e:	e1 2c       	mov	r14, r1
     ea0:	8c c0       	rjmp	.+280    	; 0xfba <Infix_To_Postfix+0x166>
		flag1 = 1;
		array++;
	}
	while (*array)
	{
		if (Is_digit(*array) || (*array == '.'))
     ea2:	8f 2d       	mov	r24, r15
     ea4:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
     ea8:	89 2b       	or	r24, r25
     eaa:	19 f4       	brne	.+6      	; 0xeb2 <Infix_To_Postfix+0x5e>
     eac:	fe e2       	ldi	r31, 0x2E	; 46
     eae:	ff 12       	cpse	r15, r31
     eb0:	2b c0       	rjmp	.+86     	; 0xf08 <Infix_To_Postfix+0xb4>
		{
			element.f64_element = atof(array);
     eb2:	c8 01       	movw	r24, r16
     eb4:	0e 94 df 19 	call	0x33be	; 0x33be <atof>
     eb8:	4b 01       	movw	r8, r22
     eba:	5c 01       	movw	r10, r24
			if (flag1 == 1)
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	72 12       	cpse	r7, r18
     ec0:	06 c0       	rjmp	.+12     	; 0xece <Infix_To_Postfix+0x7a>
			{
				element.f64_element *= -1;
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	b0 58       	subi	r27, 0x80	; 128
     ec8:	4c 01       	movw	r8, r24
     eca:	5d 01       	movw	r10, r26
				flag1 = 0;
     ecc:	71 2c       	mov	r7, r1
			}
			if (flag2 == 1)
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	e8 12       	cpse	r14, r24
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <Infix_To_Postfix+0x90>
			{
				element.f64_element *= -1;
     ed4:	b7 fa       	bst	r11, 7
     ed6:	b0 94       	com	r11
     ed8:	b7 f8       	bld	r11, 7
     eda:	b0 94       	com	r11
				flag2 = 0;
     edc:	e1 2c       	mov	r14, r1
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <Infix_To_Postfix+0x90>
			}
			while (Is_digit(*array) || (*array == '.'))
			{
				array++;
     ee0:	0f 5f       	subi	r16, 0xFF	; 255
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
			if (flag2 == 1)
			{
				element.f64_element *= -1;
				flag2 = 0;
			}
			while (Is_digit(*array) || (*array == '.'))
     ee4:	f8 01       	movw	r30, r16
     ee6:	f0 80       	ld	r15, Z
     ee8:	8f 2d       	mov	r24, r15
     eea:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
     eee:	89 2b       	or	r24, r25
     ef0:	b9 f7       	brne	.-18     	; 0xee0 <Infix_To_Postfix+0x8c>
     ef2:	fe e2       	ldi	r31, 0x2E	; 46
     ef4:	ff 16       	cp	r15, r31
     ef6:	a1 f3       	breq	.-24     	; 0xee0 <Infix_To_Postfix+0x8c>
			{
				array++;
			}
			array--;
     ef8:	01 50       	subi	r16, 0x01	; 1
     efa:	11 09       	sbc	r17, r1
			push_stack(postfix, element);
     efc:	b5 01       	movw	r22, r10
     efe:	a4 01       	movw	r20, r8
     f00:	c6 01       	movw	r24, r12
     f02:	0e 94 13 13 	call	0x2626	; 0x2626 <push_stack>
     f06:	57 c0       	rjmp	.+174    	; 0xfb6 <Infix_To_Postfix+0x162>
		}
		else if (Is_unery_operator(*array))
     f08:	8f 2d       	mov	r24, r15
     f0a:	0e 94 ed 06 	call	0xdda	; 0xdda <Is_unery_operator>
     f0e:	89 2b       	or	r24, r25
     f10:	09 f4       	brne	.+2      	; 0xf14 <Infix_To_Postfix+0xc0>
     f12:	51 c0       	rjmp	.+162    	; 0xfb6 <Infix_To_Postfix+0x162>
		{
			element.u8_element = *array;
     f14:	8f 2c       	mov	r8, r15
			stack_top(&check, &top_element);
     f16:	be 01       	movw	r22, r28
     f18:	69 5f       	subi	r22, 0xF9	; 249
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	ce 01       	movw	r24, r28
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	0e 94 74 13 	call	0x26e8	; 0x26e8 <stack_top>
			if ((Is_unery_operator(*(array - 1))) && element.u8_element == '+')
     f24:	f8 01       	movw	r30, r16
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	80 81       	ld	r24, Z
     f2a:	0e 94 ed 06 	call	0xdda	; 0xdda <Is_unery_operator>
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	31 f0       	breq	.+12     	; 0xf3e <Infix_To_Postfix+0xea>
     f32:	2b e2       	ldi	r18, 0x2B	; 43
     f34:	f2 12       	cpse	r15, r18
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <Infix_To_Postfix+0xea>
			{
				array++;
     f38:	0f 5f       	subi	r16, 0xFF	; 255
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
				continue;
     f3c:	3e c0       	rjmp	.+124    	; 0xfba <Infix_To_Postfix+0x166>
			}
			else if ((Is_unery_operator(*(array - 1))) && element.u8_element == '-')
     f3e:	89 2b       	or	r24, r25
     f40:	e9 f0       	breq	.+58     	; 0xf7c <Infix_To_Postfix+0x128>
     f42:	8d e2       	ldi	r24, 0x2D	; 45
     f44:	f8 12       	cpse	r15, r24
     f46:	1a c0       	rjmp	.+52     	; 0xf7c <Infix_To_Postfix+0x128>
			{
				array++;
     f48:	0f 5f       	subi	r16, 0xFF	; 255
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
				flag2 = 1;
     f4c:	ee 24       	eor	r14, r14
     f4e:	e3 94       	inc	r14
				continue;
     f50:	34 c0       	rjmp	.+104    	; 0xfba <Infix_To_Postfix+0x166>
			}
			while (!stack_empty(&check) && Precedance_element1_is_grater(top_element, element))
			{
				pop_stack(&poped_element, &check);
     f52:	be 01       	movw	r22, r28
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	ce 01       	movw	r24, r28
     f5a:	0b 96       	adiw	r24, 0x0b	; 11
     f5c:	0e 94 43 13 	call	0x2686	; 0x2686 <pop_stack>
				push_stack(postfix, poped_element);
     f60:	4b 85       	ldd	r20, Y+11	; 0x0b
     f62:	5c 85       	ldd	r21, Y+12	; 0x0c
     f64:	6d 85       	ldd	r22, Y+13	; 0x0d
     f66:	7e 85       	ldd	r23, Y+14	; 0x0e
     f68:	c6 01       	movw	r24, r12
     f6a:	0e 94 13 13 	call	0x2626	; 0x2626 <push_stack>
				stack_top(&check, &top_element);
     f6e:	be 01       	movw	r22, r28
     f70:	69 5f       	subi	r22, 0xF9	; 249
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	0e 94 74 13 	call	0x26e8	; 0x26e8 <stack_top>
			{
				array++;
				flag2 = 1;
				continue;
			}
			while (!stack_empty(&check) && Precedance_element1_is_grater(top_element, element))
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	0e 94 00 13 	call	0x2600	; 0x2600 <stack_empty>
     f84:	81 11       	cpse	r24, r1
     f86:	0a c0       	rjmp	.+20     	; 0xf9c <Infix_To_Postfix+0x148>
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	a5 01       	movw	r20, r10
     f92:	94 01       	movw	r18, r8
     f94:	0e 94 09 07 	call	0xe12	; 0xe12 <Precedance_element1_is_grater>
     f98:	89 2b       	or	r24, r25
     f9a:	d9 f6       	brne	.-74     	; 0xf52 <Infix_To_Postfix+0xfe>
			{
				pop_stack(&poped_element, &check);
				push_stack(postfix, poped_element);
				stack_top(&check, &top_element);
			}
			push_stack(&check, element);
     f9c:	b5 01       	movw	r22, r10
     f9e:	a4 01       	movw	r20, r8
     fa0:	ce 01       	movw	r24, r28
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	0e 94 13 13 	call	0x2626	; 0x2626 <push_stack>
			stack_top(&check, &top_element);
     fa8:	be 01       	movw	r22, r28
     faa:	69 5f       	subi	r22, 0xF9	; 249
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	0e 94 74 13 	call	0x26e8	; 0x26e8 <stack_top>
		}
		array++;
     fb6:	0f 5f       	subi	r16, 0xFF	; 255
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
	if (array[0] == '-')
	{
		flag1 = 1;
		array++;
	}
	while (*array)
     fba:	f8 01       	movw	r30, r16
     fbc:	f0 80       	ld	r15, Z
     fbe:	f1 10       	cpse	r15, r1
     fc0:	70 cf       	rjmp	.-288    	; 0xea2 <Infix_To_Postfix+0x4e>
     fc2:	0e c0       	rjmp	.+28     	; 0xfe0 <Infix_To_Postfix+0x18c>
		}
		array++;
	}
	while (!stack_empty(&check))
	{
		pop_stack(&poped_element, &check);
     fc4:	be 01       	movw	r22, r28
     fc6:	6f 5f       	subi	r22, 0xFF	; 255
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	ce 01       	movw	r24, r28
     fcc:	0b 96       	adiw	r24, 0x0b	; 11
     fce:	0e 94 43 13 	call	0x2686	; 0x2686 <pop_stack>
		push_stack(postfix, poped_element);
     fd2:	4b 85       	ldd	r20, Y+11	; 0x0b
     fd4:	5c 85       	ldd	r21, Y+12	; 0x0c
     fd6:	6d 85       	ldd	r22, Y+13	; 0x0d
     fd8:	7e 85       	ldd	r23, Y+14	; 0x0e
     fda:	c6 01       	movw	r24, r12
     fdc:	0e 94 13 13 	call	0x2626	; 0x2626 <push_stack>
			push_stack(&check, element);
			stack_top(&check, &top_element);
		}
		array++;
	}
	while (!stack_empty(&check))
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	0e 94 00 13 	call	0x2600	; 0x2600 <stack_empty>
     fe8:	88 23       	and	r24, r24
     fea:	61 f3       	breq	.-40     	; 0xfc4 <Infix_To_Postfix+0x170>
	{
		pop_stack(&poped_element, &check);
		push_stack(postfix, poped_element);
	}
}
     fec:	2e 96       	adiw	r28, 0x0e	; 14
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	bf 90       	pop	r11
    100a:	af 90       	pop	r10
    100c:	9f 90       	pop	r9
    100e:	8f 90       	pop	r8
    1010:	7f 90       	pop	r7
    1012:	08 95       	ret

00001014 <DO_operation>:
	}
	pop_stack(&poped_element, &temp);
	return poped_element.f64_element;
}
f64 DO_operation(ELEMENT_TYPE poped_element1, ELEMENT_TYPE poped_element2, ELEMENT_TYPE poped_element)
{
    1014:	ef 92       	push	r14
    1016:	ee 2d       	mov	r30, r14
	switch (poped_element.u8_element)
    1018:	ed 32       	cpi	r30, 0x2D	; 45
    101a:	71 f0       	breq	.+28     	; 0x1038 <DO_operation+0x24>
    101c:	28 f4       	brcc	.+10     	; 0x1028 <DO_operation+0x14>
    101e:	ea 32       	cpi	r30, 0x2A	; 42
    1020:	71 f0       	breq	.+28     	; 0x103e <DO_operation+0x2a>
    1022:	eb 32       	cpi	r30, 0x2B	; 43
    1024:	31 f0       	breq	.+12     	; 0x1032 <DO_operation+0x1e>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <DO_operation+0x3c>
    1028:	ef 32       	cpi	r30, 0x2F	; 47
    102a:	61 f0       	breq	.+24     	; 0x1044 <DO_operation+0x30>
    102c:	ee 35       	cpi	r30, 0x5E	; 94
    102e:	69 f0       	breq	.+26     	; 0x104a <DO_operation+0x36>
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <DO_operation+0x3c>
	{
	case '+':
		return (poped_element1.f64_element + poped_element2.f64_element);
    1032:	0e 94 ce 13 	call	0x279c	; 0x279c <__addsf3>
    1036:	0d c0       	rjmp	.+26     	; 0x1052 <DO_operation+0x3e>
		break;
	case '-':
		return (poped_element1.f64_element - poped_element2.f64_element);
    1038:	0e 94 cd 13 	call	0x279a	; 0x279a <__subsf3>
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <DO_operation+0x3e>
		break;
	case '*':
		return (poped_element1.f64_element * poped_element2.f64_element);
    103e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <DO_operation+0x3e>
		break;
	case '/':
		return (poped_element1.f64_element / poped_element2.f64_element);
    1044:	0e 94 3f 14 	call	0x287e	; 0x287e <__divsf3>
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <DO_operation+0x3e>
		break;
	case '^':
		return (powf(poped_element1.f64_element, poped_element2.f64_element));
    104a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <pow>
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <DO_operation+0x3e>
		break;
	default:
		break;
	}
}
    1050:	04 c0       	rjmp	.+8      	; 0x105a <DO_operation+0x46>
    1052:	56 2f       	mov	r21, r22
    1054:	47 2f       	mov	r20, r23
    1056:	38 2f       	mov	r19, r24
    1058:	29 2f       	mov	r18, r25
    105a:	65 2f       	mov	r22, r21
    105c:	74 2f       	mov	r23, r20
    105e:	83 2f       	mov	r24, r19
    1060:	92 2f       	mov	r25, r18
    1062:	ef 90       	pop	r14
    1064:	08 95       	ret

00001066 <Evaluate_Postfix>:
		return (!(element_2.u8_element == '^' || element_2.u8_element == '*' || element_2.u8_element == '/'));
	}
}

f64 Evaluate_Postfix(Stack *postfix)
{
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	62 97       	sbiw	r28, 0x12	; 18
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	6c 01       	movw	r12, r24
	Stack temp;
	stack_init(&temp);
    1088:	ce 01       	movw	r24, r28
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <stack_init>
	ELEMENT_TYPE poped_element;
	while (!stack_empty(postfix))
    1090:	35 c0       	rjmp	.+106    	; 0x10fc <Evaluate_Postfix+0x96>
	{
		pop_stack(&poped_element, postfix);
    1092:	b6 01       	movw	r22, r12
    1094:	ce 01       	movw	r24, r28
    1096:	07 96       	adiw	r24, 0x07	; 7
    1098:	0e 94 43 13 	call	0x2686	; 0x2686 <pop_stack>
		if (!Is_unery_operator(poped_element.u8_element))
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	0e 94 ed 06 	call	0xdda	; 0xdda <Is_unery_operator>
    10a2:	89 2b       	or	r24, r25
    10a4:	49 f4       	brne	.+18     	; 0x10b8 <Evaluate_Postfix+0x52>
		{
			push_stack(&temp, poped_element);
    10a6:	4f 81       	ldd	r20, Y+7	; 0x07
    10a8:	58 85       	ldd	r21, Y+8	; 0x08
    10aa:	69 85       	ldd	r22, Y+9	; 0x09
    10ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	0e 94 13 13 	call	0x2626	; 0x2626 <push_stack>
    10b6:	22 c0       	rjmp	.+68     	; 0x10fc <Evaluate_Postfix+0x96>
		}
		else
		{
			ELEMENT_TYPE poped_element1, poped_element2, result;
			pop_stack(&poped_element2, &temp);
    10b8:	be 01       	movw	r22, r28
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	ce 01       	movw	r24, r28
    10c0:	0b 96       	adiw	r24, 0x0b	; 11
    10c2:	0e 94 43 13 	call	0x2686	; 0x2686 <pop_stack>
			pop_stack(&poped_element1, &temp);
    10c6:	be 01       	movw	r22, r28
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	ce 01       	movw	r24, r28
    10ce:	0f 96       	adiw	r24, 0x0f	; 15
    10d0:	0e 94 43 13 	call	0x2686	; 0x2686 <pop_stack>
			result.f64_element = DO_operation(poped_element1, poped_element2, poped_element);
    10d4:	ef 80       	ldd	r14, Y+7	; 0x07
    10d6:	f8 84       	ldd	r15, Y+8	; 0x08
    10d8:	09 85       	ldd	r16, Y+9	; 0x09
    10da:	1a 85       	ldd	r17, Y+10	; 0x0a
    10dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    10de:	3c 85       	ldd	r19, Y+12	; 0x0c
    10e0:	4d 85       	ldd	r20, Y+13	; 0x0d
    10e2:	5e 85       	ldd	r21, Y+14	; 0x0e
    10e4:	6f 85       	ldd	r22, Y+15	; 0x0f
    10e6:	78 89       	ldd	r23, Y+16	; 0x10
    10e8:	89 89       	ldd	r24, Y+17	; 0x11
    10ea:	9a 89       	ldd	r25, Y+18	; 0x12
    10ec:	0e 94 0a 08 	call	0x1014	; 0x1014 <DO_operation>
			push_stack(&temp, result);
    10f0:	ab 01       	movw	r20, r22
    10f2:	bc 01       	movw	r22, r24
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	0e 94 13 13 	call	0x2626	; 0x2626 <push_stack>
f64 Evaluate_Postfix(Stack *postfix)
{
	Stack temp;
	stack_init(&temp);
	ELEMENT_TYPE poped_element;
	while (!stack_empty(postfix))
    10fc:	c6 01       	movw	r24, r12
    10fe:	0e 94 00 13 	call	0x2600	; 0x2600 <stack_empty>
    1102:	88 23       	and	r24, r24
    1104:	31 f2       	breq	.-116    	; 0x1092 <Evaluate_Postfix+0x2c>
			pop_stack(&poped_element1, &temp);
			result.f64_element = DO_operation(poped_element1, poped_element2, poped_element);
			push_stack(&temp, result);
		}
	}
	pop_stack(&poped_element, &temp);
    1106:	be 01       	movw	r22, r28
    1108:	6f 5f       	subi	r22, 0xFF	; 255
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	ce 01       	movw	r24, r28
    110e:	07 96       	adiw	r24, 0x07	; 7
    1110:	0e 94 43 13 	call	0x2686	; 0x2686 <pop_stack>
	return poped_element.f64_element;
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    111c:	62 96       	adiw	r28, 0x12	; 18
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	08 95       	ret

0000113a <Mode1>:
		break;
	}
}

u8 Mode1(void)
{
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	e5 97       	sbiw	r28, 0x35	; 53
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key, count = 0, *ptr1 = NULL, flag = 0;
	u8 array[16] = {0};
    1162:	fe 01       	movw	r30, r28
    1164:	32 96       	adiw	r30, 0x02	; 2
    1166:	80 e1       	ldi	r24, 0x10	; 16
    1168:	df 01       	movw	r26, r30
    116a:	1d 92       	st	X+, r1
    116c:	8a 95       	dec	r24
    116e:	e9 f7       	brne	.-6      	; 0x116a <Mode1+0x30>
	u8 con[20];
	f64 res = 0;
	ELEMENT_TYPE temp;
	Stack s1, s2;
	stack_init(&s1);
    1170:	ce 01       	movw	r24, r28
    1172:	8a 96       	adiw	r24, 0x2a	; 42
    1174:	0e 94 f6 12 	call	0x25ec	; 0x25ec <stack_init>
	stack_init(&s2);
    1178:	ce 01       	movw	r24, r28
    117a:	c0 96       	adiw	r24, 0x30	; 48
    117c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <stack_init>
	if(flag1==1){
    1180:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <flag1>
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	21 f4       	brne	.+8      	; 0x1190 <Mode1+0x56>
		LCD_enuClearScreen();
    1188:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		flag1=0;
    118c:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <flag1>
	}
	LCD_enuSendCommand(lcd_DisplayOn_CursorOn);
    1190:	8e e0       	ldi	r24, 0x0E	; 14
    1192:	0e 94 19 04 	call	0x832	; 0x832 <LCD_enuSendCommand>
	LCD_enuSetPosition(1, 1);
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	}
}

u8 Mode1(void)
{
	u8 pressed_key, count = 0, *ptr1 = NULL, flag = 0;
    119e:	00 e0       	ldi	r16, 0x00	; 0
    11a0:	10 e0       	ldi	r17, 0x00	; 0
	LCD_enuSetPosition(1, 1);
	do
	{
		do
		{
			KPD_enu_GetPressed(&pressed_key);
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		} while (pressed_key == 0xff);
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	8f 3f       	cpi	r24, 0xFF	; 255
    11ae:	c9 f3       	breq	.-14     	; 0x11a2 <Mode1+0x68>
		if (pressed_key != ' ' && pressed_key != 'M' && pressed_key != '>' && pressed_key != '<' && pressed_key != '=' && pressed_key != 'G' && pressed_key != 'C')
    11b0:	80 32       	cpi	r24, 0x20	; 32
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <Mode1+0x7c>
    11b4:	66 c0       	rjmp	.+204    	; 0x1282 <Mode1+0x148>
    11b6:	8d 34       	cpi	r24, 0x4D	; 77
    11b8:	09 f4       	brne	.+2      	; 0x11bc <Mode1+0x82>
    11ba:	63 c0       	rjmp	.+198    	; 0x1282 <Mode1+0x148>
    11bc:	8e 33       	cpi	r24, 0x3E	; 62
    11be:	09 f4       	brne	.+2      	; 0x11c2 <Mode1+0x88>
    11c0:	60 c0       	rjmp	.+192    	; 0x1282 <Mode1+0x148>
    11c2:	8c 33       	cpi	r24, 0x3C	; 60
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <Mode1+0x8e>
    11c6:	5d c0       	rjmp	.+186    	; 0x1282 <Mode1+0x148>
    11c8:	8d 33       	cpi	r24, 0x3D	; 61
    11ca:	09 f4       	brne	.+2      	; 0x11ce <Mode1+0x94>
    11cc:	5a c0       	rjmp	.+180    	; 0x1282 <Mode1+0x148>
    11ce:	87 34       	cpi	r24, 0x47	; 71
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <Mode1+0x9a>
    11d2:	57 c0       	rjmp	.+174    	; 0x1282 <Mode1+0x148>
    11d4:	83 34       	cpi	r24, 0x43	; 67
    11d6:	09 f4       	brne	.+2      	; 0x11da <Mode1+0xa0>
    11d8:	54 c0       	rjmp	.+168    	; 0x1282 <Mode1+0x148>
		{
			if ((count == 0) && (pressed_key == '+' || pressed_key == '-' ||
    11da:	11 11       	cpse	r17, r1
    11dc:	2f c0       	rjmp	.+94     	; 0x123c <Mode1+0x102>
    11de:	8b 32       	cpi	r24, 0x2B	; 43
    11e0:	41 f0       	breq	.+16     	; 0x11f2 <Mode1+0xb8>
    11e2:	8d 32       	cpi	r24, 0x2D	; 45
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <Mode1+0xb8>
    11e6:	8a 32       	cpi	r24, 0x2A	; 42
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <Mode1+0xb8>
								 pressed_key == '*' || pressed_key == '/' || pressed_key == '^'))
    11ea:	8f 32       	cpi	r24, 0x2F	; 47
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <Mode1+0xb8>
    11ee:	8e 35       	cpi	r24, 0x5E	; 94
    11f0:	29 f5       	brne	.+74     	; 0x123c <Mode1+0x102>
			{
				LCD_enuClearScreen();
    11f2:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
				count = strlen(con);
    11f6:	de 01       	movw	r26, r28
    11f8:	52 96       	adiw	r26, 0x12	; 18
    11fa:	fd 01       	movw	r30, r26
    11fc:	01 90       	ld	r0, Z+
    11fe:	00 20       	and	r0, r0
    1200:	e9 f7       	brne	.-6      	; 0x11fc <Mode1+0xc2>
    1202:	31 97       	sbiw	r30, 0x01	; 1
    1204:	1e 2f       	mov	r17, r30
    1206:	1a 1b       	sub	r17, r26
				for (u8 i = 0; i < count; i++)
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	11 c0       	rjmp	.+34     	; 0x122e <Mode1+0xf4>
					array[i] = con[i];
    120c:	82 2f       	mov	r24, r18
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	e2 e1       	ldi	r30, 0x12	; 18
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	ec 0f       	add	r30, r28
    1216:	fd 1f       	adc	r31, r29
    1218:	e8 0f       	add	r30, r24
    121a:	f9 1f       	adc	r31, r25
    121c:	30 81       	ld	r19, Z
    121e:	e2 e0       	ldi	r30, 0x02	; 2
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	ec 0f       	add	r30, r28
    1224:	fd 1f       	adc	r31, r29
    1226:	e8 0f       	add	r30, r24
    1228:	f9 1f       	adc	r31, r25
    122a:	30 83       	st	Z, r19
			if ((count == 0) && (pressed_key == '+' || pressed_key == '-' ||
								 pressed_key == '*' || pressed_key == '/' || pressed_key == '^'))
			{
				LCD_enuClearScreen();
				count = strlen(con);
				for (u8 i = 0; i < count; i++)
    122c:	2f 5f       	subi	r18, 0xFF	; 255
    122e:	21 17       	cp	r18, r17
    1230:	68 f3       	brcs	.-38     	; 0x120c <Mode1+0xd2>
					array[i] = con[i];
				LCD_enuSendString(con);
    1232:	ce 01       	movw	r24, r28
    1234:	42 96       	adiw	r24, 0x12	; 18
    1236:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
    123a:	10 c0       	rjmp	.+32     	; 0x125c <Mode1+0x122>
			}
			else if ((count == 0))
    123c:	11 11       	cpse	r17, r1
    123e:	0e c0       	rjmp	.+28     	; 0x125c <Mode1+0x122>
			{
				LCD_enuClearScreen();
    1240:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
				for (u8 i = 0; i < 16; i++)
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	08 c0       	rjmp	.+16     	; 0x1258 <Mode1+0x11e>
					array[i] = 0;
    1248:	e2 e0       	ldi	r30, 0x02	; 2
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	ec 0f       	add	r30, r28
    124e:	fd 1f       	adc	r31, r29
    1250:	e8 0f       	add	r30, r24
    1252:	f1 1d       	adc	r31, r1
    1254:	10 82       	st	Z, r1
				LCD_enuSendString(con);
			}
			else if ((count == 0))
			{
				LCD_enuClearScreen();
				for (u8 i = 0; i < 16; i++)
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	80 31       	cpi	r24, 0x10	; 16
    125a:	b0 f3       	brcs	.-20     	; 0x1248 <Mode1+0x10e>
					array[i] = 0;
				res = 0;
			}
			LCD_enuSendData(pressed_key);
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
			array[count++] = pressed_key;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	81 0f       	add	r24, r17
    1266:	e2 e0       	ldi	r30, 0x02	; 2
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	ec 0f       	add	r30, r28
    126c:	fd 1f       	adc	r31, r29
    126e:	e1 0f       	add	r30, r17
    1270:	f1 1d       	adc	r31, r1
    1272:	99 81       	ldd	r25, Y+1	; 0x01
    1274:	90 83       	st	Z, r25
			flag = 0;
			if (count > 15)
    1276:	80 31       	cpi	r24, 0x10	; 16
    1278:	08 f0       	brcs	.+2      	; 0x127c <Mode1+0x142>
    127a:	af c0       	rjmp	.+350    	; 0x13da <Mode1+0x2a0>
				for (u8 i = 0; i < 16; i++)
					array[i] = 0;
				res = 0;
			}
			LCD_enuSendData(pressed_key);
			array[count++] = pressed_key;
    127c:	18 2f       	mov	r17, r24
			flag = 0;
    127e:	00 e0       	ldi	r16, 0x00	; 0
    1280:	b0 c0       	rjmp	.+352    	; 0x13e2 <Mode1+0x2a8>
			if (count > 15)
			{
				count = 0;
			}
		}
		else if (pressed_key == ' ')
    1282:	80 32       	cpi	r24, 0x20	; 32
    1284:	c1 f4       	brne	.+48     	; 0x12b6 <Mode1+0x17c>
		{
			LCD_enuClearScreen();
    1286:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			clear_stack(&s1);
    128a:	ce 01       	movw	r24, r28
    128c:	8a 96       	adiw	r24, 0x2a	; 42
    128e:	0e 94 af 13 	call	0x275e	; 0x275e <clear_stack>
			clear_stack(&s2);
    1292:	ce 01       	movw	r24, r28
    1294:	c0 96       	adiw	r24, 0x30	; 48
    1296:	0e 94 af 13 	call	0x275e	; 0x275e <clear_stack>
			res = 0;
			count = 0;
			for (u8 i = 0; i < 16; i++)
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	08 c0       	rjmp	.+16     	; 0x12ae <Mode1+0x174>
				array[i] = 0;
    129e:	e2 e0       	ldi	r30, 0x02	; 2
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	ec 0f       	add	r30, r28
    12a4:	fd 1f       	adc	r31, r29
    12a6:	e8 0f       	add	r30, r24
    12a8:	f1 1d       	adc	r31, r1
    12aa:	10 82       	st	Z, r1
			LCD_enuClearScreen();
			clear_stack(&s1);
			clear_stack(&s2);
			res = 0;
			count = 0;
			for (u8 i = 0; i < 16; i++)
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	80 31       	cpi	r24, 0x10	; 16
    12b0:	b0 f3       	brcs	.-20     	; 0x129e <Mode1+0x164>
		{
			LCD_enuClearScreen();
			clear_stack(&s1);
			clear_stack(&s2);
			res = 0;
			count = 0;
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	96 c0       	rjmp	.+300    	; 0x13e2 <Mode1+0x2a8>
			for (u8 i = 0; i < 16; i++)
				array[i] = 0;
		}
		else if (pressed_key == '>')
    12b6:	8e 33       	cpi	r24, 0x3E	; 62
    12b8:	91 f5       	brne	.+100    	; 0x131e <Mode1+0x1e4>
		{
			if (array[count + 1] != 0 && flag == 1)
    12ba:	21 2f       	mov	r18, r17
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	f9 01       	movw	r30, r18
    12c0:	31 96       	adiw	r30, 0x01	; 1
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	8c 0f       	add	r24, r28
    12c8:	9d 1f       	adc	r25, r29
    12ca:	e8 0f       	add	r30, r24
    12cc:	f9 1f       	adc	r31, r25
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	61 f0       	breq	.+24     	; 0x12ec <Mode1+0x1b2>
    12d4:	01 30       	cpi	r16, 0x01	; 1
    12d6:	51 f4       	brne	.+20     	; 0x12ec <Mode1+0x1b2>
			{
				count++;
    12d8:	ff 24       	eor	r15, r15
    12da:	f3 94       	inc	r15
    12dc:	f1 0e       	add	r15, r17
				LCD_enuSetPosition(1, count + 1);
    12de:	62 e0       	ldi	r22, 0x02	; 2
    12e0:	61 0f       	add	r22, r17
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
		}
		else if (pressed_key == '>')
		{
			if (array[count + 1] != 0 && flag == 1)
			{
				count++;
    12e8:	1f 2d       	mov	r17, r15
				LCD_enuSetPosition(1, count + 1);
    12ea:	7b c0       	rjmp	.+246    	; 0x13e2 <Mode1+0x2a8>
			}
			else if ((array[count + 1] == 0 && flag == 1))
    12ec:	81 11       	cpse	r24, r1
    12ee:	79 c0       	rjmp	.+242    	; 0x13e2 <Mode1+0x2a8>
    12f0:	01 30       	cpi	r16, 0x01	; 1
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <Mode1+0x1bc>
    12f4:	76 c0       	rjmp	.+236    	; 0x13e2 <Mode1+0x2a8>
			{
				if (array[count] != 0)
    12f6:	e2 e0       	ldi	r30, 0x02	; 2
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	ec 0f       	add	r30, r28
    12fc:	fd 1f       	adc	r31, r29
    12fe:	e2 0f       	add	r30, r18
    1300:	f3 1f       	adc	r31, r19
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <Mode1+0x1d0>
    1308:	6c c0       	rjmp	.+216    	; 0x13e2 <Mode1+0x2a8>
				{
					count++;
    130a:	ff 24       	eor	r15, r15
    130c:	f3 94       	inc	r15
    130e:	f1 0e       	add	r15, r17
					LCD_enuSetPosition(1, count + 1);
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	61 0f       	add	r22, r17
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			}
			else if ((array[count + 1] == 0 && flag == 1))
			{
				if (array[count] != 0)
				{
					count++;
    131a:	1f 2d       	mov	r17, r15
    131c:	62 c0       	rjmp	.+196    	; 0x13e2 <Mode1+0x2a8>
					LCD_enuSetPosition(1, count + 1);
				}
			}
		}
		else if (pressed_key == '<')
    131e:	8c 33       	cpi	r24, 0x3C	; 60
    1320:	61 f4       	brne	.+24     	; 0x133a <Mode1+0x200>
		{
			if (count > 0)
    1322:	11 23       	and	r17, r17
    1324:	09 f4       	brne	.+2      	; 0x1328 <Mode1+0x1ee>
    1326:	5c c0       	rjmp	.+184    	; 0x13e0 <Mode1+0x2a6>
			{
				count--;
    1328:	0f ef       	ldi	r16, 0xFF	; 255
    132a:	01 0f       	add	r16, r17
				LCD_enuSetPosition(1, count + 1);
    132c:	61 2f       	mov	r22, r17
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
		}
		else if (pressed_key == '<')
		{
			if (count > 0)
			{
				count--;
    1334:	10 2f       	mov	r17, r16
				LCD_enuSetPosition(1, count + 1);
			}
			flag = 1;
    1336:	01 e0       	ldi	r16, 0x01	; 1
    1338:	54 c0       	rjmp	.+168    	; 0x13e2 <Mode1+0x2a8>
		}
		else if (pressed_key == 'C')
    133a:	83 34       	cpi	r24, 0x43	; 67
    133c:	09 f0       	breq	.+2      	; 0x1340 <Mode1+0x206>
    133e:	4a c0       	rjmp	.+148    	; 0x13d4 <Mode1+0x29a>
		{

			if (count > 0)
    1340:	11 23       	and	r17, r17
    1342:	09 f4       	brne	.+2      	; 0x1346 <Mode1+0x20c>
    1344:	4e c0       	rjmp	.+156    	; 0x13e2 <Mode1+0x2a8>
			{
				count--;
    1346:	dd 24       	eor	r13, r13
    1348:	da 94       	dec	r13
    134a:	d1 0e       	add	r13, r17
				if (array[count + 1] == '\0')
    134c:	ed 2c       	mov	r14, r13
    134e:	f1 2c       	mov	r15, r1
    1350:	f7 01       	movw	r30, r14
    1352:	31 96       	adiw	r30, 0x01	; 1
    1354:	a2 e0       	ldi	r26, 0x02	; 2
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ac 0f       	add	r26, r28
    135a:	bd 1f       	adc	r27, r29
    135c:	ea 0f       	add	r30, r26
    135e:	fb 1f       	adc	r31, r27
    1360:	80 81       	ld	r24, Z
    1362:	81 11       	cpse	r24, r1
    1364:	14 c0       	rjmp	.+40     	; 0x138e <Mode1+0x254>
				{
					LCD_enuSetPosition(1, count + 1);
    1366:	61 2f       	mov	r22, r17
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
					LCD_enuSendData('\0');
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
					array[count] = '\0';
    1374:	e2 e0       	ldi	r30, 0x02	; 2
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	ec 0f       	add	r30, r28
    137a:	fd 1f       	adc	r31, r29
    137c:	ee 0d       	add	r30, r14
    137e:	ff 1d       	adc	r31, r15
    1380:	10 82       	st	Z, r1
					LCD_enuSetPosition(1, count + 1);
    1382:	61 2f       	mov	r22, r17
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
		else if (pressed_key == 'C')
		{

			if (count > 0)
			{
				count--;
    138a:	1d 2d       	mov	r17, r13
    138c:	2a c0       	rjmp	.+84     	; 0x13e2 <Mode1+0x2a8>
					LCD_enuSetPosition(1, count + 1);
				}
				else
				{
					count++;
					LCD_enuSendData('\0');
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
					array[count--] = '\0';
    1394:	e2 e0       	ldi	r30, 0x02	; 2
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ec 0f       	add	r30, r28
    139a:	fd 1f       	adc	r31, r29
    139c:	e1 0f       	add	r30, r17
    139e:	f1 1d       	adc	r31, r1
    13a0:	10 82       	st	Z, r1
					ptr1 = strchr(array, '\0');
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	ce 01       	movw	r24, r28
    13a8:	02 96       	adiw	r24, 0x02	; 2
    13aa:	0e 94 20 1a 	call	0x3440	; 0x3440 <strchr>
					strcat(array, ptr1 + 1);
    13ae:	bc 01       	movw	r22, r24
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	ce 01       	movw	r24, r28
    13b6:	02 96       	adiw	r24, 0x02	; 2
    13b8:	0e 94 15 1a 	call	0x342a	; 0x342a <strcat>
					LCD_enuClearScreen();
    13bc:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
					LCD_enuSendString(array);
    13c0:	ce 01       	movw	r24, r28
    13c2:	02 96       	adiw	r24, 0x02	; 2
    13c4:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
					LCD_enuSetPosition(1, count + 1);
    13c8:	61 2f       	mov	r22, r17
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
				}
				else
				{
					count++;
					LCD_enuSendData('\0');
					array[count--] = '\0';
    13d0:	1d 2d       	mov	r17, r13
    13d2:	07 c0       	rjmp	.+14     	; 0x13e2 <Mode1+0x2a8>
					LCD_enuSendString(array);
					LCD_enuSetPosition(1, count + 1);
				}
			}
		}
		else if (pressed_key == 'M')
    13d4:	8d 34       	cpi	r24, 0x4D	; 77
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <Mode1+0x2a8>
    13d8:	32 c2       	rjmp	.+1124   	; 0x183e <Mode1+0x704>
					array[i] = 0;
				res = 0;
			}
			LCD_enuSendData(pressed_key);
			array[count++] = pressed_key;
			flag = 0;
    13da:	00 e0       	ldi	r16, 0x00	; 0
			if (count > 15)
			{
				count = 0;
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <Mode1+0x2a8>
			if (count > 0)
			{
				count--;
				LCD_enuSetPosition(1, count + 1);
			}
			flag = 1;
    13e0:	01 e0       	ldi	r16, 0x01	; 1
		}
		else if (pressed_key == 'M')
		{
			return 1;
		}
	} while (pressed_key != '=');
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	8d 33       	cpi	r24, 0x3D	; 61
    13e6:	09 f0       	breq	.+2      	; 0x13ea <Mode1+0x2b0>
    13e8:	dc ce       	rjmp	.-584    	; 0x11a2 <Mode1+0x68>
	count = strlen(array);
    13ea:	de 01       	movw	r26, r28
    13ec:	12 96       	adiw	r26, 0x02	; 2
    13ee:	fd 01       	movw	r30, r26
    13f0:	01 90       	ld	r0, Z+
    13f2:	00 20       	and	r0, r0
    13f4:	e9 f7       	brne	.-6      	; 0x13f0 <Mode1+0x2b6>
    13f6:	31 97       	sbiw	r30, 0x01	; 1
    13f8:	ea 1b       	sub	r30, r26
    13fa:	fb 0b       	sbc	r31, r27
	array[count] = '\0';
    13fc:	6f 01       	movw	r12, r30
    13fe:	dd 24       	eor	r13, r13
    1400:	ac 0d       	add	r26, r12
    1402:	bd 1d       	adc	r27, r13
    1404:	1c 92       	st	X, r1
	if (count == 0)
    1406:	ee 23       	and	r30, r30
    1408:	09 f4       	brne	.+2      	; 0x140c <Mode1+0x2d2>
    140a:	1b c2       	rjmp	.+1078   	; 0x1842 <Mode1+0x708>
		return 0;
	if (strlen(array) == 1)
    140c:	de 01       	movw	r26, r28
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	fd 01       	movw	r30, r26
    1412:	01 90       	ld	r0, Z+
    1414:	00 20       	and	r0, r0
    1416:	e9 f7       	brne	.-6      	; 0x1412 <Mode1+0x2d8>
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	7f 01       	movw	r14, r30
    141c:	ea 1a       	sub	r14, r26
    141e:	fb 0a       	sbc	r15, r27
    1420:	b1 e0       	ldi	r27, 0x01	; 1
    1422:	eb 16       	cp	r14, r27
    1424:	f1 04       	cpc	r15, r1
    1426:	09 f0       	breq	.+2      	; 0x142a <Mode1+0x2f0>
    1428:	25 c1       	rjmp	.+586    	; 0x1674 <Mode1+0x53a>
	{
		if (array[0] == '*' || array[0] == '/' || array[0] == '^' || array[0] == '-' || array[0] == '+')
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	8a 32       	cpi	r24, 0x2A	; 42
    142e:	49 f0       	breq	.+18     	; 0x1442 <Mode1+0x308>
    1430:	8f 32       	cpi	r24, 0x2F	; 47
    1432:	39 f0       	breq	.+14     	; 0x1442 <Mode1+0x308>
    1434:	8e 35       	cpi	r24, 0x5E	; 94
    1436:	29 f0       	breq	.+10     	; 0x1442 <Mode1+0x308>
    1438:	8d 32       	cpi	r24, 0x2D	; 45
    143a:	19 f0       	breq	.+6      	; 0x1442 <Mode1+0x308>
    143c:	8b 32       	cpi	r24, 0x2B	; 43
    143e:	09 f0       	breq	.+2      	; 0x1442 <Mode1+0x308>
    1440:	1b c1       	rjmp	.+566    	; 0x1678 <Mode1+0x53e>
		{
			LCD_enuClearScreen();
    1442:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("SYNTAX ERROR");
    144e:	8e e8       	ldi	r24, 0x8E	; 142
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    145e:	8b e9       	ldi	r24, 0x9B	; 155
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	8f 3f       	cpi	r24, 0xFF	; 255
    1472:	c9 f3       	breq	.-14     	; 0x1466 <Mode1+0x32c>
			} while (pressed_key != ' ');
    1474:	80 32       	cpi	r24, 0x20	; 32
    1476:	b9 f7       	brne	.-18     	; 0x1466 <Mode1+0x32c>
			LCD_enuClearScreen();
    1478:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			return 0;
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	e2 c1       	rjmp	.+964    	; 0x1844 <Mode1+0x70a>
		}
	}
	for (u8 i = 0; i < strlen(array) - 1; i++)
	{
		if ((array[i] == '*' || array[i] == '/' || array[i] == '^') && (array[i + 1] == '*' || array[i + 1] == '/' || array[i + 1] == '^'))
    1480:	0a 2d       	mov	r16, r10
    1482:	10 e0       	ldi	r17, 0x00	; 0
    1484:	e2 e0       	ldi	r30, 0x02	; 2
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	ec 0f       	add	r30, r28
    148a:	fd 1f       	adc	r31, r29
    148c:	e0 0f       	add	r30, r16
    148e:	f1 1f       	adc	r31, r17
    1490:	80 81       	ld	r24, Z
    1492:	8a 32       	cpi	r24, 0x2A	; 42
    1494:	21 f0       	breq	.+8      	; 0x149e <Mode1+0x364>
    1496:	8f 32       	cpi	r24, 0x2F	; 47
    1498:	11 f0       	breq	.+4      	; 0x149e <Mode1+0x364>
    149a:	8e 35       	cpi	r24, 0x5E	; 94
    149c:	71 f5       	brne	.+92     	; 0x14fa <Mode1+0x3c0>
    149e:	f8 01       	movw	r30, r16
    14a0:	31 96       	adiw	r30, 0x01	; 1
    14a2:	22 e0       	ldi	r18, 0x02	; 2
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	2c 0f       	add	r18, r28
    14a8:	3d 1f       	adc	r19, r29
    14aa:	e2 0f       	add	r30, r18
    14ac:	f3 1f       	adc	r31, r19
    14ae:	90 81       	ld	r25, Z
    14b0:	9a 32       	cpi	r25, 0x2A	; 42
    14b2:	21 f0       	breq	.+8      	; 0x14bc <Mode1+0x382>
    14b4:	9f 32       	cpi	r25, 0x2F	; 47
    14b6:	11 f0       	breq	.+4      	; 0x14bc <Mode1+0x382>
    14b8:	9e 35       	cpi	r25, 0x5E	; 94
    14ba:	f9 f4       	brne	.+62     	; 0x14fa <Mode1+0x3c0>
		{
			LCD_enuClearScreen();
    14bc:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("SYNTAX ERROR");
    14c8:	8e e8       	ldi	r24, 0x8E	; 142
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    14d8:	8b e9       	ldi	r24, 0x9B	; 155
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	8f 3f       	cpi	r24, 0xFF	; 255
    14ec:	c9 f3       	breq	.-14     	; 0x14e0 <Mode1+0x3a6>
			} while (pressed_key != ' ');
    14ee:	80 32       	cpi	r24, 0x20	; 32
    14f0:	b9 f7       	brne	.-18     	; 0x14e0 <Mode1+0x3a6>
			LCD_enuClearScreen();
    14f2:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			return 0;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	a5 c1       	rjmp	.+842    	; 0x1844 <Mode1+0x70a>
		}
		else if (array[i] == '.')
    14fa:	8e 32       	cpi	r24, 0x2E	; 46
    14fc:	09 f0       	breq	.+2      	; 0x1500 <Mode1+0x3c6>
    14fe:	5a c0       	rjmp	.+180    	; 0x15b4 <Mode1+0x47a>
		{

			ptr1 = strchr(array + i + 1, '.');
    1500:	6e e2       	ldi	r22, 0x2E	; 46
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	c4 01       	movw	r24, r8
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	a2 e0       	ldi	r26, 0x02	; 2
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ac 0f       	add	r26, r28
    150e:	bd 1f       	adc	r27, r29
    1510:	8a 0f       	add	r24, r26
    1512:	9b 1f       	adc	r25, r27
    1514:	0e 94 20 1a 	call	0x3440	; 0x3440 <strchr>
			if (ptr1 != NULL)
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	09 f4       	brne	.+2      	; 0x151e <Mode1+0x3e4>
    151c:	a9 c0       	rjmp	.+338    	; 0x1670 <Mode1+0x536>
			{
				u8 j = (ptr1 - (array + i) - 1), f1 = 0;
    151e:	22 e0       	ldi	r18, 0x02	; 2
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	2c 0f       	add	r18, r28
    1524:	3d 1f       	adc	r19, r29
    1526:	82 0e       	add	r8, r18
    1528:	93 1e       	adc	r9, r19
    152a:	88 19       	sub	r24, r8
    152c:	99 09       	sbc	r25, r9
    152e:	bb 24       	eor	r11, r11
    1530:	ba 94       	dec	r11
    1532:	b8 0e       	add	r11, r24
    1534:	81 2c       	mov	r8, r1
				while (j)
    1536:	18 c0       	rjmp	.+48     	; 0x1568 <Mode1+0x42e>
				{
					if (Is_digit(array[i + j]))
    1538:	f8 01       	movw	r30, r16
    153a:	eb 0d       	add	r30, r11
    153c:	f1 1d       	adc	r31, r1
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	8c 0f       	add	r24, r28
    1544:	9d 1f       	adc	r25, r29
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	90 80       	ld	r9, Z
    154c:	89 2d       	mov	r24, r9
    154e:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
    1552:	89 2b       	or	r24, r25
    1554:	31 f4       	brne	.+12     	; 0x1562 <Mode1+0x428>
						f1 = 1;
					else if (Is_unery_operator(array[i + j]))
    1556:	89 2d       	mov	r24, r9
    1558:	0e 94 ed 06 	call	0xdda	; 0xdda <Is_unery_operator>
    155c:	89 2b       	or	r24, r25
    155e:	19 f0       	breq	.+6      	; 0x1566 <Mode1+0x42c>
    1560:	06 c0       	rjmp	.+12     	; 0x156e <Mode1+0x434>
			{
				u8 j = (ptr1 - (array + i) - 1), f1 = 0;
				while (j)
				{
					if (Is_digit(array[i + j]))
						f1 = 1;
    1562:	88 24       	eor	r8, r8
    1564:	83 94       	inc	r8
					else if (Is_unery_operator(array[i + j]))
					{
						f1 = 0;
						break;
					}
					j--;
    1566:	ba 94       	dec	r11

			ptr1 = strchr(array + i + 1, '.');
			if (ptr1 != NULL)
			{
				u8 j = (ptr1 - (array + i) - 1), f1 = 0;
				while (j)
    1568:	b1 10       	cpse	r11, r1
    156a:	e6 cf       	rjmp	.-52     	; 0x1538 <Mode1+0x3fe>
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <Mode1+0x436>
				{
					if (Is_digit(array[i + j]))
						f1 = 1;
					else if (Is_unery_operator(array[i + j]))
					{
						f1 = 0;
    156e:	81 2c       	mov	r8, r1
						break;
					}
					j--;
				}
				if (f1 == 1)
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	89 12       	cpse	r8, r25
    1574:	7d c0       	rjmp	.+250    	; 0x1670 <Mode1+0x536>
				{
					LCD_enuClearScreen();
    1576:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
					LCD_enuSetPosition(1, 1);
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
					LCD_enuSendString("SYNTAX ERROR");
    1582:	8e e8       	ldi	r24, 0x8E	; 142
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
					LCD_enuSetPosition(2, 1);
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
					LCD_enuSendString("PRESS AC");
    1592:	8b e9       	ldi	r24, 0x9B	; 155
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
					do
					{
						do
						{
							KPD_enu_GetPressed(&pressed_key);
    159a:	ce 01       	movw	r24, r28
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
						} while (pressed_key == 0xff);
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	8f 3f       	cpi	r24, 0xFF	; 255
    15a6:	c9 f3       	breq	.-14     	; 0x159a <Mode1+0x460>
					} while (pressed_key != ' ');
    15a8:	80 32       	cpi	r24, 0x20	; 32
    15aa:	b9 f7       	brne	.-18     	; 0x159a <Mode1+0x460>
					LCD_enuClearScreen();
    15ac:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
					return 0;
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	48 c1       	rjmp	.+656    	; 0x1844 <Mode1+0x70a>
				}
			}
		}
		else if (array[count - 1] == '*' || array[count - 1] == '/' || array[count - 1] == '^' || array[count - 1] == '-' || array[count - 1] == '+')
    15b4:	f6 01       	movw	r30, r12
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	a2 e0       	ldi	r26, 0x02	; 2
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ac 0f       	add	r26, r28
    15be:	bd 1f       	adc	r27, r29
    15c0:	ea 0f       	add	r30, r26
    15c2:	fb 1f       	adc	r31, r27
    15c4:	90 81       	ld	r25, Z
    15c6:	9a 32       	cpi	r25, 0x2A	; 42
    15c8:	41 f0       	breq	.+16     	; 0x15da <Mode1+0x4a0>
    15ca:	9f 32       	cpi	r25, 0x2F	; 47
    15cc:	31 f0       	breq	.+12     	; 0x15da <Mode1+0x4a0>
    15ce:	9e 35       	cpi	r25, 0x5E	; 94
    15d0:	21 f0       	breq	.+8      	; 0x15da <Mode1+0x4a0>
    15d2:	9d 32       	cpi	r25, 0x2D	; 45
    15d4:	11 f0       	breq	.+4      	; 0x15da <Mode1+0x4a0>
    15d6:	9b 32       	cpi	r25, 0x2B	; 43
    15d8:	f9 f4       	brne	.+62     	; 0x1618 <Mode1+0x4de>
		{
			LCD_enuClearScreen();
    15da:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("SYNTAX ERROR");
    15e6:	8e e8       	ldi	r24, 0x8E	; 142
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    15f6:	8b e9       	ldi	r24, 0x9B	; 155
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    15fe:	ce 01       	movw	r24, r28
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	c9 f3       	breq	.-14     	; 0x15fe <Mode1+0x4c4>
			} while (pressed_key != ' ');
    160c:	80 32       	cpi	r24, 0x20	; 32
    160e:	b9 f7       	brne	.-18     	; 0x15fe <Mode1+0x4c4>
			LCD_enuClearScreen();
    1610:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			return 0;
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	16 c1       	rjmp	.+556    	; 0x1844 <Mode1+0x70a>
		}
		else if ((array[i] == '/') && (array[i + 1] == '0'))
    1618:	8f 32       	cpi	r24, 0x2F	; 47
    161a:	51 f5       	brne	.+84     	; 0x1670 <Mode1+0x536>
    161c:	0f 5f       	subi	r16, 0xFF	; 255
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	e2 e0       	ldi	r30, 0x02	; 2
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	ec 0f       	add	r30, r28
    1626:	fd 1f       	adc	r31, r29
    1628:	e0 0f       	add	r30, r16
    162a:	f1 1f       	adc	r31, r17
    162c:	80 81       	ld	r24, Z
    162e:	80 33       	cpi	r24, 0x30	; 48
    1630:	f9 f4       	brne	.+62     	; 0x1670 <Mode1+0x536>
		{
			LCD_enuClearScreen();
    1632:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("MATH ERROR");
    163e:	84 ea       	ldi	r24, 0xA4	; 164
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    164e:	8b e9       	ldi	r24, 0x9B	; 155
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    1656:	ce 01       	movw	r24, r28
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	c9 f3       	breq	.-14     	; 0x1656 <Mode1+0x51c>
			} while (pressed_key != ' ');
    1664:	80 32       	cpi	r24, 0x20	; 32
    1666:	b9 f7       	brne	.-18     	; 0x1656 <Mode1+0x51c>
			LCD_enuClearScreen();
    1668:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			return 0;
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	ea c0       	rjmp	.+468    	; 0x1844 <Mode1+0x70a>
			} while (pressed_key != ' ');
			LCD_enuClearScreen();
			return 0;
		}
	}
	for (u8 i = 0; i < strlen(array) - 1; i++)
    1670:	a3 94       	inc	r10
    1672:	03 c0       	rjmp	.+6      	; 0x167a <Mode1+0x540>
    1674:	a1 2c       	mov	r10, r1
    1676:	01 c0       	rjmp	.+2      	; 0x167a <Mode1+0x540>
    1678:	a1 2c       	mov	r10, r1
    167a:	8a 2c       	mov	r8, r10
    167c:	91 2c       	mov	r9, r1
    167e:	c7 01       	movw	r24, r14
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	88 16       	cp	r8, r24
    1684:	99 06       	cpc	r9, r25
    1686:	08 f4       	brcc	.+2      	; 0x168a <Mode1+0x550>
    1688:	fb ce       	rjmp	.-522    	; 0x1480 <Mode1+0x346>
    168a:	f1 2c       	mov	r15, r1
    168c:	65 c0       	rjmp	.+202    	; 0x1758 <Mode1+0x61e>
			return 0;
		}
	}
	for (s8 i = 0; i <= count - 5; i++)
	{
		if ((Is_digit(array[i]) && Is_digit(array[i + 1]) && Is_digit(array[i + 2]) && Is_digit(array[i + 3]) && Is_digit(array[i + 4]) && (array[i] > '5')))
    168e:	e2 e0       	ldi	r30, 0x02	; 2
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	ec 0f       	add	r30, r28
    1694:	fd 1f       	adc	r31, r29
    1696:	e0 0f       	add	r30, r16
    1698:	f1 1f       	adc	r31, r17
    169a:	e0 80       	ld	r14, Z
    169c:	8e 2d       	mov	r24, r14
    169e:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
    16a2:	89 2b       	or	r24, r25
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <Mode1+0x56e>
    16a6:	57 c0       	rjmp	.+174    	; 0x1756 <Mode1+0x61c>
    16a8:	f8 01       	movw	r30, r16
    16aa:	31 96       	adiw	r30, 0x01	; 1
    16ac:	22 e0       	ldi	r18, 0x02	; 2
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	2c 0f       	add	r18, r28
    16b2:	3d 1f       	adc	r19, r29
    16b4:	e2 0f       	add	r30, r18
    16b6:	f3 1f       	adc	r31, r19
    16b8:	80 81       	ld	r24, Z
    16ba:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
    16be:	89 2b       	or	r24, r25
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <Mode1+0x58a>
    16c2:	49 c0       	rjmp	.+146    	; 0x1756 <Mode1+0x61c>
    16c4:	f8 01       	movw	r30, r16
    16c6:	32 96       	adiw	r30, 0x02	; 2
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	8c 0f       	add	r24, r28
    16ce:	9d 1f       	adc	r25, r29
    16d0:	e8 0f       	add	r30, r24
    16d2:	f9 1f       	adc	r31, r25
    16d4:	80 81       	ld	r24, Z
    16d6:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
    16da:	89 2b       	or	r24, r25
    16dc:	e1 f1       	breq	.+120    	; 0x1756 <Mode1+0x61c>
    16de:	f8 01       	movw	r30, r16
    16e0:	33 96       	adiw	r30, 0x03	; 3
    16e2:	a2 e0       	ldi	r26, 0x02	; 2
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ac 0f       	add	r26, r28
    16e8:	bd 1f       	adc	r27, r29
    16ea:	ea 0f       	add	r30, r26
    16ec:	fb 1f       	adc	r31, r27
    16ee:	80 81       	ld	r24, Z
    16f0:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
    16f4:	89 2b       	or	r24, r25
    16f6:	79 f1       	breq	.+94     	; 0x1756 <Mode1+0x61c>
    16f8:	f8 01       	movw	r30, r16
    16fa:	34 96       	adiw	r30, 0x04	; 4
    16fc:	22 e0       	ldi	r18, 0x02	; 2
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	2c 0f       	add	r18, r28
    1702:	3d 1f       	adc	r19, r29
    1704:	e2 0f       	add	r30, r18
    1706:	f3 1f       	adc	r31, r19
    1708:	80 81       	ld	r24, Z
    170a:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
    170e:	89 2b       	or	r24, r25
    1710:	11 f1       	breq	.+68     	; 0x1756 <Mode1+0x61c>
    1712:	35 e3       	ldi	r19, 0x35	; 53
    1714:	3e 15       	cp	r19, r14
    1716:	f8 f4       	brcc	.+62     	; 0x1756 <Mode1+0x61c>
		{
			LCD_enuClearScreen();
    1718:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			LCD_enuSetPosition(1, 1);
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("    OVERFLOW");
    1724:	8f ea       	ldi	r24, 0xAF	; 175
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			LCD_enuSetPosition(2, 1);
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("PRESS AC");
    1734:	8b e9       	ldi	r24, 0x9B	; 155
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			do
			{
				do
				{
					KPD_enu_GetPressed(&pressed_key);
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
				} while (pressed_key == 0xff);
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	8f 3f       	cpi	r24, 0xFF	; 255
    1748:	c9 f3       	breq	.-14     	; 0x173c <Mode1+0x602>
			} while (pressed_key != ' ');
    174a:	80 32       	cpi	r24, 0x20	; 32
    174c:	b9 f7       	brne	.-18     	; 0x173c <Mode1+0x602>
			LCD_enuClearScreen();
    174e:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			return 0;
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	77 c0       	rjmp	.+238    	; 0x1844 <Mode1+0x70a>
			} while (pressed_key != ' ');
			LCD_enuClearScreen();
			return 0;
		}
	}
	for (s8 i = 0; i <= count - 5; i++)
    1756:	f3 94       	inc	r15
    1758:	0f 2d       	mov	r16, r15
    175a:	0f 2c       	mov	r0, r15
    175c:	00 0c       	add	r0, r0
    175e:	11 0b       	sbc	r17, r17
    1760:	c6 01       	movw	r24, r12
    1762:	05 97       	sbiw	r24, 0x05	; 5
    1764:	80 17       	cp	r24, r16
    1766:	91 07       	cpc	r25, r17
    1768:	0c f0       	brlt	.+2      	; 0x176c <Mode1+0x632>
    176a:	91 cf       	rjmp	.-222    	; 0x168e <Mode1+0x554>
			} while (pressed_key != ' ');
			LCD_enuClearScreen();
			return 0;
		}
	}
	Infix_To_Postfix(array, &s1);
    176c:	be 01       	movw	r22, r28
    176e:	66 5d       	subi	r22, 0xD6	; 214
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	ce 01       	movw	r24, r28
    1774:	02 96       	adiw	r24, 0x02	; 2
    1776:	0e 94 2a 07 	call	0xe54	; 0xe54 <Infix_To_Postfix>
	for (u32 c = size_stack(&s1); c > 0; c--)
    177a:	ce 01       	movw	r24, r28
    177c:	8a 96       	adiw	r24, 0x2a	; 42
    177e:	0e 94 a9 13 	call	0x2752	; 0x2752 <size_stack>
    1782:	6b 01       	movw	r12, r22
    1784:	7c 01       	movw	r14, r24
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <Mode1+0x676>
	{
		pop_stack(&temp, &s1);
    1788:	be 01       	movw	r22, r28
    178a:	66 5d       	subi	r22, 0xD6	; 214
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	ce 01       	movw	r24, r28
    1790:	86 96       	adiw	r24, 0x26	; 38
    1792:	0e 94 43 13 	call	0x2686	; 0x2686 <pop_stack>
		push_stack(&s2, temp);
    1796:	4e a1       	ldd	r20, Y+38	; 0x26
    1798:	5f a1       	ldd	r21, Y+39	; 0x27
    179a:	68 a5       	ldd	r22, Y+40	; 0x28
    179c:	79 a5       	ldd	r23, Y+41	; 0x29
    179e:	ce 01       	movw	r24, r28
    17a0:	c0 96       	adiw	r24, 0x30	; 48
    17a2:	0e 94 13 13 	call	0x2626	; 0x2626 <push_stack>
			LCD_enuClearScreen();
			return 0;
		}
	}
	Infix_To_Postfix(array, &s1);
	for (u32 c = size_stack(&s1); c > 0; c--)
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	c8 1a       	sub	r12, r24
    17aa:	d1 08       	sbc	r13, r1
    17ac:	e1 08       	sbc	r14, r1
    17ae:	f1 08       	sbc	r15, r1
    17b0:	c1 14       	cp	r12, r1
    17b2:	d1 04       	cpc	r13, r1
    17b4:	e1 04       	cpc	r14, r1
    17b6:	f1 04       	cpc	r15, r1
    17b8:	39 f7       	brne	.-50     	; 0x1788 <Mode1+0x64e>
	{
		pop_stack(&temp, &s1);
		push_stack(&s2, temp);
	}
	traverse_stack(&s2, &display);
    17ba:	6a e1       	ldi	r22, 0x1A	; 26
    17bc:	76 e0       	ldi	r23, 0x06	; 6
    17be:	ce 01       	movw	r24, r28
    17c0:	c0 96       	adiw	r24, 0x30	; 48
    17c2:	0e 94 90 13 	call	0x2720	; 0x2720 <traverse_stack>
	res = Evaluate_Postfix(&s2);
    17c6:	ce 01       	movw	r24, r28
    17c8:	c0 96       	adiw	r24, 0x30	; 48
    17ca:	0e 94 33 08 	call	0x1066	; 0x1066 <Evaluate_Postfix>
    17ce:	6b 01       	movw	r12, r22
    17d0:	7c 01       	movw	r14, r24
	if (res < 0)
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	a9 01       	movw	r20, r18
    17d8:	0e 94 3a 14 	call	0x2874	; 0x2874 <__cmpsf2>
    17dc:	88 23       	and	r24, r24
    17de:	64 f4       	brge	.+24     	; 0x17f8 <Mode1+0x6be>
	{
		con[0] = '-';
    17e0:	8d e2       	ldi	r24, 0x2D	; 45
    17e2:	8a 8b       	std	Y+18, r24	; 0x12
		ftoa(res, con + 1, 4);
    17e4:	24 e0       	ldi	r18, 0x04	; 4
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	ae 01       	movw	r20, r28
    17ea:	4d 5e       	subi	r20, 0xED	; 237
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	c7 01       	movw	r24, r14
    17f0:	b6 01       	movw	r22, r12
    17f2:	0e 94 71 06 	call	0xce2	; 0xce2 <ftoa>
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <Mode1+0x6d0>
	}
	else
		ftoa(res, con, 4);
    17f8:	24 e0       	ldi	r18, 0x04	; 4
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	ae 01       	movw	r20, r28
    17fe:	4e 5e       	subi	r20, 0xEE	; 238
    1800:	5f 4f       	sbci	r21, 0xFF	; 255
    1802:	c7 01       	movw	r24, r14
    1804:	b6 01       	movw	r22, r12
    1806:	0e 94 71 06 	call	0xce2	; 0xce2 <ftoa>
	LCD_enuSetPosition(2, 1);
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("result= ");
    1812:	8c eb       	ldi	r24, 0xBC	; 188
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2, 9);
    181a:	69 e0       	ldi	r22, 0x09	; 9
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString(con);
    1822:	ce 01       	movw	r24, r28
    1824:	42 96       	adiw	r24, 0x12	; 18
    1826:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	count = 0;
	clear_stack(&s1);
    182a:	ce 01       	movw	r24, r28
    182c:	8a 96       	adiw	r24, 0x2a	; 42
    182e:	0e 94 af 13 	call	0x275e	; 0x275e <clear_stack>
	clear_stack(&s2);
    1832:	ce 01       	movw	r24, r28
    1834:	c0 96       	adiw	r24, 0x30	; 48
    1836:	0e 94 af 13 	call	0x275e	; 0x275e <clear_stack>
	return 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <Mode1+0x70a>
				}
			}
		}
		else if (pressed_key == 'M')
		{
			return 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <Mode1+0x70a>
		}
	} while (pressed_key != '=');
	count = strlen(array);
	array[count] = '\0';
	if (count == 0)
		return 0;
    1842:	80 e0       	ldi	r24, 0x00	; 0
	LCD_enuSendString(con);
	count = 0;
	clear_stack(&s1);
	clear_stack(&s2);
	return 1;
}
    1844:	e5 96       	adiw	r28, 0x35	; 53
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	9f 90       	pop	r9
    1866:	8f 90       	pop	r8
    1868:	08 95       	ret

0000186a <decimal_to_decimal>:
		KPD_enu_GetPressed(&pressed_key);
	} while (pressed_key!='C'&&pressed_key!='M');	
		flag1=1;	
}

void decimal_to_decimal(void){
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	1f 92       	push	r1
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	u8 pressed_key,i=0;
	LCD_enuClearScreen();
    1876:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	} while (pressed_key!='C'&&pressed_key!='M');	
		flag1=1;	
}

void decimal_to_decimal(void){
	u8 pressed_key,i=0;
    187a:	10 e0       	ldi	r17, 0x00	; 0
	LCD_enuClearScreen();
	do
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
    187c:	ce 01       	movw	r24, r28
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		}while((pressed_key<'0'||pressed_key>'9')&&pressed_key!='=');
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	90 ed       	ldi	r25, 0xD0	; 208
    1888:	98 0f       	add	r25, r24
    188a:	9a 30       	cpi	r25, 0x0A	; 10
    188c:	10 f0       	brcs	.+4      	; 0x1892 <decimal_to_decimal+0x28>
    188e:	8d 33       	cpi	r24, 0x3D	; 61
    1890:	a9 f7       	brne	.-22     	; 0x187c <decimal_to_decimal+0x12>
		if(pressed_key=='=')
    1892:	8d 33       	cpi	r24, 0x3D	; 61
    1894:	49 f0       	breq	.+18     	; 0x18a8 <decimal_to_decimal+0x3e>
		continue;
		LCD_enuSendData(pressed_key);
    1896:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
		array_num[i++]=pressed_key;
    189a:	e1 2f       	mov	r30, r17
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	ea 52       	subi	r30, 0x2A	; 42
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	1f 5f       	subi	r17, 0xFF	; 255
	} while (pressed_key!='=');
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	8d 33       	cpi	r24, 0x3D	; 61
    18ac:	39 f7       	brne	.-50     	; 0x187c <decimal_to_decimal+0x12>
	array_num[i]='\0';
    18ae:	e1 2f       	mov	r30, r17
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	ea 52       	subi	r30, 0x2A	; 42
    18b4:	fe 4f       	sbci	r31, 0xFE	; 254
    18b6:	10 82       	st	Z, r1
	LCD_enuClearScreen();
    18b8:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	LCD_enuSendString(array_num);
    18bc:	86 ed       	ldi	r24, 0xD6	; 214
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2,1);
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C-Finish read");
    18cc:	85 ec       	ldi	r24, 0xC5	; 197
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do{
		KPD_enu_GetPressed(&pressed_key);
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while(pressed_key!='C'&&pressed_key!='M');
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	83 34       	cpi	r24, 0x43	; 67
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <decimal_to_decimal+0x7c>
    18e2:	8d 34       	cpi	r24, 0x4D	; 77
    18e4:	b9 f7       	brne	.-18     	; 0x18d4 <decimal_to_decimal+0x6a>
}
    18e6:	0f 90       	pop	r0
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	08 95       	ret

000018f0 <decimal_to_binary>:

void decimal_to_binary(void){
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	a1 97       	sbiw	r28, 0x21	; 33
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key,i=0;
	u32 decimal_number=0 ,index = 0;
	u8 binary_number[32]={0}; // Assuming a maximum of 32 bits for simplicity
    1908:	fe 01       	movw	r30, r28
    190a:	32 96       	adiw	r30, 0x02	; 2
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	df 01       	movw	r26, r30
    1910:	1d 92       	st	X+, r1
    1912:	8a 95       	dec	r24
    1914:	e9 f7       	brne	.-6      	; 0x1910 <decimal_to_binary+0x20>

	LCD_enuClearScreen();
    1916:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		KPD_enu_GetPressed(&pressed_key);
	}while(pressed_key!='C'&&pressed_key!='M');
}

void decimal_to_binary(void){
	u8 pressed_key,i=0;
    191a:	10 e0       	ldi	r17, 0x00	; 0

	LCD_enuClearScreen();
	do
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
    191c:	ce 01       	movw	r24, r28
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		}while((pressed_key<'0'||pressed_key>'9')&&pressed_key!='=');
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	90 ed       	ldi	r25, 0xD0	; 208
    1928:	98 0f       	add	r25, r24
    192a:	9a 30       	cpi	r25, 0x0A	; 10
    192c:	10 f0       	brcs	.+4      	; 0x1932 <decimal_to_binary+0x42>
    192e:	8d 33       	cpi	r24, 0x3D	; 61
    1930:	a9 f7       	brne	.-22     	; 0x191c <decimal_to_binary+0x2c>
		if(pressed_key=='=')
    1932:	8d 33       	cpi	r24, 0x3D	; 61
    1934:	49 f0       	breq	.+18     	; 0x1948 <decimal_to_binary+0x58>
		continue;
		LCD_enuSendData(pressed_key);
    1936:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
		array_num[i++]=pressed_key;
    193a:	e1 2f       	mov	r30, r17
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	ea 52       	subi	r30, 0x2A	; 42
    1940:	fe 4f       	sbci	r31, 0xFE	; 254
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	1f 5f       	subi	r17, 0xFF	; 255
	} while (pressed_key!='=');
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	8d 33       	cpi	r24, 0x3D	; 61
    194c:	39 f7       	brne	.-50     	; 0x191c <decimal_to_binary+0x2c>
	array_num[i]='\0';
    194e:	e1 2f       	mov	r30, r17
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	ea 52       	subi	r30, 0x2A	; 42
    1954:	fe 4f       	sbci	r31, 0xFE	; 254
    1956:	10 82       	st	Z, r1
	LCD_enuClearScreen();
    1958:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	decimal_number=atoi(array_num);
    195c:	86 ed       	ldi	r24, 0xD6	; 214
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <atoi>
    1964:	09 2e       	mov	r0, r25
    1966:	00 0c       	add	r0, r0
    1968:	aa 0b       	sbc	r26, r26
    196a:	bb 0b       	sbc	r27, r27
   if (decimal_number == 0) {
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	a1 05       	cpc	r26, r1
    1970:	b1 05       	cpc	r27, r1
    1972:	e9 f4       	brne	.+58     	; 0x19ae <decimal_to_binary+0xbe>
       LCD_enuSendNumber(0);
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_enuSendNumber>
    1988:	42 c0       	rjmp	.+132    	; 0x1a0e <decimal_to_binary+0x11e>
	   return;
   }
   while (decimal_number > 0) {
	   binary_number[index] = decimal_number % 2;
    198a:	e2 e0       	ldi	r30, 0x02	; 2
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	ec 0f       	add	r30, r28
    1990:	fd 1f       	adc	r31, r29
    1992:	e4 0f       	add	r30, r20
    1994:	f5 1f       	adc	r31, r21
    1996:	28 2f       	mov	r18, r24
    1998:	21 70       	andi	r18, 0x01	; 1
    199a:	20 83       	st	Z, r18
	   decimal_number = decimal_number / 2;
    199c:	b6 95       	lsr	r27
    199e:	a7 95       	ror	r26
    19a0:	97 95       	ror	r25
    19a2:	87 95       	ror	r24
	   index++;
    19a4:	4f 5f       	subi	r20, 0xFF	; 255
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255
    19a8:	6f 4f       	sbci	r22, 0xFF	; 255
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <decimal_to_binary+0xc4>
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	ba 01       	movw	r22, r20
	decimal_number=atoi(array_num);
   if (decimal_number == 0) {
       LCD_enuSendNumber(0);
	   return;
   }
   while (decimal_number > 0) {
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	a1 05       	cpc	r26, r1
    19b8:	b1 05       	cpc	r27, r1
    19ba:	39 f7       	brne	.-50     	; 0x198a <decimal_to_binary+0x9a>
	   decimal_number = decimal_number / 2;
	   index++;
   }
	
   // Print binary number in reverse order
   for (int i = index - 1; i >= 0; i--) {
    19bc:	8a 01       	movw	r16, r20
    19be:	01 50       	subi	r16, 0x01	; 1
    19c0:	11 09       	sbc	r17, r1
    19c2:	12 c0       	rjmp	.+36     	; 0x19e8 <decimal_to_binary+0xf8>
	    LCD_enuSendNumber(binary_number[i]);
    19c4:	e2 e0       	ldi	r30, 0x02	; 2
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	ec 0f       	add	r30, r28
    19ca:	fd 1f       	adc	r31, r29
    19cc:	e0 0f       	add	r30, r16
    19ce:	f1 1f       	adc	r31, r17
    19d0:	20 81       	ld	r18, Z
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_enuSendNumber>
	   decimal_number = decimal_number / 2;
	   index++;
   }
	
   // Print binary number in reverse order
   for (int i = index - 1; i >= 0; i--) {
    19e4:	01 50       	subi	r16, 0x01	; 1
    19e6:	11 09       	sbc	r17, r1
    19e8:	11 23       	and	r17, r17
    19ea:	64 f7       	brge	.-40     	; 0x19c4 <decimal_to_binary+0xd4>
	    LCD_enuSendNumber(binary_number[i]);
   }
	LCD_enuSetPosition(2,1);
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C-Finish read");
    19f4:	85 ec       	ldi	r24, 0xC5	; 197
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do{
		KPD_enu_GetPressed(&pressed_key);
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while(pressed_key!='C'&&pressed_key!='M');	
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	83 34       	cpi	r24, 0x43	; 67
    1a08:	11 f0       	breq	.+4      	; 0x1a0e <decimal_to_binary+0x11e>
    1a0a:	8d 34       	cpi	r24, 0x4D	; 77
    1a0c:	b9 f7       	brne	.-18     	; 0x19fc <decimal_to_binary+0x10c>
}
    1a0e:	a1 96       	adiw	r28, 0x21	; 33
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <decimal_to_HEX>:

void decimal_to_HEX(void){
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	a1 97       	sbiw	r28, 0x21	; 33
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key,i=0,flag=0;
	u32 decimal_number=0 ,index = 0;
	u8 hex_number[32]={0}; // Assuming a maximum of 32 bits for simplicity
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	32 96       	adiw	r30, 0x02	; 2
    1a40:	80 e2       	ldi	r24, 0x20	; 32
    1a42:	df 01       	movw	r26, r30
    1a44:	1d 92       	st	X+, r1
    1a46:	8a 95       	dec	r24
    1a48:	e9 f7       	brne	.-6      	; 0x1a44 <decimal_to_HEX+0x20>
LCD_enuClearScreen();
    1a4a:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		KPD_enu_GetPressed(&pressed_key);
	}while(pressed_key!='C'&&pressed_key!='M');	
}

void decimal_to_HEX(void){
	u8 pressed_key,i=0,flag=0;
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
	u8 hex_number[32]={0}; // Assuming a maximum of 32 bits for simplicity
LCD_enuClearScreen();
do
{
	do{
		KPD_enu_GetPressed(&pressed_key);
    1a50:	ce 01       	movw	r24, r28
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while((pressed_key<'0'||pressed_key>'9')&&pressed_key!='=');
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	90 ed       	ldi	r25, 0xD0	; 208
    1a5c:	98 0f       	add	r25, r24
    1a5e:	9a 30       	cpi	r25, 0x0A	; 10
    1a60:	10 f0       	brcs	.+4      	; 0x1a66 <decimal_to_HEX+0x42>
    1a62:	8d 33       	cpi	r24, 0x3D	; 61
    1a64:	a9 f7       	brne	.-22     	; 0x1a50 <decimal_to_HEX+0x2c>
	if(pressed_key=='=')
    1a66:	8d 33       	cpi	r24, 0x3D	; 61
    1a68:	49 f0       	breq	.+18     	; 0x1a7c <decimal_to_HEX+0x58>
	continue;
	LCD_enuSendData(pressed_key);
    1a6a:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
	array_num[i++]=pressed_key;
    1a6e:	e1 2f       	mov	r30, r17
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	ea 52       	subi	r30, 0x2A	; 42
    1a74:	fe 4f       	sbci	r31, 0xFE	; 254
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	1f 5f       	subi	r17, 0xFF	; 255
} while (pressed_key!='=');
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	8d 33       	cpi	r24, 0x3D	; 61
    1a80:	39 f7       	brne	.-50     	; 0x1a50 <decimal_to_HEX+0x2c>
array_num[i]='\0';
    1a82:	e1 2f       	mov	r30, r17
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	ea 52       	subi	r30, 0x2A	; 42
    1a88:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8a:	10 82       	st	Z, r1
LCD_enuClearScreen();
    1a8c:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	decimal_number=atoi(array_num);
    1a90:	86 ed       	ldi	r24, 0xD6	; 214
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <atoi>
    1a98:	09 2e       	mov	r0, r25
    1a9a:	00 0c       	add	r0, r0
    1a9c:	aa 0b       	sbc	r26, r26
    1a9e:	bb 0b       	sbc	r27, r27
	if (decimal_number == 0) {
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	a1 05       	cpc	r26, r1
    1aa4:	b1 05       	cpc	r27, r1
    1aa6:	a1 f5       	brne	.+104    	; 0x1b10 <decimal_to_HEX+0xec>
		LCD_enuSendNumber(0);
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_enuSendNumber>
    1abc:	52 c0       	rjmp	.+164    	; 0x1b62 <decimal_to_HEX+0x13e>
		return;
	}
	while (decimal_number > 0) {
		u32 rem=decimal_number % 16;
    1abe:	8c 01       	movw	r16, r24
    1ac0:	9d 01       	movw	r18, r26
    1ac2:	0f 70       	andi	r16, 0x0F	; 15
    1ac4:	11 27       	eor	r17, r17
    1ac6:	22 27       	eor	r18, r18
    1ac8:	33 27       	eor	r19, r19
		if(rem<10)
    1aca:	0a 30       	cpi	r16, 0x0A	; 10
    1acc:	11 05       	cpc	r17, r1
    1ace:	21 05       	cpc	r18, r1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	48 f4       	brcc	.+18     	; 0x1ae6 <decimal_to_HEX+0xc2>
		hex_number[index] = rem+ '0';
    1ad4:	e2 e0       	ldi	r30, 0x02	; 2
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	ec 0f       	add	r30, r28
    1ada:	fd 1f       	adc	r31, r29
    1adc:	e4 0f       	add	r30, r20
    1ade:	f5 1f       	adc	r31, r21
    1ae0:	00 5d       	subi	r16, 0xD0	; 208
    1ae2:	00 83       	st	Z, r16
    1ae4:	08 c0       	rjmp	.+16     	; 0x1af6 <decimal_to_HEX+0xd2>
		else
		hex_number[index]=rem-10+'A';
    1ae6:	e2 e0       	ldi	r30, 0x02	; 2
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	ec 0f       	add	r30, r28
    1aec:	fd 1f       	adc	r31, r29
    1aee:	e4 0f       	add	r30, r20
    1af0:	f5 1f       	adc	r31, r21
    1af2:	09 5c       	subi	r16, 0xC9	; 201
    1af4:	00 83       	st	Z, r16
		decimal_number = decimal_number / 16;
    1af6:	68 94       	set
    1af8:	13 f8       	bld	r1, 3
    1afa:	b6 95       	lsr	r27
    1afc:	a7 95       	ror	r26
    1afe:	97 95       	ror	r25
    1b00:	87 95       	ror	r24
    1b02:	16 94       	lsr	r1
    1b04:	d1 f7       	brne	.-12     	; 0x1afa <decimal_to_HEX+0xd6>
		index++;
    1b06:	4f 5f       	subi	r20, 0xFF	; 255
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	6f 4f       	sbci	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <decimal_to_HEX+0xf2>
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	ba 01       	movw	r22, r20
	decimal_number=atoi(array_num);
	if (decimal_number == 0) {
		LCD_enuSendNumber(0);
		return;
	}
	while (decimal_number > 0) {
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	a1 05       	cpc	r26, r1
    1b1a:	b1 05       	cpc	r27, r1
    1b1c:	81 f6       	brne	.-96     	; 0x1abe <decimal_to_HEX+0x9a>
		decimal_number = decimal_number / 16;
		index++;
	}
	
	// Print hex number in reverse order
	for (int i = index - 1; i >= 0; i--) {
    1b1e:	8a 01       	movw	r16, r20
    1b20:	01 50       	subi	r16, 0x01	; 1
    1b22:	11 09       	sbc	r17, r1
    1b24:	0b c0       	rjmp	.+22     	; 0x1b3c <decimal_to_HEX+0x118>
		LCD_enuSendData(hex_number[i]);
    1b26:	e2 e0       	ldi	r30, 0x02	; 2
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	ec 0f       	add	r30, r28
    1b2c:	fd 1f       	adc	r31, r29
    1b2e:	e0 0f       	add	r30, r16
    1b30:	f1 1f       	adc	r31, r17
    1b32:	80 81       	ld	r24, Z
    1b34:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
		decimal_number = decimal_number / 16;
		index++;
	}
	
	// Print hex number in reverse order
	for (int i = index - 1; i >= 0; i--) {
    1b38:	01 50       	subi	r16, 0x01	; 1
    1b3a:	11 09       	sbc	r17, r1
    1b3c:	11 23       	and	r17, r17
    1b3e:	9c f7       	brge	.-26     	; 0x1b26 <decimal_to_HEX+0x102>
		LCD_enuSendData(hex_number[i]);
	}
	LCD_enuSetPosition(2,1);
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C-Finish read");
    1b48:	85 ec       	ldi	r24, 0xC5	; 197
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do{
		KPD_enu_GetPressed(&pressed_key);
    1b50:	ce 01       	movw	r24, r28
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while(pressed_key!='C'&&pressed_key!='M');
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	83 34       	cpi	r24, 0x43	; 67
    1b5c:	11 f0       	breq	.+4      	; 0x1b62 <decimal_to_HEX+0x13e>
    1b5e:	8d 34       	cpi	r24, 0x4D	; 77
    1b60:	b9 f7       	brne	.-18     	; 0x1b50 <decimal_to_HEX+0x12c>
}
    1b62:	a1 96       	adiw	r28, 0x21	; 33
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	08 95       	ret

00001b78 <binary_to_binary>:

void binary_to_binary(void){
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	1f 92       	push	r1
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	u8 pressed_key,i=0;
	LCD_enuClearScreen();
    1b84:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		KPD_enu_GetPressed(&pressed_key);
	}while(pressed_key!='C'&&pressed_key!='M');
}

void binary_to_binary(void){
	u8 pressed_key,i=0;
    1b88:	10 e0       	ldi	r17, 0x00	; 0
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <binary_to_binary+0x16>
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
		if(pressed_key=='0')
		LCD_enuSendData('0');
		else if (pressed_key=='1')
		LCD_enuSendData('1');
		array_num[i++]=pressed_key;
    1b8c:	13 2f       	mov	r17, r19
	u8 pressed_key,i=0;
	LCD_enuClearScreen();
	do
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	90 ed       	ldi	r25, 0xD0	; 208
    1b9a:	98 0f       	add	r25, r24
    1b9c:	92 30       	cpi	r25, 0x02	; 2
    1b9e:	10 f0       	brcs	.+4      	; 0x1ba4 <binary_to_binary+0x2c>
    1ba0:	8d 33       	cpi	r24, 0x3D	; 61
    1ba2:	a9 f7       	brne	.-22     	; 0x1b8e <binary_to_binary+0x16>
		if(pressed_key=='0')
    1ba4:	80 33       	cpi	r24, 0x30	; 48
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <binary_to_binary+0x36>
		LCD_enuSendData('0');
    1ba8:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
    1bac:	04 c0       	rjmp	.+8      	; 0x1bb6 <binary_to_binary+0x3e>
		else if (pressed_key=='1')
    1bae:	81 33       	cpi	r24, 0x31	; 49
    1bb0:	11 f4       	brne	.+4      	; 0x1bb6 <binary_to_binary+0x3e>
		LCD_enuSendData('1');
    1bb2:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
		array_num[i++]=pressed_key;
    1bb6:	31 e0       	ldi	r19, 0x01	; 1
    1bb8:	31 0f       	add	r19, r17
    1bba:	81 2f       	mov	r24, r17
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	29 81       	ldd	r18, Y+1	; 0x01
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	ea 52       	subi	r30, 0x2A	; 42
    1bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc6:	20 83       	st	Z, r18
	} while (pressed_key!='=');
    1bc8:	2d 33       	cpi	r18, 0x3D	; 61
    1bca:	01 f7       	brne	.-64     	; 0x1b8c <binary_to_binary+0x14>
	array_num[--i]='\0';
    1bcc:	fc 01       	movw	r30, r24
    1bce:	ea 52       	subi	r30, 0x2A	; 42
    1bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd2:	10 82       	st	Z, r1
	LCD_enuClearScreen();
    1bd4:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	LCD_enuSendString(array_num);
    1bd8:	86 ed       	ldi	r24, 0xD6	; 214
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2,1);
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C-Finish read");
    1be8:	85 ec       	ldi	r24, 0xC5	; 197
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do{
		KPD_enu_GetPressed(&pressed_key);
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while(pressed_key!='C'&&pressed_key!='M');
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	83 34       	cpi	r24, 0x43	; 67
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <binary_to_binary+0x8a>
    1bfe:	8d 34       	cpi	r24, 0x4D	; 77
    1c00:	b9 f7       	brne	.-18     	; 0x1bf0 <binary_to_binary+0x78>
}
    1c02:	0f 90       	pop	r0
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	08 95       	ret

00001c0c <binary_to_decimal>:


void binary_to_decimal(void){
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	1f 92       	push	r1
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	u8 pressed_key,j=0;
	u32 decimal_number =0 ;
	LCD_enuClearScreen();
    1c28:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	}while(pressed_key!='C'&&pressed_key!='M');
}


void binary_to_decimal(void){
	u8 pressed_key,j=0;
    1c2c:	10 e0       	ldi	r17, 0x00	; 0
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <binary_to_decimal+0x26>
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
		LCD_enuSendData(pressed_key);
		array_num[j++]=pressed_key;
    1c30:	13 2f       	mov	r17, r19
	u32 decimal_number =0 ;
	LCD_enuClearScreen();
	do
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
    1c32:	ce 01       	movw	r24, r28
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	90 ed       	ldi	r25, 0xD0	; 208
    1c3e:	98 0f       	add	r25, r24
    1c40:	92 30       	cpi	r25, 0x02	; 2
    1c42:	10 f0       	brcs	.+4      	; 0x1c48 <binary_to_decimal+0x3c>
    1c44:	8d 33       	cpi	r24, 0x3D	; 61
    1c46:	a9 f7       	brne	.-22     	; 0x1c32 <binary_to_decimal+0x26>
		LCD_enuSendData(pressed_key);
    1c48:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
		array_num[j++]=pressed_key;
    1c4c:	31 e0       	ldi	r19, 0x01	; 1
    1c4e:	31 0f       	add	r19, r17
    1c50:	81 2f       	mov	r24, r17
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	29 81       	ldd	r18, Y+1	; 0x01
    1c56:	fc 01       	movw	r30, r24
    1c58:	ea 52       	subi	r30, 0x2A	; 42
    1c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5c:	20 83       	st	Z, r18
	} while (pressed_key!='=');
    1c5e:	2d 33       	cpi	r18, 0x3D	; 61
    1c60:	39 f7       	brne	.-50     	; 0x1c30 <binary_to_decimal+0x24>
	array_num[--j]='\0';
    1c62:	fc 01       	movw	r30, r24
    1c64:	ea 52       	subi	r30, 0x2A	; 42
    1c66:	fe 4f       	sbci	r31, 0xFE	; 254
    1c68:	10 82       	st	Z, r1
	    for (int i = 0; i <j; i++) {
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
}


void binary_to_decimal(void){
	u8 pressed_key,j=0;
	u32 decimal_number =0 ;
    1c6e:	c1 2c       	mov	r12, r1
    1c70:	d1 2c       	mov	r13, r1
    1c72:	76 01       	movw	r14, r12
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
		LCD_enuSendData(pressed_key);
		array_num[j++]=pressed_key;
	} while (pressed_key!='=');
	array_num[--j]='\0';
	    for (int i = 0; i <j; i++) {
    1c74:	1a c0       	rjmp	.+52     	; 0x1caa <binary_to_decimal+0x9e>
		    if (array_num[j - i - 1] == '1') {
    1c76:	fc 01       	movw	r30, r24
    1c78:	e2 1b       	sub	r30, r18
    1c7a:	f3 0b       	sbc	r31, r19
    1c7c:	eb 52       	subi	r30, 0x2B	; 43
    1c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c80:	40 81       	ld	r20, Z
    1c82:	41 33       	cpi	r20, 0x31	; 49
    1c84:	81 f4       	brne	.+32     	; 0x1ca6 <binary_to_decimal+0x9a>
			    decimal_number += (1<<i);
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <binary_to_decimal+0x86>
    1c8e:	44 0f       	add	r20, r20
    1c90:	55 1f       	adc	r21, r21
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <binary_to_decimal+0x82>
    1c96:	05 2e       	mov	r0, r21
    1c98:	00 0c       	add	r0, r0
    1c9a:	66 0b       	sbc	r22, r22
    1c9c:	77 0b       	sbc	r23, r23
    1c9e:	c4 0e       	add	r12, r20
    1ca0:	d5 1e       	adc	r13, r21
    1ca2:	e6 1e       	adc	r14, r22
    1ca4:	f7 1e       	adc	r15, r23
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
		LCD_enuSendData(pressed_key);
		array_num[j++]=pressed_key;
	} while (pressed_key!='=');
	array_num[--j]='\0';
	    for (int i = 0; i <j; i++) {
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	28 17       	cp	r18, r24
    1cac:	39 07       	cpc	r19, r25
    1cae:	1c f3       	brlt	.-58     	; 0x1c76 <binary_to_decimal+0x6a>
		    if (array_num[j - i - 1] == '1') {
			    decimal_number += (1<<i);
		    }
	    }
		LCD_enuClearScreen();
    1cb0:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	    LCD_enuSendNumber(decimal_number);
    1cb4:	46 01       	movw	r8, r12
    1cb6:	57 01       	movw	r10, r14
    1cb8:	28 2d       	mov	r18, r8
    1cba:	39 2d       	mov	r19, r9
    1cbc:	4a 2d       	mov	r20, r10
    1cbe:	5b 2d       	mov	r21, r11
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_enuSendNumber>
	LCD_enuSetPosition(2,1);
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C-Finish read");
    1cd4:	85 ec       	ldi	r24, 0xC5	; 197
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do{
		KPD_enu_GetPressed(&pressed_key);
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while(pressed_key!='C'&&pressed_key!='M');	
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	83 34       	cpi	r24, 0x43	; 67
    1ce8:	11 f0       	breq	.+4      	; 0x1cee <binary_to_decimal+0xe2>
    1cea:	8d 34       	cpi	r24, 0x4D	; 77
    1cec:	b9 f7       	brne	.-18     	; 0x1cdc <binary_to_decimal+0xd0>
}
    1cee:	0f 90       	pop	r0
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	df 90       	pop	r13
    1cfc:	cf 90       	pop	r12
    1cfe:	bf 90       	pop	r11
    1d00:	af 90       	pop	r10
    1d02:	9f 90       	pop	r9
    1d04:	8f 90       	pop	r8
    1d06:	08 95       	ret

00001d08 <binary_to_HEX>:

void binary_to_HEX(void){
    1d08:	cf 92       	push	r12
    1d0a:	df 92       	push	r13
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	a1 97       	sbiw	r28, 0x21	; 33
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key,j=0;
	u32 decimal_number=0 ,index = 0;
	u8 hex_number[32]={0}; // Assuming a maximum of 32 bits for simplicity
    1d24:	fe 01       	movw	r30, r28
    1d26:	32 96       	adiw	r30, 0x02	; 2
    1d28:	80 e2       	ldi	r24, 0x20	; 32
    1d2a:	df 01       	movw	r26, r30
    1d2c:	1d 92       	st	X+, r1
    1d2e:	8a 95       	dec	r24
    1d30:	e9 f7       	brne	.-6      	; 0x1d2c <binary_to_HEX+0x24>

	LCD_enuClearScreen();
    1d32:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		KPD_enu_GetPressed(&pressed_key);
	}while(pressed_key!='C'&&pressed_key!='M');	
}

void binary_to_HEX(void){
	u8 pressed_key,j=0;
    1d36:	f1 2c       	mov	r15, r1
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <binary_to_HEX+0x34>
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
		LCD_enuSendData(pressed_key);
		array_num[j++]=pressed_key;
    1d3a:	f3 2e       	mov	r15, r19

	LCD_enuClearScreen();
	do
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	90 ed       	ldi	r25, 0xD0	; 208
    1d48:	98 0f       	add	r25, r24
    1d4a:	92 30       	cpi	r25, 0x02	; 2
    1d4c:	10 f0       	brcs	.+4      	; 0x1d52 <binary_to_HEX+0x4a>
    1d4e:	8d 33       	cpi	r24, 0x3D	; 61
    1d50:	a9 f7       	brne	.-22     	; 0x1d3c <binary_to_HEX+0x34>
		LCD_enuSendData(pressed_key);
    1d52:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
		array_num[j++]=pressed_key;
    1d56:	31 e0       	ldi	r19, 0x01	; 1
    1d58:	3f 0d       	add	r19, r15
    1d5a:	8f 2d       	mov	r24, r15
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	29 81       	ldd	r18, Y+1	; 0x01
    1d60:	fc 01       	movw	r30, r24
    1d62:	ea 52       	subi	r30, 0x2A	; 42
    1d64:	fe 4f       	sbci	r31, 0xFE	; 254
    1d66:	20 83       	st	Z, r18
	} while (pressed_key!='=');
    1d68:	2d 33       	cpi	r18, 0x3D	; 61
    1d6a:	39 f7       	brne	.-50     	; 0x1d3a <binary_to_HEX+0x32>
	array_num[--j]='\0';
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	ea 52       	subi	r30, 0x2A	; 42
    1d70:	fe 4f       	sbci	r31, 0xFE	; 254
    1d72:	10 82       	st	Z, r1
	for (int i = 0; i <j; i++) {
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
	}while(pressed_key!='C'&&pressed_key!='M');	
}

void binary_to_HEX(void){
	u8 pressed_key,j=0;
	u32 decimal_number=0 ,index = 0;
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	ba 01       	movw	r22, r20
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
		LCD_enuSendData(pressed_key);
		array_num[j++]=pressed_key;
	} while (pressed_key!='=');
	array_num[--j]='\0';
	for (int i = 0; i <j; i++) {
    1d7e:	1b c0       	rjmp	.+54     	; 0x1db6 <binary_to_HEX+0xae>
		if (array_num[j - i - 1] == '1') {
    1d80:	fc 01       	movw	r30, r24
    1d82:	e2 1b       	sub	r30, r18
    1d84:	f3 0b       	sbc	r31, r19
    1d86:	eb 52       	subi	r30, 0x2B	; 43
    1d88:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8a:	e0 81       	ld	r30, Z
    1d8c:	e1 33       	cpi	r30, 0x31	; 49
    1d8e:	89 f4       	brne	.+34     	; 0x1db2 <binary_to_HEX+0xaa>
			decimal_number += (1<<i);
    1d90:	e1 e0       	ldi	r30, 0x01	; 1
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	6f 01       	movw	r12, r30
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <binary_to_HEX+0x96>
    1d9a:	cc 0c       	add	r12, r12
    1d9c:	dd 1c       	adc	r13, r13
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <binary_to_HEX+0x92>
    1da2:	0d 2c       	mov	r0, r13
    1da4:	00 0c       	add	r0, r0
    1da6:	ee 08       	sbc	r14, r14
    1da8:	ff 08       	sbc	r15, r15
    1daa:	4c 0d       	add	r20, r12
    1dac:	5d 1d       	adc	r21, r13
    1dae:	6e 1d       	adc	r22, r14
    1db0:	7f 1d       	adc	r23, r15
		}while((pressed_key!='0'&&pressed_key!='1')&&pressed_key!='=');
		LCD_enuSendData(pressed_key);
		array_num[j++]=pressed_key;
	} while (pressed_key!='=');
	array_num[--j]='\0';
	for (int i = 0; i <j; i++) {
    1db2:	2f 5f       	subi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	28 17       	cp	r18, r24
    1db8:	39 07       	cpc	r19, r25
    1dba:	14 f3       	brlt	.-60     	; 0x1d80 <binary_to_HEX+0x78>
    1dbc:	c1 2c       	mov	r12, r1
    1dbe:	d1 2c       	mov	r13, r1
    1dc0:	76 01       	movw	r14, r12
    1dc2:	29 c0       	rjmp	.+82     	; 0x1e16 <binary_to_HEX+0x10e>
		if (array_num[j - i - 1] == '1') {
			decimal_number += (1<<i);
		}
	}
	while (decimal_number > 0) {
		u32 rem=decimal_number % 16;
    1dc4:	db 01       	movw	r26, r22
    1dc6:	ca 01       	movw	r24, r20
    1dc8:	8f 70       	andi	r24, 0x0F	; 15
    1dca:	99 27       	eor	r25, r25
    1dcc:	aa 27       	eor	r26, r26
    1dce:	bb 27       	eor	r27, r27
		if(rem<10)
    1dd0:	8a 30       	cpi	r24, 0x0A	; 10
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	a1 05       	cpc	r26, r1
    1dd6:	b1 05       	cpc	r27, r1
    1dd8:	48 f4       	brcc	.+18     	; 0x1dec <binary_to_HEX+0xe4>
		hex_number[index] = rem+ '0';
    1dda:	e2 e0       	ldi	r30, 0x02	; 2
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	ec 0f       	add	r30, r28
    1de0:	fd 1f       	adc	r31, r29
    1de2:	ec 0d       	add	r30, r12
    1de4:	fd 1d       	adc	r31, r13
    1de6:	80 5d       	subi	r24, 0xD0	; 208
    1de8:	80 83       	st	Z, r24
    1dea:	08 c0       	rjmp	.+16     	; 0x1dfc <binary_to_HEX+0xf4>
		else
		hex_number[index]=rem-10+'A';
    1dec:	e2 e0       	ldi	r30, 0x02	; 2
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	ec 0f       	add	r30, r28
    1df2:	fd 1f       	adc	r31, r29
    1df4:	ec 0d       	add	r30, r12
    1df6:	fd 1d       	adc	r31, r13
    1df8:	89 5c       	subi	r24, 0xC9	; 201
    1dfa:	80 83       	st	Z, r24
		decimal_number = decimal_number / 16;
    1dfc:	68 94       	set
    1dfe:	13 f8       	bld	r1, 3
    1e00:	76 95       	lsr	r23
    1e02:	67 95       	ror	r22
    1e04:	57 95       	ror	r21
    1e06:	47 95       	ror	r20
    1e08:	16 94       	lsr	r1
    1e0a:	d1 f7       	brne	.-12     	; 0x1e00 <binary_to_HEX+0xf8>
		index++;
    1e0c:	bf ef       	ldi	r27, 0xFF	; 255
    1e0e:	cb 1a       	sub	r12, r27
    1e10:	db 0a       	sbc	r13, r27
    1e12:	eb 0a       	sbc	r14, r27
    1e14:	fb 0a       	sbc	r15, r27
	for (int i = 0; i <j; i++) {
		if (array_num[j - i - 1] == '1') {
			decimal_number += (1<<i);
		}
	}
	while (decimal_number > 0) {
    1e16:	41 15       	cp	r20, r1
    1e18:	51 05       	cpc	r21, r1
    1e1a:	61 05       	cpc	r22, r1
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	91 f6       	brne	.-92     	; 0x1dc4 <binary_to_HEX+0xbc>
		else
		hex_number[index]=rem-10+'A';
		decimal_number = decimal_number / 16;
		index++;
	}
	LCD_enuClearScreen();
    1e20:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	// Print hex number in reverse order
	for (int i = index - 1; i >= 0; i--) {
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	c8 1a       	sub	r12, r24
    1e28:	d1 08       	sbc	r13, r1
    1e2a:	0c c0       	rjmp	.+24     	; 0x1e44 <binary_to_HEX+0x13c>
		LCD_enuSendData(hex_number[i]);
    1e2c:	e2 e0       	ldi	r30, 0x02	; 2
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	ec 0f       	add	r30, r28
    1e32:	fd 1f       	adc	r31, r29
    1e34:	ec 0d       	add	r30, r12
    1e36:	fd 1d       	adc	r31, r13
    1e38:	80 81       	ld	r24, Z
    1e3a:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
		decimal_number = decimal_number / 16;
		index++;
	}
	LCD_enuClearScreen();
	// Print hex number in reverse order
	for (int i = index - 1; i >= 0; i--) {
    1e3e:	a1 e0       	ldi	r26, 0x01	; 1
    1e40:	ca 1a       	sub	r12, r26
    1e42:	d1 08       	sbc	r13, r1
    1e44:	dd 20       	and	r13, r13
    1e46:	94 f7       	brge	.-28     	; 0x1e2c <binary_to_HEX+0x124>
		LCD_enuSendData(hex_number[i]);
	}
	LCD_enuSetPosition(2,1);
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C-Finish read");
    1e50:	85 ec       	ldi	r24, 0xC5	; 197
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do{
		KPD_enu_GetPressed(&pressed_key);
    1e58:	ce 01       	movw	r24, r28
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while(pressed_key!='C'&&pressed_key!='M');
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	83 34       	cpi	r24, 0x43	; 67
    1e64:	11 f0       	breq	.+4      	; 0x1e6a <binary_to_HEX+0x162>
    1e66:	8d 34       	cpi	r24, 0x4D	; 77
    1e68:	b9 f7       	brne	.-18     	; 0x1e58 <binary_to_HEX+0x150>

	
}
    1e6a:	a1 96       	adiw	r28, 0x21	; 33
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	08 95       	ret

00001e84 <HEX_to_HEX>:

void HEX_to_HEX(void){
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	1f 92       	push	r1
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
	u8 pressed_key,i=0,flag=0;
	LCD_enuClearScreen();
    1e92:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	LCD_enuSetPosition(1,1);
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("G- Before NUM to");
    1e9e:	83 ed       	ldi	r24, 0xD3	; 211
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2,1);
    1ea6:	61 e0       	ldi	r22, 0x01	; 1
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("Write Alphabet");
    1eae:	84 ee       	ldi	r24, 0xE4	; 228
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
    1eb6:	2f ef       	ldi	r18, 0xFF	; 255
    1eb8:	84 e3       	ldi	r24, 0x34	; 52
    1eba:	9c e0       	ldi	r25, 0x0C	; 12
    1ebc:	21 50       	subi	r18, 0x01	; 1
    1ebe:	80 40       	sbci	r24, 0x00	; 0
    1ec0:	90 40       	sbci	r25, 0x00	; 0
    1ec2:	e1 f7       	brne	.-8      	; 0x1ebc <HEX_to_HEX+0x38>
    1ec4:	00 c0       	rjmp	.+0      	; 0x1ec6 <HEX_to_HEX+0x42>
    1ec6:	00 00       	nop
	_delay_ms(500);
	LCD_enuClearScreen();
    1ec8:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>

	
}

void HEX_to_HEX(void){
	u8 pressed_key,i=0,flag=0;
    1ecc:	00 e0       	ldi	r16, 0x00	; 0
    1ece:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(500);
	LCD_enuClearScreen();
	do
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		}while((pressed_key<'1'||pressed_key>'9')&&pressed_key!='='&&pressed_key!='G');
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9f ec       	ldi	r25, 0xCF	; 207
    1edc:	98 0f       	add	r25, r24
    1ede:	99 30       	cpi	r25, 0x09	; 9
    1ee0:	20 f0       	brcs	.+8      	; 0x1eea <HEX_to_HEX+0x66>
    1ee2:	8d 33       	cpi	r24, 0x3D	; 61
    1ee4:	11 f0       	breq	.+4      	; 0x1eea <HEX_to_HEX+0x66>
    1ee6:	87 34       	cpi	r24, 0x47	; 71
    1ee8:	99 f7       	brne	.-26     	; 0x1ed0 <HEX_to_HEX+0x4c>
		if(pressed_key=='G'){
    1eea:	87 34       	cpi	r24, 0x47	; 71
    1eec:	d9 f0       	breq	.+54     	; 0x1f24 <HEX_to_HEX+0xa0>
			flag=1;
			continue;
		}
		if (pressed_key=='=')
    1eee:	8d 33       	cpi	r24, 0x3D	; 61
    1ef0:	d1 f0       	breq	.+52     	; 0x1f26 <HEX_to_HEX+0xa2>
		continue;
		if(flag==1){
    1ef2:	01 30       	cpi	r16, 0x01	; 1
    1ef4:	69 f4       	brne	.+26     	; 0x1f10 <HEX_to_HEX+0x8c>
			LCD_enuSendData(pressed_key+16);
    1ef6:	80 5f       	subi	r24, 0xF0	; 240
    1ef8:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
			array_num[i++]=pressed_key+16;
    1efc:	e1 2f       	mov	r30, r17
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	ea 52       	subi	r30, 0x2A	; 42
    1f02:	fe 4f       	sbci	r31, 0xFE	; 254
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	80 5f       	subi	r24, 0xF0	; 240
    1f08:	80 83       	st	Z, r24
    1f0a:	1f 5f       	subi	r17, 0xFF	; 255
			flag=0;
    1f0c:	00 e0       	ldi	r16, 0x00	; 0
    1f0e:	0b c0       	rjmp	.+22     	; 0x1f26 <HEX_to_HEX+0xa2>
		}
		else{
			LCD_enuSendData(pressed_key);
    1f10:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
			array_num[i++]=pressed_key;
    1f14:	e1 2f       	mov	r30, r17
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	ea 52       	subi	r30, 0x2A	; 42
    1f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	1f 5f       	subi	r17, 0xFF	; 255
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <HEX_to_HEX+0xa2>
	{
		do{
			KPD_enu_GetPressed(&pressed_key);
		}while((pressed_key<'1'||pressed_key>'9')&&pressed_key!='='&&pressed_key!='G');
		if(pressed_key=='G'){
			flag=1;
    1f24:	01 e0       	ldi	r16, 0x01	; 1
		}
		else{
			LCD_enuSendData(pressed_key);
			array_num[i++]=pressed_key;
		}
	} while (pressed_key!='=');
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	8d 33       	cpi	r24, 0x3D	; 61
    1f2a:	91 f6       	brne	.-92     	; 0x1ed0 <HEX_to_HEX+0x4c>
	array_num[i]='\0';
    1f2c:	e1 2f       	mov	r30, r17
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	ea 52       	subi	r30, 0x2A	; 42
    1f32:	fe 4f       	sbci	r31, 0xFE	; 254
    1f34:	10 82       	st	Z, r1
	LCD_enuClearScreen();
    1f36:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	LCD_enuSendString(array_num);
    1f3a:	86 ed       	ldi	r24, 0xD6	; 214
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2,1);
    1f42:	61 e0       	ldi	r22, 0x01	; 1
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C-Finish read");
    1f4a:	85 ec       	ldi	r24, 0xC5	; 197
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do{
		KPD_enu_GetPressed(&pressed_key);
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	}while(pressed_key!='C'&&pressed_key!='M');
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	83 34       	cpi	r24, 0x43	; 67
    1f5e:	11 f0       	breq	.+4      	; 0x1f64 <HEX_to_HEX+0xe0>
    1f60:	8d 34       	cpi	r24, 0x4D	; 77
    1f62:	b9 f7       	brne	.-18     	; 0x1f52 <HEX_to_HEX+0xce>
}
    1f64:	0f 90       	pop	r0
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <HEX_to_decimal>:



void HEX_to_decimal(void){
    1f70:	8f 92       	push	r8
    1f72:	9f 92       	push	r9
    1f74:	af 92       	push	r10
    1f76:	bf 92       	push	r11
    1f78:	cf 92       	push	r12
    1f7a:	df 92       	push	r13
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	1f 92       	push	r1
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62

		u8 pressed_key,j=0,flag=0;
		u32 decimal_number=0;
		LCD_enuClearScreen();
    1f8e:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		LCD_enuSetPosition(1,1);
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
		LCD_enuSendString("G- Before NUM to");
    1f9a:	83 ed       	ldi	r24, 0xD3	; 211
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
		LCD_enuSetPosition(2,1);
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
		LCD_enuSendString("Write Alphabet");
    1faa:	84 ee       	ldi	r24, 0xE4	; 228
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
    1fb2:	2f ef       	ldi	r18, 0xFF	; 255
    1fb4:	84 e3       	ldi	r24, 0x34	; 52
    1fb6:	9c e0       	ldi	r25, 0x0C	; 12
    1fb8:	21 50       	subi	r18, 0x01	; 1
    1fba:	80 40       	sbci	r24, 0x00	; 0
    1fbc:	90 40       	sbci	r25, 0x00	; 0
    1fbe:	e1 f7       	brne	.-8      	; 0x1fb8 <HEX_to_decimal+0x48>
    1fc0:	00 c0       	rjmp	.+0      	; 0x1fc2 <HEX_to_decimal+0x52>
    1fc2:	00 00       	nop
		_delay_ms(500);
		LCD_enuClearScreen();
    1fc4:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>



void HEX_to_decimal(void){

		u8 pressed_key,j=0,flag=0;
    1fc8:	10 e0       	ldi	r17, 0x00	; 0
    1fca:	c1 2c       	mov	r12, r1
		_delay_ms(500);
		LCD_enuClearScreen();
		do
		{
			do{
				KPD_enu_GetPressed(&pressed_key);
    1fcc:	ce 01       	movw	r24, r28
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
			}while((pressed_key<'1'||pressed_key>'9')&&pressed_key!='='&&pressed_key!='G');
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9f ec       	ldi	r25, 0xCF	; 207
    1fd8:	98 0f       	add	r25, r24
    1fda:	99 30       	cpi	r25, 0x09	; 9
    1fdc:	20 f0       	brcs	.+8      	; 0x1fe6 <HEX_to_decimal+0x76>
    1fde:	8d 33       	cpi	r24, 0x3D	; 61
    1fe0:	11 f0       	breq	.+4      	; 0x1fe6 <HEX_to_decimal+0x76>
    1fe2:	87 34       	cpi	r24, 0x47	; 71
    1fe4:	99 f7       	brne	.-26     	; 0x1fcc <HEX_to_decimal+0x5c>
			if(pressed_key=='G'){
    1fe6:	87 34       	cpi	r24, 0x47	; 71
    1fe8:	d9 f0       	breq	.+54     	; 0x2020 <HEX_to_decimal+0xb0>
				flag=1;
				continue;
			}
			if (pressed_key=='=')
    1fea:	8d 33       	cpi	r24, 0x3D	; 61
    1fec:	d1 f0       	breq	.+52     	; 0x2022 <HEX_to_decimal+0xb2>
			continue;
			if(flag==1){
    1fee:	11 30       	cpi	r17, 0x01	; 1
    1ff0:	69 f4       	brne	.+26     	; 0x200c <HEX_to_decimal+0x9c>
				LCD_enuSendData(pressed_key+16);
    1ff2:	80 5f       	subi	r24, 0xF0	; 240
    1ff4:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
				array_num[j++]=pressed_key+16;
    1ff8:	ec 2d       	mov	r30, r12
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	ea 52       	subi	r30, 0x2A	; 42
    1ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	80 5f       	subi	r24, 0xF0	; 240
    2004:	80 83       	st	Z, r24
    2006:	c3 94       	inc	r12
				flag=0;
    2008:	10 e0       	ldi	r17, 0x00	; 0
    200a:	0b c0       	rjmp	.+22     	; 0x2022 <HEX_to_decimal+0xb2>
			}
			else{
				LCD_enuSendData(pressed_key);
    200c:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
				array_num[j++]=pressed_key;
    2010:	ec 2d       	mov	r30, r12
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	ea 52       	subi	r30, 0x2A	; 42
    2016:	fe 4f       	sbci	r31, 0xFE	; 254
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	80 83       	st	Z, r24
    201c:	c3 94       	inc	r12
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <HEX_to_decimal+0xb2>
		{
			do{
				KPD_enu_GetPressed(&pressed_key);
			}while((pressed_key<'1'||pressed_key>'9')&&pressed_key!='='&&pressed_key!='G');
			if(pressed_key=='G'){
				flag=1;
    2020:	11 e0       	ldi	r17, 0x01	; 1
			}
			else{
				LCD_enuSendData(pressed_key);
				array_num[j++]=pressed_key;
			}
		} while (pressed_key!='=');
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	8d 33       	cpi	r24, 0x3D	; 61
    2026:	91 f6       	brne	.-92     	; 0x1fcc <HEX_to_decimal+0x5c>
		array_num[j]='\0';
    2028:	d1 2c       	mov	r13, r1
    202a:	f6 01       	movw	r30, r12
    202c:	ea 52       	subi	r30, 0x2A	; 42
    202e:	fe 4f       	sbci	r31, 0xFE	; 254
    2030:	10 82       	st	Z, r1
		LCD_enuClearScreen();
    2032:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		for (int i=0;i<j;i++)
    2036:	e1 2c       	mov	r14, r1
    2038:	f1 2c       	mov	r15, r1


void HEX_to_decimal(void){

		u8 pressed_key,j=0,flag=0;
		u32 decimal_number=0;
    203a:	81 2c       	mov	r8, r1
    203c:	91 2c       	mov	r9, r1
    203e:	54 01       	movw	r10, r8
				array_num[j++]=pressed_key;
			}
		} while (pressed_key!='=');
		array_num[j]='\0';
		LCD_enuClearScreen();
		for (int i=0;i<j;i++)
    2040:	3e c0       	rjmp	.+124    	; 0x20be <HEX_to_decimal+0x14e>
		{
			u8 digit=array_num[j-i-1];
    2042:	f6 01       	movw	r30, r12
    2044:	ee 19       	sub	r30, r14
    2046:	ff 09       	sbc	r31, r15
    2048:	eb 52       	subi	r30, 0x2B	; 43
    204a:	fe 4f       	sbci	r31, 0xFE	; 254
    204c:	00 81       	ld	r16, Z
			if(Is_digit(digit)){
    204e:	80 2f       	mov	r24, r16
    2050:	0e 94 e5 06 	call	0xdca	; 0xdca <Is_digit>
    2054:	89 2b       	or	r24, r25
    2056:	b1 f0       	breq	.+44     	; 0x2084 <HEX_to_decimal+0x114>
				decimal_number+=(digit-'0')*(1<<(4*i));
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	00 53       	subi	r16, 0x30	; 48
    205c:	11 09       	sbc	r17, r1
    205e:	c7 01       	movw	r24, r14
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	02 c0       	rjmp	.+4      	; 0x206e <HEX_to_decimal+0xfe>
    206a:	00 0f       	add	r16, r16
    206c:	11 1f       	adc	r17, r17
    206e:	8a 95       	dec	r24
    2070:	e2 f7       	brpl	.-8      	; 0x206a <HEX_to_decimal+0xfa>
    2072:	01 2e       	mov	r0, r17
    2074:	00 0c       	add	r0, r0
    2076:	22 0b       	sbc	r18, r18
    2078:	33 0b       	sbc	r19, r19
    207a:	80 0e       	add	r8, r16
    207c:	91 1e       	adc	r9, r17
    207e:	a2 1e       	adc	r10, r18
    2080:	b3 1e       	adc	r11, r19
    2082:	1a c0       	rjmp	.+52     	; 0x20b8 <HEX_to_decimal+0x148>
			}
			else if(isxdigit(digit)){
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	c8 01       	movw	r24, r16
    2088:	0e 94 01 1a 	call	0x3402	; 0x3402 <isxdigit>
    208c:	89 2b       	or	r24, r25
    208e:	a1 f0       	breq	.+40     	; 0x20b8 <HEX_to_decimal+0x148>
				decimal_number+=(digit-'A'+10)*(1<<(4*i));
    2090:	07 53       	subi	r16, 0x37	; 55
    2092:	11 09       	sbc	r17, r1
    2094:	c7 01       	movw	r24, r14
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <HEX_to_decimal+0x134>
    20a0:	00 0f       	add	r16, r16
    20a2:	11 1f       	adc	r17, r17
    20a4:	8a 95       	dec	r24
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <HEX_to_decimal+0x130>
    20a8:	01 2e       	mov	r0, r17
    20aa:	00 0c       	add	r0, r0
    20ac:	22 0b       	sbc	r18, r18
    20ae:	33 0b       	sbc	r19, r19
    20b0:	80 0e       	add	r8, r16
    20b2:	91 1e       	adc	r9, r17
    20b4:	a2 1e       	adc	r10, r18
    20b6:	b3 1e       	adc	r11, r19
				array_num[j++]=pressed_key;
			}
		} while (pressed_key!='=');
		array_num[j]='\0';
		LCD_enuClearScreen();
		for (int i=0;i<j;i++)
    20b8:	2f ef       	ldi	r18, 0xFF	; 255
    20ba:	e2 1a       	sub	r14, r18
    20bc:	f2 0a       	sbc	r15, r18
    20be:	ec 14       	cp	r14, r12
    20c0:	fd 04       	cpc	r15, r13
    20c2:	0c f4       	brge	.+2      	; 0x20c6 <HEX_to_decimal+0x156>
    20c4:	be cf       	rjmp	.-132    	; 0x2042 <HEX_to_decimal+0xd2>
			}
			else if(isxdigit(digit)){
				decimal_number+=(digit-'A'+10)*(1<<(4*i));
			}
		}
		LCD_enuSendNumber(decimal_number);
    20c6:	28 2d       	mov	r18, r8
    20c8:	39 2d       	mov	r19, r9
    20ca:	4a 2d       	mov	r20, r10
    20cc:	5b 2d       	mov	r21, r11
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_enuSendNumber>
		LCD_enuSetPosition(2,1);
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
		LCD_enuSendString("C-Finish read");
    20e2:	85 ec       	ldi	r24, 0xC5	; 197
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
		do{
			KPD_enu_GetPressed(&pressed_key);
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		}while(pressed_key!='C'&&pressed_key!='M');
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	83 34       	cpi	r24, 0x43	; 67
    20f6:	11 f0       	breq	.+4      	; 0x20fc <HEX_to_decimal+0x18c>
    20f8:	8d 34       	cpi	r24, 0x4D	; 77
    20fa:	b9 f7       	brne	.-18     	; 0x20ea <HEX_to_decimal+0x17a>
}
    20fc:	0f 90       	pop	r0
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	bf 90       	pop	r11
    2110:	af 90       	pop	r10
    2112:	9f 90       	pop	r9
    2114:	8f 90       	pop	r8
    2116:	08 95       	ret

00002118 <hex_to_binary>:
			LCD_enuSendString("C-Finish read");
			do{
				KPD_enu_GetPressed(&pressed_key);
			}while(pressed_key!='C'&&pressed_key!='M');
}
void hex_to_binary(char hex_char, char* binary_string) {
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	eb 01       	movw	r28, r22
	switch (toupper(hex_char)) {
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 0d 1a 	call	0x341a	; 0x341a <toupper>
    2124:	c0 97       	sbiw	r24, 0x30	; 48
    2126:	87 31       	cpi	r24, 0x17	; 23
    2128:	91 05       	cpc	r25, r1
    212a:	08 f0       	brcs	.+2      	; 0x212e <hex_to_binary+0x16>
    212c:	95 c0       	rjmp	.+298    	; 0x2258 <hex_to_binary+0x140>
    212e:	86 5d       	subi	r24, 0xD6	; 214
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	fc 01       	movw	r30, r24
    2134:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__tablejump2__>
		case '0': strcpy(binary_string, "0000"); break;
    2138:	85 e0       	ldi	r24, 0x05	; 5
    213a:	e3 ef       	ldi	r30, 0xF3	; 243
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	de 01       	movw	r26, r28
    2140:	01 90       	ld	r0, Z+
    2142:	0d 92       	st	X+, r0
    2144:	8a 95       	dec	r24
    2146:	e1 f7       	brne	.-8      	; 0x2140 <hex_to_binary+0x28>
    2148:	88 c0       	rjmp	.+272    	; 0x225a <hex_to_binary+0x142>
		case '1': strcpy(binary_string, "0001"); break;
    214a:	85 e0       	ldi	r24, 0x05	; 5
    214c:	e8 ef       	ldi	r30, 0xF8	; 248
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	de 01       	movw	r26, r28
    2152:	01 90       	ld	r0, Z+
    2154:	0d 92       	st	X+, r0
    2156:	8a 95       	dec	r24
    2158:	e1 f7       	brne	.-8      	; 0x2152 <hex_to_binary+0x3a>
    215a:	7f c0       	rjmp	.+254    	; 0x225a <hex_to_binary+0x142>
		case '2': strcpy(binary_string, "0010"); break;
    215c:	85 e0       	ldi	r24, 0x05	; 5
    215e:	ed ef       	ldi	r30, 0xFD	; 253
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	de 01       	movw	r26, r28
    2164:	01 90       	ld	r0, Z+
    2166:	0d 92       	st	X+, r0
    2168:	8a 95       	dec	r24
    216a:	e1 f7       	brne	.-8      	; 0x2164 <hex_to_binary+0x4c>
    216c:	76 c0       	rjmp	.+236    	; 0x225a <hex_to_binary+0x142>
		case '3': strcpy(binary_string, "0011"); break;
    216e:	85 e0       	ldi	r24, 0x05	; 5
    2170:	e2 e0       	ldi	r30, 0x02	; 2
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	de 01       	movw	r26, r28
    2176:	01 90       	ld	r0, Z+
    2178:	0d 92       	st	X+, r0
    217a:	8a 95       	dec	r24
    217c:	e1 f7       	brne	.-8      	; 0x2176 <hex_to_binary+0x5e>
    217e:	6d c0       	rjmp	.+218    	; 0x225a <hex_to_binary+0x142>
		case '4': strcpy(binary_string, "0100"); break;
    2180:	85 e0       	ldi	r24, 0x05	; 5
    2182:	e7 e0       	ldi	r30, 0x07	; 7
    2184:	f1 e0       	ldi	r31, 0x01	; 1
    2186:	de 01       	movw	r26, r28
    2188:	01 90       	ld	r0, Z+
    218a:	0d 92       	st	X+, r0
    218c:	8a 95       	dec	r24
    218e:	e1 f7       	brne	.-8      	; 0x2188 <hex_to_binary+0x70>
    2190:	64 c0       	rjmp	.+200    	; 0x225a <hex_to_binary+0x142>
		case '5': strcpy(binary_string, "0101"); break;
    2192:	85 e0       	ldi	r24, 0x05	; 5
    2194:	ec e0       	ldi	r30, 0x0C	; 12
    2196:	f1 e0       	ldi	r31, 0x01	; 1
    2198:	de 01       	movw	r26, r28
    219a:	01 90       	ld	r0, Z+
    219c:	0d 92       	st	X+, r0
    219e:	8a 95       	dec	r24
    21a0:	e1 f7       	brne	.-8      	; 0x219a <hex_to_binary+0x82>
    21a2:	5b c0       	rjmp	.+182    	; 0x225a <hex_to_binary+0x142>
		case '6': strcpy(binary_string, "0110"); break;
    21a4:	85 e0       	ldi	r24, 0x05	; 5
    21a6:	e1 e1       	ldi	r30, 0x11	; 17
    21a8:	f1 e0       	ldi	r31, 0x01	; 1
    21aa:	de 01       	movw	r26, r28
    21ac:	01 90       	ld	r0, Z+
    21ae:	0d 92       	st	X+, r0
    21b0:	8a 95       	dec	r24
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <hex_to_binary+0x94>
    21b4:	52 c0       	rjmp	.+164    	; 0x225a <hex_to_binary+0x142>
		case '7': strcpy(binary_string, "0111"); break;
    21b6:	85 e0       	ldi	r24, 0x05	; 5
    21b8:	e6 e1       	ldi	r30, 0x16	; 22
    21ba:	f1 e0       	ldi	r31, 0x01	; 1
    21bc:	de 01       	movw	r26, r28
    21be:	01 90       	ld	r0, Z+
    21c0:	0d 92       	st	X+, r0
    21c2:	8a 95       	dec	r24
    21c4:	e1 f7       	brne	.-8      	; 0x21be <hex_to_binary+0xa6>
    21c6:	49 c0       	rjmp	.+146    	; 0x225a <hex_to_binary+0x142>
		case '8': strcpy(binary_string, "1000"); break;
    21c8:	85 e0       	ldi	r24, 0x05	; 5
    21ca:	eb e1       	ldi	r30, 0x1B	; 27
    21cc:	f1 e0       	ldi	r31, 0x01	; 1
    21ce:	de 01       	movw	r26, r28
    21d0:	01 90       	ld	r0, Z+
    21d2:	0d 92       	st	X+, r0
    21d4:	8a 95       	dec	r24
    21d6:	e1 f7       	brne	.-8      	; 0x21d0 <hex_to_binary+0xb8>
    21d8:	40 c0       	rjmp	.+128    	; 0x225a <hex_to_binary+0x142>
		case '9': strcpy(binary_string, "1001"); break;
    21da:	85 e0       	ldi	r24, 0x05	; 5
    21dc:	e0 e2       	ldi	r30, 0x20	; 32
    21de:	f1 e0       	ldi	r31, 0x01	; 1
    21e0:	de 01       	movw	r26, r28
    21e2:	01 90       	ld	r0, Z+
    21e4:	0d 92       	st	X+, r0
    21e6:	8a 95       	dec	r24
    21e8:	e1 f7       	brne	.-8      	; 0x21e2 <hex_to_binary+0xca>
    21ea:	37 c0       	rjmp	.+110    	; 0x225a <hex_to_binary+0x142>
		case 'A': strcpy(binary_string, "1010"); break;
    21ec:	85 e0       	ldi	r24, 0x05	; 5
    21ee:	e5 e2       	ldi	r30, 0x25	; 37
    21f0:	f1 e0       	ldi	r31, 0x01	; 1
    21f2:	de 01       	movw	r26, r28
    21f4:	01 90       	ld	r0, Z+
    21f6:	0d 92       	st	X+, r0
    21f8:	8a 95       	dec	r24
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <hex_to_binary+0xdc>
    21fc:	2e c0       	rjmp	.+92     	; 0x225a <hex_to_binary+0x142>
		case 'B': strcpy(binary_string, "1011"); break;
    21fe:	85 e0       	ldi	r24, 0x05	; 5
    2200:	ea e2       	ldi	r30, 0x2A	; 42
    2202:	f1 e0       	ldi	r31, 0x01	; 1
    2204:	de 01       	movw	r26, r28
    2206:	01 90       	ld	r0, Z+
    2208:	0d 92       	st	X+, r0
    220a:	8a 95       	dec	r24
    220c:	e1 f7       	brne	.-8      	; 0x2206 <hex_to_binary+0xee>
    220e:	25 c0       	rjmp	.+74     	; 0x225a <hex_to_binary+0x142>
		case 'C': strcpy(binary_string, "1100"); break;
    2210:	85 e0       	ldi	r24, 0x05	; 5
    2212:	ef e2       	ldi	r30, 0x2F	; 47
    2214:	f1 e0       	ldi	r31, 0x01	; 1
    2216:	de 01       	movw	r26, r28
    2218:	01 90       	ld	r0, Z+
    221a:	0d 92       	st	X+, r0
    221c:	8a 95       	dec	r24
    221e:	e1 f7       	brne	.-8      	; 0x2218 <hex_to_binary+0x100>
    2220:	1c c0       	rjmp	.+56     	; 0x225a <hex_to_binary+0x142>
		case 'D': strcpy(binary_string, "1101"); break;
    2222:	85 e0       	ldi	r24, 0x05	; 5
    2224:	e4 e3       	ldi	r30, 0x34	; 52
    2226:	f1 e0       	ldi	r31, 0x01	; 1
    2228:	de 01       	movw	r26, r28
    222a:	01 90       	ld	r0, Z+
    222c:	0d 92       	st	X+, r0
    222e:	8a 95       	dec	r24
    2230:	e1 f7       	brne	.-8      	; 0x222a <hex_to_binary+0x112>
    2232:	13 c0       	rjmp	.+38     	; 0x225a <hex_to_binary+0x142>
		case 'E': strcpy(binary_string, "1110"); break;
    2234:	85 e0       	ldi	r24, 0x05	; 5
    2236:	e9 e3       	ldi	r30, 0x39	; 57
    2238:	f1 e0       	ldi	r31, 0x01	; 1
    223a:	de 01       	movw	r26, r28
    223c:	01 90       	ld	r0, Z+
    223e:	0d 92       	st	X+, r0
    2240:	8a 95       	dec	r24
    2242:	e1 f7       	brne	.-8      	; 0x223c <hex_to_binary+0x124>
    2244:	0a c0       	rjmp	.+20     	; 0x225a <hex_to_binary+0x142>
		case 'F': strcpy(binary_string, "1111"); break;
    2246:	85 e0       	ldi	r24, 0x05	; 5
    2248:	ee e3       	ldi	r30, 0x3E	; 62
    224a:	f1 e0       	ldi	r31, 0x01	; 1
    224c:	de 01       	movw	r26, r28
    224e:	01 90       	ld	r0, Z+
    2250:	0d 92       	st	X+, r0
    2252:	8a 95       	dec	r24
    2254:	e1 f7       	brne	.-8      	; 0x224e <hex_to_binary+0x136>
    2256:	01 c0       	rjmp	.+2      	; 0x225a <hex_to_binary+0x142>
		default: strcpy(binary_string, ""); break; // Handle invalid input
    2258:	18 82       	st	Y, r1
	}
}
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <HEX_to_binary>:
		LCD_enuSendString("C-Finish read");
		do{
			KPD_enu_GetPressed(&pressed_key);
		}while(pressed_key!='C'&&pressed_key!='M');
}
void HEX_to_binary(void){
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	c6 58       	subi	r28, 0x86	; 134
    2272:	d1 09       	sbc	r29, r1
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
			u8 pressed_key,j=0,flag=0;
			u8 binary_number[128]={0}; // Ensure enough space for binary output (4 bits per hex digit)
    227e:	fe 01       	movw	r30, r28
    2280:	32 96       	adiw	r30, 0x02	; 2
    2282:	80 e8       	ldi	r24, 0x80	; 128
    2284:	df 01       	movw	r26, r30
    2286:	1d 92       	st	X+, r1
    2288:	8a 95       	dec	r24
    228a:	e9 f7       	brne	.-6      	; 0x2286 <HEX_to_binary+0x26>
			u8 binary_string[5]={0}; // Temporary storage for binary conversion of a single hex digit
    228c:	e0 58       	subi	r30, 0x80	; 128
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	85 e0       	ldi	r24, 0x05	; 5
    2292:	df 01       	movw	r26, r30
    2294:	1d 92       	st	X+, r1
    2296:	8a 95       	dec	r24
    2298:	e9 f7       	brne	.-6      	; 0x2294 <HEX_to_binary+0x34>
			LCD_enuClearScreen();
    229a:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			LCD_enuSetPosition(1,1);
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("G- Before NUM to");
    22a6:	83 ed       	ldi	r24, 0xD3	; 211
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			LCD_enuSetPosition(2,1);
    22ae:	61 e0       	ldi	r22, 0x01	; 1
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("Write Alphabet");
    22b6:	84 ee       	ldi	r24, 0xE4	; 228
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
    22be:	bf ef       	ldi	r27, 0xFF	; 255
    22c0:	24 e3       	ldi	r18, 0x34	; 52
    22c2:	8c e0       	ldi	r24, 0x0C	; 12
    22c4:	b1 50       	subi	r27, 0x01	; 1
    22c6:	20 40       	sbci	r18, 0x00	; 0
    22c8:	80 40       	sbci	r24, 0x00	; 0
    22ca:	e1 f7       	brne	.-8      	; 0x22c4 <HEX_to_binary+0x64>
    22cc:	00 c0       	rjmp	.+0      	; 0x22ce <HEX_to_binary+0x6e>
    22ce:	00 00       	nop
			_delay_ms(500);
			LCD_enuClearScreen();
    22d0:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
		do{
			KPD_enu_GetPressed(&pressed_key);
		}while(pressed_key!='C'&&pressed_key!='M');
}
void HEX_to_binary(void){
			u8 pressed_key,j=0,flag=0;
    22d4:	10 e0       	ldi	r17, 0x00	; 0
    22d6:	e1 2c       	mov	r14, r1
			_delay_ms(500);
			LCD_enuClearScreen();
			do
			{
				do{
					KPD_enu_GetPressed(&pressed_key);
    22d8:	ce 01       	movw	r24, r28
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
				}while((pressed_key<'1'||pressed_key>'9')&&pressed_key!='='&&pressed_key!='G');
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9f ec       	ldi	r25, 0xCF	; 207
    22e4:	98 0f       	add	r25, r24
    22e6:	99 30       	cpi	r25, 0x09	; 9
    22e8:	20 f0       	brcs	.+8      	; 0x22f2 <HEX_to_binary+0x92>
    22ea:	8d 33       	cpi	r24, 0x3D	; 61
    22ec:	11 f0       	breq	.+4      	; 0x22f2 <HEX_to_binary+0x92>
    22ee:	87 34       	cpi	r24, 0x47	; 71
    22f0:	99 f7       	brne	.-26     	; 0x22d8 <HEX_to_binary+0x78>
				if(pressed_key=='G'){
    22f2:	87 34       	cpi	r24, 0x47	; 71
    22f4:	d9 f0       	breq	.+54     	; 0x232c <HEX_to_binary+0xcc>
					flag=1;
					continue;
				}
				if (pressed_key=='=')
    22f6:	8d 33       	cpi	r24, 0x3D	; 61
    22f8:	d1 f0       	breq	.+52     	; 0x232e <HEX_to_binary+0xce>
				continue;
				if(flag==1){
    22fa:	11 30       	cpi	r17, 0x01	; 1
    22fc:	69 f4       	brne	.+26     	; 0x2318 <HEX_to_binary+0xb8>
					LCD_enuSendData(pressed_key+16);
    22fe:	80 5f       	subi	r24, 0xF0	; 240
    2300:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
					array_num[j++]=pressed_key+16;
    2304:	ee 2d       	mov	r30, r14
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	ea 52       	subi	r30, 0x2A	; 42
    230a:	fe 4f       	sbci	r31, 0xFE	; 254
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	80 5f       	subi	r24, 0xF0	; 240
    2310:	80 83       	st	Z, r24
    2312:	e3 94       	inc	r14
					flag=0;
    2314:	10 e0       	ldi	r17, 0x00	; 0
    2316:	0b c0       	rjmp	.+22     	; 0x232e <HEX_to_binary+0xce>
				}
				else{
					LCD_enuSendData(pressed_key);
    2318:	0e 94 3c 04 	call	0x878	; 0x878 <LCD_enuSendData>
					array_num[j++]=pressed_key;
    231c:	ee 2d       	mov	r30, r14
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	ea 52       	subi	r30, 0x2A	; 42
    2322:	fe 4f       	sbci	r31, 0xFE	; 254
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	e3 94       	inc	r14
    232a:	01 c0       	rjmp	.+2      	; 0x232e <HEX_to_binary+0xce>
			{
				do{
					KPD_enu_GetPressed(&pressed_key);
				}while((pressed_key<'1'||pressed_key>'9')&&pressed_key!='='&&pressed_key!='G');
				if(pressed_key=='G'){
					flag=1;
    232c:	11 e0       	ldi	r17, 0x01	; 1
				}
				else{
					LCD_enuSendData(pressed_key);
					array_num[j++]=pressed_key;
				}
			} while (pressed_key!='=');
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	8d 33       	cpi	r24, 0x3D	; 61
    2332:	91 f6       	brne	.-92     	; 0x22d8 <HEX_to_binary+0x78>
			array_num[j]='\0';
    2334:	f1 2c       	mov	r15, r1
    2336:	f7 01       	movw	r30, r14
    2338:	ea 52       	subi	r30, 0x2A	; 42
    233a:	fe 4f       	sbci	r31, 0xFE	; 254
    233c:	10 82       	st	Z, r1
			LCD_enuClearScreen();
    233e:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
			 for (int i = 0; i < j; i++)
    2342:	00 e0       	ldi	r16, 0x00	; 0
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	12 c0       	rjmp	.+36     	; 0x236c <HEX_to_binary+0x10c>
			  {
				hex_to_binary(array_num[i], binary_string);
    2348:	f8 01       	movw	r30, r16
    234a:	ea 52       	subi	r30, 0x2A	; 42
    234c:	fe 4f       	sbci	r31, 0xFE	; 254
    234e:	be 01       	movw	r22, r28
    2350:	6e 57       	subi	r22, 0x7E	; 126
    2352:	7f 4f       	sbci	r23, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	0e 94 8c 10 	call	0x2118	; 0x2118 <hex_to_binary>
				strcat(binary_number, binary_string);
    235a:	be 01       	movw	r22, r28
    235c:	6e 57       	subi	r22, 0x7E	; 126
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	ce 01       	movw	r24, r28
    2362:	02 96       	adiw	r24, 0x02	; 2
    2364:	0e 94 15 1a 	call	0x342a	; 0x342a <strcat>
					array_num[j++]=pressed_key;
				}
			} while (pressed_key!='=');
			array_num[j]='\0';
			LCD_enuClearScreen();
			 for (int i = 0; i < j; i++)
    2368:	0f 5f       	subi	r16, 0xFF	; 255
    236a:	1f 4f       	sbci	r17, 0xFF	; 255
    236c:	0e 15       	cp	r16, r14
    236e:	1f 05       	cpc	r17, r15
    2370:	5c f3       	brlt	.-42     	; 0x2348 <HEX_to_binary+0xe8>
			  {
				hex_to_binary(array_num[i], binary_string);
				strcat(binary_number, binary_string);
				}
			LCD_enuSendString(binary_number);
    2372:	ce 01       	movw	r24, r28
    2374:	02 96       	adiw	r24, 0x02	; 2
    2376:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			LCD_enuSetPosition(2,1);
    237a:	61 e0       	ldi	r22, 0x01	; 1
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
			LCD_enuSendString("C-Finish read");
    2382:	85 ec       	ldi	r24, 0xC5	; 197
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
			do{
				KPD_enu_GetPressed(&pressed_key);
    238a:	ce 01       	movw	r24, r28
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
			}while(pressed_key!='C'&&pressed_key!='M');
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	83 34       	cpi	r24, 0x43	; 67
    2396:	11 f0       	breq	.+4      	; 0x239c <HEX_to_binary+0x13c>
    2398:	8d 34       	cpi	r24, 0x4D	; 77
    239a:	b9 f7       	brne	.-18     	; 0x238a <HEX_to_binary+0x12a>
}
    239c:	ca 57       	subi	r28, 0x7A	; 122
    239e:	df 4f       	sbci	r29, 0xFF	; 255
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	ff 90       	pop	r15
    23b4:	ef 90       	pop	r14
    23b6:	08 95       	ret

000023b8 <Mode2>:
	clear_stack(&s1);
	clear_stack(&s2);
	return 1;
}
void Mode2(void)
{
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	1f 92       	push	r1
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	u8 pressed_key, convert_from, convert_to;
	LCD_enuClearScreen();
    23c4:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	LCD_enuSetPosition(1, 1);
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("convert from : ");
    23d0:	83 e4       	ldi	r24, 0x43	; 67
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2, 1);
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("1D   2B   3H ");
    23e0:	83 e5       	ldi	r24, 0x53	; 83
    23e2:	91 e0       	ldi	r25, 0x01	; 1
    23e4:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do
	{
			KPD_enu_GetPressed(&pressed_key);
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	} while (pressed_key != '1' &&pressed_key != '2'&&pressed_key != '3');
    23f0:	19 81       	ldd	r17, Y+1	; 0x01
    23f2:	8f ec       	ldi	r24, 0xCF	; 207
    23f4:	81 0f       	add	r24, r17
    23f6:	83 30       	cpi	r24, 0x03	; 3
    23f8:	b8 f7       	brcc	.-18     	; 0x23e8 <Mode2+0x30>
	convert_from = pressed_key;
	LCD_enuClearScreen();
    23fa:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	LCD_enuSetPosition(1, 1);
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("convert to : ");
    2406:	81 e6       	ldi	r24, 0x61	; 97
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2, 1);
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("1D   2B   3H");
    2416:	8f e6       	ldi	r24, 0x6F	; 111
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do
	{
			KPD_enu_GetPressed(&pressed_key);		
    241e:	ce 01       	movw	r24, r28
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	} while (pressed_key != '1' &&pressed_key != '2'&&pressed_key != '3');
    2426:	29 81       	ldd	r18, Y+1	; 0x01
    2428:	8f ec       	ldi	r24, 0xCF	; 207
    242a:	82 0f       	add	r24, r18
    242c:	83 30       	cpi	r24, 0x03	; 3
    242e:	b8 f7       	brcc	.-18     	; 0x241e <Mode2+0x66>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <Mode2+0x80>
	convert_to = pressed_key;
		for (int i=0;i<999;i++);
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	87 3e       	cpi	r24, 0xE7	; 231
    243a:	33 e0       	ldi	r19, 0x03	; 3
    243c:	93 07       	cpc	r25, r19
    243e:	dc f3       	brlt	.-10     	; 0x2436 <Mode2+0x7e>
	switch(convert_from)
    2440:	12 33       	cpi	r17, 0x32	; 50
    2442:	99 f0       	breq	.+38     	; 0x246a <Mode2+0xb2>
    2444:	13 33       	cpi	r17, 0x33	; 51
    2446:	01 f1       	breq	.+64     	; 0x2488 <Mode2+0xd0>
    2448:	11 33       	cpi	r17, 0x31	; 49
    244a:	61 f5       	brne	.+88     	; 0x24a4 <Mode2+0xec>
			{
			case '1':
				switch(convert_to)
    244c:	22 33       	cpi	r18, 0x32	; 50
    244e:	39 f0       	breq	.+14     	; 0x245e <Mode2+0xa6>
    2450:	23 33       	cpi	r18, 0x33	; 51
    2452:	41 f0       	breq	.+16     	; 0x2464 <Mode2+0xac>
    2454:	21 33       	cpi	r18, 0x31	; 49
    2456:	31 f5       	brne	.+76     	; 0x24a4 <Mode2+0xec>
				{
					case '1':
					decimal_to_decimal();
    2458:	0e 94 35 0c 	call	0x186a	; 0x186a <decimal_to_decimal>
					break;
    245c:	23 c0       	rjmp	.+70     	; 0x24a4 <Mode2+0xec>
					case '2':
					decimal_to_binary();
    245e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <decimal_to_binary>
					break;
    2462:	20 c0       	rjmp	.+64     	; 0x24a4 <Mode2+0xec>
					case '3':
					decimal_to_HEX();
    2464:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <decimal_to_HEX>
					break;
    2468:	1d c0       	rjmp	.+58     	; 0x24a4 <Mode2+0xec>
				}
			break;
			case '2':
				switch(convert_to)
    246a:	22 33       	cpi	r18, 0x32	; 50
    246c:	39 f0       	breq	.+14     	; 0x247c <Mode2+0xc4>
    246e:	23 33       	cpi	r18, 0x33	; 51
    2470:	41 f0       	breq	.+16     	; 0x2482 <Mode2+0xca>
    2472:	21 33       	cpi	r18, 0x31	; 49
    2474:	b9 f4       	brne	.+46     	; 0x24a4 <Mode2+0xec>
				{
					case '1':
					binary_to_decimal();
    2476:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <binary_to_decimal>
					break;
    247a:	14 c0       	rjmp	.+40     	; 0x24a4 <Mode2+0xec>
					case '2':
					binary_to_binary();
    247c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <binary_to_binary>
					break;
    2480:	11 c0       	rjmp	.+34     	; 0x24a4 <Mode2+0xec>
					case '3':
					binary_to_HEX();
    2482:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <binary_to_HEX>
					break;
    2486:	0e c0       	rjmp	.+28     	; 0x24a4 <Mode2+0xec>
				}
			break;
			case '3':
				{
					switch(convert_to)
    2488:	22 33       	cpi	r18, 0x32	; 50
    248a:	39 f0       	breq	.+14     	; 0x249a <Mode2+0xe2>
    248c:	23 33       	cpi	r18, 0x33	; 51
    248e:	41 f0       	breq	.+16     	; 0x24a0 <Mode2+0xe8>
    2490:	21 33       	cpi	r18, 0x31	; 49
    2492:	41 f4       	brne	.+16     	; 0x24a4 <Mode2+0xec>
					{
						case '1':
						HEX_to_decimal();
    2494:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <HEX_to_decimal>
						break;
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <Mode2+0xec>
						case '2':
						HEX_to_binary();
    249a:	0e 94 30 11 	call	0x2260	; 0x2260 <HEX_to_binary>
						break;
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <Mode2+0xec>
						case '3':
						HEX_to_HEX();
    24a0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <HEX_to_HEX>
						break;
					}
				}
			break;
			}
	LCD_enuSetPosition(1, 1);
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("C- mode continue ");
    24ac:	8c e7       	ldi	r24, 0x7C	; 124
    24ae:	91 e0       	ldi	r25, 0x01	; 1
    24b0:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2, 1);
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("M- change mode ");
    24bc:	8e e8       	ldi	r24, 0x8E	; 142
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do 
	{
		KPD_enu_GetPressed(&pressed_key);
    24c4:	ce 01       	movw	r24, r28
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
	} while (pressed_key!='C'&&pressed_key!='M');	
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	83 34       	cpi	r24, 0x43	; 67
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <Mode2+0x11e>
    24d2:	8d 34       	cpi	r24, 0x4D	; 77
    24d4:	b9 f7       	brne	.-18     	; 0x24c4 <Mode2+0x10c>
		flag1=1;	
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <flag1>
}
    24dc:	0f 90       	pop	r0
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	08 95       	ret

000024e6 <Mode3>:
		default: strcpy(binary_string, ""); break; // Handle invalid input
	}
}

void Mode3(void)
{
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	1f 92       	push	r1
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	// make game on lcd and keypad
		u8 pressed_key;
	LCD_enuClearScreen();
    24f0:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	LCD_enuSetPosition(1,1);
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("Game mode ");
    24fc:	8e e9       	ldi	r24, 0x9E	; 158
    24fe:	91 e0       	ldi	r25, 0x01	; 1
    2500:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
    do 
    {
	  KPD_enu_GetPressed(&pressed_key);
    2504:	ce 01       	movw	r24, r28
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
    } while (pressed_key==0xFF);
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	8f 3f       	cpi	r24, 0xFF	; 255
    2510:	c9 f3       	breq	.-14     	; 0x2504 <Mode3+0x1e>
	flag1=1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <flag1>
}
    2518:	0f 90       	pop	r0
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <FUN>:
volatile u8 Mode = 0;
volatile u8 LOC_u8PinState=1;
volatile u8 pressed_key;
void FUN(void)
{
	if(pressed_key=='M'){
    2520:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <pressed_key>
    2524:	8d 34       	cpi	r24, 0x4D	; 77
    2526:	d9 f4       	brne	.+54     	; 0x255e <FUN+0x3e>
	DIO_Enu_GetPinValue(DIO_u8PORTD, DIO_u8PIN1, &LOC_u8PinState);
    2528:	46 e6       	ldi	r20, 0x66	; 102
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_Enu_GetPinValue>
	if (LOC_u8PinState == 0){
    2534:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <LOC_u8PinState>
    2538:	81 11       	cpse	r24, r1
    253a:	11 c0       	rjmp	.+34     	; 0x255e <FUN+0x3e>
	Mode = (Mode % 3) + 1;
    253c:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <Mode>
    2540:	8b ea       	ldi	r24, 0xAB	; 171
    2542:	98 9f       	mul	r25, r24
    2544:	81 2d       	mov	r24, r1
    2546:	11 24       	eor	r1, r1
    2548:	86 95       	lsr	r24
    254a:	28 2f       	mov	r18, r24
    254c:	22 0f       	add	r18, r18
    254e:	82 0f       	add	r24, r18
    2550:	98 1b       	sub	r25, r24
    2552:	9f 5f       	subi	r25, 0xFF	; 255
    2554:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <Mode>
	LOC_u8PinState=1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <LOC_u8PinState>
    255e:	08 95       	ret

00002560 <main>:
}
}

int main(void)
{
	DIO_Enu_Init();
    2560:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_Enu_Init>
	LCD_enuInit();
    2564:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_enuInit>
	KPD_enu_Init();
    2568:	0e 94 21 03 	call	0x642	; 0x642 <KPD_enu_Init>
	CGI();
    256c:	f8 94       	cli
	EXI_TriggerEdge(EX_INT0, FALLING_EDGE);
    256e:	62 e0       	ldi	r22, 0x02	; 2
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0e 94 46 02 	call	0x48c	; 0x48c <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	0e 94 34 02 	call	0x468	; 0x468 <EXI_Enable>
	SGI();
    257c:	78 94       	sei
	EXI_SetCallBack(EX_INT0, FUN);
    257e:	60 e9       	ldi	r22, 0x90	; 144
    2580:	72 e1       	ldi	r23, 0x12	; 18
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <EXI_SetCallBack>
	LCD_enuSetPosition(1, 1);
    2588:	61 e0       	ldi	r22, 0x01	; 1
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("Welcome press(M) ");
    2590:	89 ea       	ldi	r24, 0xA9	; 169
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	LCD_enuSetPosition(2, 1);
    2598:	61 e0       	ldi	r22, 0x01	; 1
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	0e 94 99 05 	call	0xb32	; 0xb32 <LCD_enuSetPosition>
	LCD_enuSendString("1-CAL 2-NUM 3-GM ");
    25a0:	8b eb       	ldi	r24, 0xBB	; 187
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_enuSendString>
	do
	{
		do
		{
			KPD_enu_GetPressed(&pressed_key);
    25a8:	86 ee       	ldi	r24, 0xE6	; 230
    25aa:	91 e0       	ldi	r25, 0x01	; 1
    25ac:	0e 94 87 03 	call	0x70e	; 0x70e <KPD_enu_GetPressed>
		} while (pressed_key == 0xff);
    25b0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <pressed_key>
    25b4:	8f 3f       	cpi	r24, 0xFF	; 255
    25b6:	c1 f3       	breq	.-16     	; 0x25a8 <main+0x48>
	} while (pressed_key != 'M');
    25b8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <pressed_key>
    25bc:	8d 34       	cpi	r24, 0x4D	; 77
    25be:	a1 f7       	brne	.-24     	; 0x25a8 <main+0x48>
	Mode = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Mode>
	LCD_enuClearScreen();
    25c6:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_enuClearScreen>
	while (1)
	{

		switch (Mode)
    25ca:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <Mode>
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	39 f0       	breq	.+14     	; 0x25e0 <main+0x80>
    25d2:	83 30       	cpi	r24, 0x03	; 3
    25d4:	41 f0       	breq	.+16     	; 0x25e6 <main+0x86>
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	c1 f7       	brne	.-16     	; 0x25ca <main+0x6a>
		{
			case 1:
			Mode1();
    25da:	0e 94 9d 08 	call	0x113a	; 0x113a <Mode1>
			break;
    25de:	f5 cf       	rjmp	.-22     	; 0x25ca <main+0x6a>
			case 2:
			Mode2();
    25e0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <Mode2>
			break;
    25e4:	f2 cf       	rjmp	.-28     	; 0x25ca <main+0x6a>
			case 3:
			Mode3();
    25e6:	0e 94 73 12 	call	0x24e6	; 0x24e6 <Mode3>
			break;
    25ea:	ef cf       	rjmp	.-34     	; 0x25ca <main+0x6a>

000025ec <stack_init>:
#include "Stack.h" // Include header file

// Initialize a stack
void stack_init(Stack *stack)
{
    stack->size = 0;
    25ec:	fc 01       	movw	r30, r24
    25ee:	12 82       	std	Z+2, r1	; 0x02
    25f0:	13 82       	std	Z+3, r1	; 0x03
    25f2:	14 82       	std	Z+4, r1	; 0x04
    25f4:	15 82       	std	Z+5, r1	; 0x05
    stack->top = NULL;
    25f6:	11 82       	std	Z+1, r1	; 0x01
    25f8:	10 82       	st	Z, r1
    25fa:	08 95       	ret

000025fc <stack_full>:

// Check if a stack is full
bool stack_full(Stack *stack)
{
    return 0;
}
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	08 95       	ret

00002600 <stack_empty>:

// Check if a stack is empty
bool stack_empty(Stack *stack)
{
    return (stack->size == 0 || stack->top == NULL);
    2600:	fc 01       	movw	r30, r24
    2602:	42 81       	ldd	r20, Z+2	; 0x02
    2604:	53 81       	ldd	r21, Z+3	; 0x03
    2606:	64 81       	ldd	r22, Z+4	; 0x04
    2608:	75 81       	ldd	r23, Z+5	; 0x05
    260a:	45 2b       	or	r20, r21
    260c:	46 2b       	or	r20, r22
    260e:	47 2b       	or	r20, r23
    2610:	31 f0       	breq	.+12     	; 0x261e <stack_empty+0x1e>
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	89 2b       	or	r24, r25
    2618:	21 f4       	brne	.+8      	; 0x2622 <stack_empty+0x22>
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	08 95       	ret
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	08 95       	ret
    2622:	80 e0       	ldi	r24, 0x00	; 0
}
    2624:	08 95       	ret

00002626 <push_stack>:

// Push an element to a stack
bool push_stack(Stack *stack, ELEMENT_TYPE element)
{
    2626:	cf 92       	push	r12
    2628:	df 92       	push	r13
    262a:	ef 92       	push	r14
    262c:	ff 92       	push	r15
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	ec 01       	movw	r28, r24
    2634:	6a 01       	movw	r12, r20
    2636:	7b 01       	movw	r14, r22
    if (!stack_full(stack)) // If the stack is not full
    2638:	0e 94 fe 12 	call	0x25fc	; 0x25fc <stack_full>
    263c:	81 11       	cpse	r24, r1
    263e:	1b c0       	rjmp	.+54     	; 0x2676 <push_stack+0x50>
    {
        StackNode *ptr = (StackNode *)malloc(sizeof(StackNode));
    2640:	86 e0       	ldi	r24, 0x06	; 6
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0e 94 be 18 	call	0x317c	; 0x317c <malloc>
        ptr->data = element;
    2648:	fc 01       	movw	r30, r24
    264a:	c0 82       	st	Z, r12
    264c:	d1 82       	std	Z+1, r13	; 0x01
    264e:	e2 82       	std	Z+2, r14	; 0x02
    2650:	f3 82       	std	Z+3, r15	; 0x03
        ptr->next = stack->top;
    2652:	28 81       	ld	r18, Y
    2654:	39 81       	ldd	r19, Y+1	; 0x01
    2656:	35 83       	std	Z+5, r19	; 0x05
    2658:	24 83       	std	Z+4, r18	; 0x04
        stack->top = ptr;
    265a:	99 83       	std	Y+1, r25	; 0x01
    265c:	88 83       	st	Y, r24
        stack->size++;
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	9b 81       	ldd	r25, Y+3	; 0x03
    2662:	ac 81       	ldd	r26, Y+4	; 0x04
    2664:	bd 81       	ldd	r27, Y+5	; 0x05
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	a1 1d       	adc	r26, r1
    266a:	b1 1d       	adc	r27, r1
    266c:	8a 83       	std	Y+2, r24	; 0x02
    266e:	9b 83       	std	Y+3, r25	; 0x03
    2670:	ac 83       	std	Y+4, r26	; 0x04
    2672:	bd 83       	std	Y+5, r27	; 0x05
    }
    else              // If the stack is full
        return false; // Return false to indicate failure
}
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <push_stack+0x52>
        ptr->next = stack->top;
        stack->top = ptr;
        stack->size++;
    }
    else              // If the stack is full
        return false; // Return false to indicate failure
    2676:	80 e0       	ldi	r24, 0x00	; 0
}
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	ff 90       	pop	r15
    267e:	ef 90       	pop	r14
    2680:	df 90       	pop	r13
    2682:	cf 90       	pop	r12
    2684:	08 95       	ret

00002686 <pop_stack>:

// Pop an element from a stack
bool pop_stack(ELEMENT_TYPE *element, Stack *stack)
{
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	8c 01       	movw	r16, r24
    2690:	eb 01       	movw	r28, r22
    if (!stack_empty(stack)) // If the stack is not empty
    2692:	cb 01       	movw	r24, r22
    2694:	0e 94 00 13 	call	0x2600	; 0x2600 <stack_empty>
    2698:	81 11       	cpse	r24, r1
    269a:	20 c0       	rjmp	.+64     	; 0x26dc <pop_stack+0x56>
    {
        StackNode *ptr = NULL;
        *element = stack->top->data;
    269c:	e8 81       	ld	r30, Y
    269e:	f9 81       	ldd	r31, Y+1	; 0x01
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	a2 81       	ldd	r26, Z+2	; 0x02
    26a6:	b3 81       	ldd	r27, Z+3	; 0x03
    26a8:	f8 01       	movw	r30, r16
    26aa:	80 83       	st	Z, r24
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	a2 83       	std	Z+2, r26	; 0x02
    26b0:	b3 83       	std	Z+3, r27	; 0x03
        stack->size--;
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	ac 81       	ldd	r26, Y+4	; 0x04
    26b8:	bd 81       	ldd	r27, Y+5	; 0x05
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	a1 09       	sbc	r26, r1
    26be:	b1 09       	sbc	r27, r1
    26c0:	8a 83       	std	Y+2, r24	; 0x02
    26c2:	9b 83       	std	Y+3, r25	; 0x03
    26c4:	ac 83       	std	Y+4, r26	; 0x04
    26c6:	bd 83       	std	Y+5, r27	; 0x05
        ptr = stack->top;
    26c8:	88 81       	ld	r24, Y
    26ca:	99 81       	ldd	r25, Y+1	; 0x01
        stack->top = stack->top->next;
    26cc:	fc 01       	movw	r30, r24
    26ce:	24 81       	ldd	r18, Z+4	; 0x04
    26d0:	35 81       	ldd	r19, Z+5	; 0x05
    26d2:	39 83       	std	Y+1, r19	; 0x01
    26d4:	28 83       	st	Y, r18
        free(ptr);
    26d6:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
}
    26da:	01 c0       	rjmp	.+2      	; 0x26de <pop_stack+0x58>
        ptr = stack->top;
        stack->top = stack->top->next;
        free(ptr);
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
    26dc:	80 e0       	ldi	r24, 0x00	; 0
}
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	08 95       	ret

000026e8 <stack_top>:

// Get the top element of a stack
bool stack_top(Stack *stack, ELEMENT_TYPE *element)
{
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	ec 01       	movw	r28, r24
    26f2:	8b 01       	movw	r16, r22
    if (!stack_empty(stack)) // If the stack is not empty
    26f4:	0e 94 00 13 	call	0x2600	; 0x2600 <stack_empty>
    26f8:	81 11       	cpse	r24, r1
    26fa:	0c c0       	rjmp	.+24     	; 0x2714 <stack_top+0x2c>
    {
        *element = stack->top->data;
    26fc:	e8 81       	ld	r30, Y
    26fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	a2 81       	ldd	r26, Z+2	; 0x02
    2706:	b3 81       	ldd	r27, Z+3	; 0x03
    2708:	f8 01       	movw	r30, r16
    270a:	80 83       	st	Z, r24
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	a2 83       	std	Z+2, r26	; 0x02
    2710:	b3 83       	std	Z+3, r27	; 0x03
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
}
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <stack_top+0x2e>
    if (!stack_empty(stack)) // If the stack is not empty
    {
        *element = stack->top->data;
    }
    else              // If the stack is empty
        return false; // Return false to indicate failure
    2714:	80 e0       	ldi	r24, 0x00	; 0
}
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	08 95       	ret

00002720 <traverse_stack>:

// Traverse a stack and apply a function to each element
void traverse_stack(Stack *stack, void (*func)(ELEMENT_TYPE))
{
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	8b 01       	movw	r16, r22
    StackNode *ptr = stack->top;
    272a:	fc 01       	movw	r30, r24
    272c:	c0 81       	ld	r28, Z
    272e:	d1 81       	ldd	r29, Z+1	; 0x01
    while (ptr)
    2730:	09 c0       	rjmp	.+18     	; 0x2744 <traverse_stack+0x24>
    {
        func(ptr->data);
    2732:	68 81       	ld	r22, Y
    2734:	79 81       	ldd	r23, Y+1	; 0x01
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	f8 01       	movw	r30, r16
    273c:	09 95       	icall
        ptr = ptr->next;
    273e:	0c 80       	ldd	r0, Y+4	; 0x04
    2740:	dd 81       	ldd	r29, Y+5	; 0x05
    2742:	c0 2d       	mov	r28, r0

// Traverse a stack and apply a function to each element
void traverse_stack(Stack *stack, void (*func)(ELEMENT_TYPE))
{
    StackNode *ptr = stack->top;
    while (ptr)
    2744:	20 97       	sbiw	r28, 0x00	; 0
    2746:	a9 f7       	brne	.-22     	; 0x2732 <traverse_stack+0x12>
    {
        func(ptr->data);
        ptr = ptr->next;
    }
}
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <size_stack>:

// Get the size of a stack
u32 size_stack(Stack *stack)
{
    return stack->size;
    2752:	fc 01       	movw	r30, r24
    2754:	62 81       	ldd	r22, Z+2	; 0x02
    2756:	73 81       	ldd	r23, Z+3	; 0x03
    2758:	84 81       	ldd	r24, Z+4	; 0x04
    275a:	95 81       	ldd	r25, Z+5	; 0x05
}
    275c:	08 95       	ret

0000275e <clear_stack>:

// Clear a stack
void clear_stack(Stack *stack)
{
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	ec 01       	movw	r28, r24
    StackNode *ptr = NULL;
    while (stack->top)
    2764:	13 c0       	rjmp	.+38     	; 0x278c <clear_stack+0x2e>
    {
        ptr = stack->top;
        stack->top = stack->top->next;
    2766:	fc 01       	movw	r30, r24
    2768:	24 81       	ldd	r18, Z+4	; 0x04
    276a:	35 81       	ldd	r19, Z+5	; 0x05
    276c:	39 83       	std	Y+1, r19	; 0x01
    276e:	28 83       	st	Y, r18
        stack->size--;
    2770:	4a 81       	ldd	r20, Y+2	; 0x02
    2772:	5b 81       	ldd	r21, Y+3	; 0x03
    2774:	6c 81       	ldd	r22, Y+4	; 0x04
    2776:	7d 81       	ldd	r23, Y+5	; 0x05
    2778:	41 50       	subi	r20, 0x01	; 1
    277a:	51 09       	sbc	r21, r1
    277c:	61 09       	sbc	r22, r1
    277e:	71 09       	sbc	r23, r1
    2780:	4a 83       	std	Y+2, r20	; 0x02
    2782:	5b 83       	std	Y+3, r21	; 0x03
    2784:	6c 83       	std	Y+4, r22	; 0x04
    2786:	7d 83       	std	Y+5, r23	; 0x05
        free(ptr);
    2788:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>

// Clear a stack
void clear_stack(Stack *stack)
{
    StackNode *ptr = NULL;
    while (stack->top)
    278c:	88 81       	ld	r24, Y
    278e:	99 81       	ldd	r25, Y+1	; 0x01
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	49 f7       	brne	.-46     	; 0x2766 <clear_stack+0x8>
        ptr = stack->top;
        stack->top = stack->top->next;
        stack->size--;
        free(ptr);
    }
}
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <__subsf3>:
    279a:	50 58       	subi	r21, 0x80	; 128

0000279c <__addsf3>:
    279c:	bb 27       	eor	r27, r27
    279e:	aa 27       	eor	r26, r26
    27a0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__addsf3x>
    27a4:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__fp_round>
    27a8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fp_pscA>
    27ac:	38 f0       	brcs	.+14     	; 0x27bc <__addsf3+0x20>
    27ae:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__fp_pscB>
    27b2:	20 f0       	brcs	.+8      	; 0x27bc <__addsf3+0x20>
    27b4:	39 f4       	brne	.+14     	; 0x27c4 <__addsf3+0x28>
    27b6:	9f 3f       	cpi	r25, 0xFF	; 255
    27b8:	19 f4       	brne	.+6      	; 0x27c0 <__addsf3+0x24>
    27ba:	26 f4       	brtc	.+8      	; 0x27c4 <__addsf3+0x28>
    27bc:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__fp_nan>
    27c0:	0e f4       	brtc	.+2      	; 0x27c4 <__addsf3+0x28>
    27c2:	e0 95       	com	r30
    27c4:	e7 fb       	bst	r30, 7
    27c6:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>

000027ca <__addsf3x>:
    27ca:	e9 2f       	mov	r30, r25
    27cc:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__fp_split3>
    27d0:	58 f3       	brcs	.-42     	; 0x27a8 <__addsf3+0xc>
    27d2:	ba 17       	cp	r27, r26
    27d4:	62 07       	cpc	r22, r18
    27d6:	73 07       	cpc	r23, r19
    27d8:	84 07       	cpc	r24, r20
    27da:	95 07       	cpc	r25, r21
    27dc:	20 f0       	brcs	.+8      	; 0x27e6 <__addsf3x+0x1c>
    27de:	79 f4       	brne	.+30     	; 0x27fe <__addsf3x+0x34>
    27e0:	a6 f5       	brtc	.+104    	; 0x284a <__addsf3x+0x80>
    27e2:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__fp_zero>
    27e6:	0e f4       	brtc	.+2      	; 0x27ea <__addsf3x+0x20>
    27e8:	e0 95       	com	r30
    27ea:	0b 2e       	mov	r0, r27
    27ec:	ba 2f       	mov	r27, r26
    27ee:	a0 2d       	mov	r26, r0
    27f0:	0b 01       	movw	r0, r22
    27f2:	b9 01       	movw	r22, r18
    27f4:	90 01       	movw	r18, r0
    27f6:	0c 01       	movw	r0, r24
    27f8:	ca 01       	movw	r24, r20
    27fa:	a0 01       	movw	r20, r0
    27fc:	11 24       	eor	r1, r1
    27fe:	ff 27       	eor	r31, r31
    2800:	59 1b       	sub	r21, r25
    2802:	99 f0       	breq	.+38     	; 0x282a <__addsf3x+0x60>
    2804:	59 3f       	cpi	r21, 0xF9	; 249
    2806:	50 f4       	brcc	.+20     	; 0x281c <__addsf3x+0x52>
    2808:	50 3e       	cpi	r21, 0xE0	; 224
    280a:	68 f1       	brcs	.+90     	; 0x2866 <__addsf3x+0x9c>
    280c:	1a 16       	cp	r1, r26
    280e:	f0 40       	sbci	r31, 0x00	; 0
    2810:	a2 2f       	mov	r26, r18
    2812:	23 2f       	mov	r18, r19
    2814:	34 2f       	mov	r19, r20
    2816:	44 27       	eor	r20, r20
    2818:	58 5f       	subi	r21, 0xF8	; 248
    281a:	f3 cf       	rjmp	.-26     	; 0x2802 <__addsf3x+0x38>
    281c:	46 95       	lsr	r20
    281e:	37 95       	ror	r19
    2820:	27 95       	ror	r18
    2822:	a7 95       	ror	r26
    2824:	f0 40       	sbci	r31, 0x00	; 0
    2826:	53 95       	inc	r21
    2828:	c9 f7       	brne	.-14     	; 0x281c <__addsf3x+0x52>
    282a:	7e f4       	brtc	.+30     	; 0x284a <__addsf3x+0x80>
    282c:	1f 16       	cp	r1, r31
    282e:	ba 0b       	sbc	r27, r26
    2830:	62 0b       	sbc	r22, r18
    2832:	73 0b       	sbc	r23, r19
    2834:	84 0b       	sbc	r24, r20
    2836:	ba f0       	brmi	.+46     	; 0x2866 <__addsf3x+0x9c>
    2838:	91 50       	subi	r25, 0x01	; 1
    283a:	a1 f0       	breq	.+40     	; 0x2864 <__addsf3x+0x9a>
    283c:	ff 0f       	add	r31, r31
    283e:	bb 1f       	adc	r27, r27
    2840:	66 1f       	adc	r22, r22
    2842:	77 1f       	adc	r23, r23
    2844:	88 1f       	adc	r24, r24
    2846:	c2 f7       	brpl	.-16     	; 0x2838 <__addsf3x+0x6e>
    2848:	0e c0       	rjmp	.+28     	; 0x2866 <__addsf3x+0x9c>
    284a:	ba 0f       	add	r27, r26
    284c:	62 1f       	adc	r22, r18
    284e:	73 1f       	adc	r23, r19
    2850:	84 1f       	adc	r24, r20
    2852:	48 f4       	brcc	.+18     	; 0x2866 <__addsf3x+0x9c>
    2854:	87 95       	ror	r24
    2856:	77 95       	ror	r23
    2858:	67 95       	ror	r22
    285a:	b7 95       	ror	r27
    285c:	f7 95       	ror	r31
    285e:	9e 3f       	cpi	r25, 0xFE	; 254
    2860:	08 f0       	brcs	.+2      	; 0x2864 <__addsf3x+0x9a>
    2862:	b0 cf       	rjmp	.-160    	; 0x27c4 <__addsf3+0x28>
    2864:	93 95       	inc	r25
    2866:	88 0f       	add	r24, r24
    2868:	08 f0       	brcs	.+2      	; 0x286c <__addsf3x+0xa2>
    286a:	99 27       	eor	r25, r25
    286c:	ee 0f       	add	r30, r30
    286e:	97 95       	ror	r25
    2870:	87 95       	ror	r24
    2872:	08 95       	ret

00002874 <__cmpsf2>:
    2874:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__fp_cmp>
    2878:	08 f4       	brcc	.+2      	; 0x287c <__cmpsf2+0x8>
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	08 95       	ret

0000287e <__divsf3>:
    287e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__divsf3x>
    2882:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__fp_round>
    2886:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__fp_pscB>
    288a:	58 f0       	brcs	.+22     	; 0x28a2 <__divsf3+0x24>
    288c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fp_pscA>
    2890:	40 f0       	brcs	.+16     	; 0x28a2 <__divsf3+0x24>
    2892:	29 f4       	brne	.+10     	; 0x289e <__divsf3+0x20>
    2894:	5f 3f       	cpi	r21, 0xFF	; 255
    2896:	29 f0       	breq	.+10     	; 0x28a2 <__divsf3+0x24>
    2898:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>
    289c:	51 11       	cpse	r21, r1
    289e:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_szero>
    28a2:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__fp_nan>

000028a6 <__divsf3x>:
    28a6:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__fp_split3>
    28aa:	68 f3       	brcs	.-38     	; 0x2886 <__divsf3+0x8>

000028ac <__divsf3_pse>:
    28ac:	99 23       	and	r25, r25
    28ae:	b1 f3       	breq	.-20     	; 0x289c <__divsf3+0x1e>
    28b0:	55 23       	and	r21, r21
    28b2:	91 f3       	breq	.-28     	; 0x2898 <__divsf3+0x1a>
    28b4:	95 1b       	sub	r25, r21
    28b6:	55 0b       	sbc	r21, r21
    28b8:	bb 27       	eor	r27, r27
    28ba:	aa 27       	eor	r26, r26
    28bc:	62 17       	cp	r22, r18
    28be:	73 07       	cpc	r23, r19
    28c0:	84 07       	cpc	r24, r20
    28c2:	38 f0       	brcs	.+14     	; 0x28d2 <__divsf3_pse+0x26>
    28c4:	9f 5f       	subi	r25, 0xFF	; 255
    28c6:	5f 4f       	sbci	r21, 0xFF	; 255
    28c8:	22 0f       	add	r18, r18
    28ca:	33 1f       	adc	r19, r19
    28cc:	44 1f       	adc	r20, r20
    28ce:	aa 1f       	adc	r26, r26
    28d0:	a9 f3       	breq	.-22     	; 0x28bc <__divsf3_pse+0x10>
    28d2:	35 d0       	rcall	.+106    	; 0x293e <__divsf3_pse+0x92>
    28d4:	0e 2e       	mov	r0, r30
    28d6:	3a f0       	brmi	.+14     	; 0x28e6 <__divsf3_pse+0x3a>
    28d8:	e0 e8       	ldi	r30, 0x80	; 128
    28da:	32 d0       	rcall	.+100    	; 0x2940 <__divsf3_pse+0x94>
    28dc:	91 50       	subi	r25, 0x01	; 1
    28de:	50 40       	sbci	r21, 0x00	; 0
    28e0:	e6 95       	lsr	r30
    28e2:	00 1c       	adc	r0, r0
    28e4:	ca f7       	brpl	.-14     	; 0x28d8 <__divsf3_pse+0x2c>
    28e6:	2b d0       	rcall	.+86     	; 0x293e <__divsf3_pse+0x92>
    28e8:	fe 2f       	mov	r31, r30
    28ea:	29 d0       	rcall	.+82     	; 0x293e <__divsf3_pse+0x92>
    28ec:	66 0f       	add	r22, r22
    28ee:	77 1f       	adc	r23, r23
    28f0:	88 1f       	adc	r24, r24
    28f2:	bb 1f       	adc	r27, r27
    28f4:	26 17       	cp	r18, r22
    28f6:	37 07       	cpc	r19, r23
    28f8:	48 07       	cpc	r20, r24
    28fa:	ab 07       	cpc	r26, r27
    28fc:	b0 e8       	ldi	r27, 0x80	; 128
    28fe:	09 f0       	breq	.+2      	; 0x2902 <__divsf3_pse+0x56>
    2900:	bb 0b       	sbc	r27, r27
    2902:	80 2d       	mov	r24, r0
    2904:	bf 01       	movw	r22, r30
    2906:	ff 27       	eor	r31, r31
    2908:	93 58       	subi	r25, 0x83	; 131
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	3a f0       	brmi	.+14     	; 0x291c <__divsf3_pse+0x70>
    290e:	9e 3f       	cpi	r25, 0xFE	; 254
    2910:	51 05       	cpc	r21, r1
    2912:	78 f0       	brcs	.+30     	; 0x2932 <__divsf3_pse+0x86>
    2914:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>
    2918:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_szero>
    291c:	5f 3f       	cpi	r21, 0xFF	; 255
    291e:	e4 f3       	brlt	.-8      	; 0x2918 <__divsf3_pse+0x6c>
    2920:	98 3e       	cpi	r25, 0xE8	; 232
    2922:	d4 f3       	brlt	.-12     	; 0x2918 <__divsf3_pse+0x6c>
    2924:	86 95       	lsr	r24
    2926:	77 95       	ror	r23
    2928:	67 95       	ror	r22
    292a:	b7 95       	ror	r27
    292c:	f7 95       	ror	r31
    292e:	9f 5f       	subi	r25, 0xFF	; 255
    2930:	c9 f7       	brne	.-14     	; 0x2924 <__divsf3_pse+0x78>
    2932:	88 0f       	add	r24, r24
    2934:	91 1d       	adc	r25, r1
    2936:	96 95       	lsr	r25
    2938:	87 95       	ror	r24
    293a:	97 f9       	bld	r25, 7
    293c:	08 95       	ret
    293e:	e1 e0       	ldi	r30, 0x01	; 1
    2940:	66 0f       	add	r22, r22
    2942:	77 1f       	adc	r23, r23
    2944:	88 1f       	adc	r24, r24
    2946:	bb 1f       	adc	r27, r27
    2948:	62 17       	cp	r22, r18
    294a:	73 07       	cpc	r23, r19
    294c:	84 07       	cpc	r24, r20
    294e:	ba 07       	cpc	r27, r26
    2950:	20 f0       	brcs	.+8      	; 0x295a <__divsf3_pse+0xae>
    2952:	62 1b       	sub	r22, r18
    2954:	73 0b       	sbc	r23, r19
    2956:	84 0b       	sbc	r24, r20
    2958:	ba 0b       	sbc	r27, r26
    295a:	ee 1f       	adc	r30, r30
    295c:	88 f7       	brcc	.-30     	; 0x2940 <__divsf3_pse+0x94>
    295e:	e0 95       	com	r30
    2960:	08 95       	ret

00002962 <__fixsfsi>:
    2962:	0e 94 b8 14 	call	0x2970	; 0x2970 <__fixunssfsi>
    2966:	68 94       	set
    2968:	b1 11       	cpse	r27, r1
    296a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_szero>
    296e:	08 95       	ret

00002970 <__fixunssfsi>:
    2970:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fp_splitA>
    2974:	88 f0       	brcs	.+34     	; 0x2998 <__fixunssfsi+0x28>
    2976:	9f 57       	subi	r25, 0x7F	; 127
    2978:	98 f0       	brcs	.+38     	; 0x29a0 <__fixunssfsi+0x30>
    297a:	b9 2f       	mov	r27, r25
    297c:	99 27       	eor	r25, r25
    297e:	b7 51       	subi	r27, 0x17	; 23
    2980:	b0 f0       	brcs	.+44     	; 0x29ae <__fixunssfsi+0x3e>
    2982:	e1 f0       	breq	.+56     	; 0x29bc <__fixunssfsi+0x4c>
    2984:	66 0f       	add	r22, r22
    2986:	77 1f       	adc	r23, r23
    2988:	88 1f       	adc	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	1a f0       	brmi	.+6      	; 0x2994 <__fixunssfsi+0x24>
    298e:	ba 95       	dec	r27
    2990:	c9 f7       	brne	.-14     	; 0x2984 <__fixunssfsi+0x14>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <__fixunssfsi+0x4c>
    2994:	b1 30       	cpi	r27, 0x01	; 1
    2996:	91 f0       	breq	.+36     	; 0x29bc <__fixunssfsi+0x4c>
    2998:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__fp_zero>
    299c:	b1 e0       	ldi	r27, 0x01	; 1
    299e:	08 95       	ret
    29a0:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__fp_zero>
    29a4:	67 2f       	mov	r22, r23
    29a6:	78 2f       	mov	r23, r24
    29a8:	88 27       	eor	r24, r24
    29aa:	b8 5f       	subi	r27, 0xF8	; 248
    29ac:	39 f0       	breq	.+14     	; 0x29bc <__fixunssfsi+0x4c>
    29ae:	b9 3f       	cpi	r27, 0xF9	; 249
    29b0:	cc f3       	brlt	.-14     	; 0x29a4 <__fixunssfsi+0x34>
    29b2:	86 95       	lsr	r24
    29b4:	77 95       	ror	r23
    29b6:	67 95       	ror	r22
    29b8:	b3 95       	inc	r27
    29ba:	d9 f7       	brne	.-10     	; 0x29b2 <__fixunssfsi+0x42>
    29bc:	3e f4       	brtc	.+14     	; 0x29cc <__fixunssfsi+0x5c>
    29be:	90 95       	com	r25
    29c0:	80 95       	com	r24
    29c2:	70 95       	com	r23
    29c4:	61 95       	neg	r22
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	8f 4f       	sbci	r24, 0xFF	; 255
    29ca:	9f 4f       	sbci	r25, 0xFF	; 255
    29cc:	08 95       	ret

000029ce <__floatunsisf>:
    29ce:	e8 94       	clt
    29d0:	09 c0       	rjmp	.+18     	; 0x29e4 <__floatsisf+0x12>

000029d2 <__floatsisf>:
    29d2:	97 fb       	bst	r25, 7
    29d4:	3e f4       	brtc	.+14     	; 0x29e4 <__floatsisf+0x12>
    29d6:	90 95       	com	r25
    29d8:	80 95       	com	r24
    29da:	70 95       	com	r23
    29dc:	61 95       	neg	r22
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	8f 4f       	sbci	r24, 0xFF	; 255
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	99 23       	and	r25, r25
    29e6:	a9 f0       	breq	.+42     	; 0x2a12 <__floatsisf+0x40>
    29e8:	f9 2f       	mov	r31, r25
    29ea:	96 e9       	ldi	r25, 0x96	; 150
    29ec:	bb 27       	eor	r27, r27
    29ee:	93 95       	inc	r25
    29f0:	f6 95       	lsr	r31
    29f2:	87 95       	ror	r24
    29f4:	77 95       	ror	r23
    29f6:	67 95       	ror	r22
    29f8:	b7 95       	ror	r27
    29fa:	f1 11       	cpse	r31, r1
    29fc:	f8 cf       	rjmp	.-16     	; 0x29ee <__floatsisf+0x1c>
    29fe:	fa f4       	brpl	.+62     	; 0x2a3e <__floatsisf+0x6c>
    2a00:	bb 0f       	add	r27, r27
    2a02:	11 f4       	brne	.+4      	; 0x2a08 <__floatsisf+0x36>
    2a04:	60 ff       	sbrs	r22, 0
    2a06:	1b c0       	rjmp	.+54     	; 0x2a3e <__floatsisf+0x6c>
    2a08:	6f 5f       	subi	r22, 0xFF	; 255
    2a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a10:	16 c0       	rjmp	.+44     	; 0x2a3e <__floatsisf+0x6c>
    2a12:	88 23       	and	r24, r24
    2a14:	11 f0       	breq	.+4      	; 0x2a1a <__floatsisf+0x48>
    2a16:	96 e9       	ldi	r25, 0x96	; 150
    2a18:	11 c0       	rjmp	.+34     	; 0x2a3c <__floatsisf+0x6a>
    2a1a:	77 23       	and	r23, r23
    2a1c:	21 f0       	breq	.+8      	; 0x2a26 <__floatsisf+0x54>
    2a1e:	9e e8       	ldi	r25, 0x8E	; 142
    2a20:	87 2f       	mov	r24, r23
    2a22:	76 2f       	mov	r23, r22
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <__floatsisf+0x5e>
    2a26:	66 23       	and	r22, r22
    2a28:	71 f0       	breq	.+28     	; 0x2a46 <__floatsisf+0x74>
    2a2a:	96 e8       	ldi	r25, 0x86	; 134
    2a2c:	86 2f       	mov	r24, r22
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	60 e0       	ldi	r22, 0x00	; 0
    2a32:	2a f0       	brmi	.+10     	; 0x2a3e <__floatsisf+0x6c>
    2a34:	9a 95       	dec	r25
    2a36:	66 0f       	add	r22, r22
    2a38:	77 1f       	adc	r23, r23
    2a3a:	88 1f       	adc	r24, r24
    2a3c:	da f7       	brpl	.-10     	; 0x2a34 <__floatsisf+0x62>
    2a3e:	88 0f       	add	r24, r24
    2a40:	96 95       	lsr	r25
    2a42:	87 95       	ror	r24
    2a44:	97 f9       	bld	r25, 7
    2a46:	08 95       	ret

00002a48 <__fp_cmp>:
    2a48:	99 0f       	add	r25, r25
    2a4a:	00 08       	sbc	r0, r0
    2a4c:	55 0f       	add	r21, r21
    2a4e:	aa 0b       	sbc	r26, r26
    2a50:	e0 e8       	ldi	r30, 0x80	; 128
    2a52:	fe ef       	ldi	r31, 0xFE	; 254
    2a54:	16 16       	cp	r1, r22
    2a56:	17 06       	cpc	r1, r23
    2a58:	e8 07       	cpc	r30, r24
    2a5a:	f9 07       	cpc	r31, r25
    2a5c:	c0 f0       	brcs	.+48     	; 0x2a8e <__fp_cmp+0x46>
    2a5e:	12 16       	cp	r1, r18
    2a60:	13 06       	cpc	r1, r19
    2a62:	e4 07       	cpc	r30, r20
    2a64:	f5 07       	cpc	r31, r21
    2a66:	98 f0       	brcs	.+38     	; 0x2a8e <__fp_cmp+0x46>
    2a68:	62 1b       	sub	r22, r18
    2a6a:	73 0b       	sbc	r23, r19
    2a6c:	84 0b       	sbc	r24, r20
    2a6e:	95 0b       	sbc	r25, r21
    2a70:	39 f4       	brne	.+14     	; 0x2a80 <__fp_cmp+0x38>
    2a72:	0a 26       	eor	r0, r26
    2a74:	61 f0       	breq	.+24     	; 0x2a8e <__fp_cmp+0x46>
    2a76:	23 2b       	or	r18, r19
    2a78:	24 2b       	or	r18, r20
    2a7a:	25 2b       	or	r18, r21
    2a7c:	21 f4       	brne	.+8      	; 0x2a86 <__fp_cmp+0x3e>
    2a7e:	08 95       	ret
    2a80:	0a 26       	eor	r0, r26
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <__fp_cmp+0x3e>
    2a84:	a1 40       	sbci	r26, 0x01	; 1
    2a86:	a6 95       	lsr	r26
    2a88:	8f ef       	ldi	r24, 0xFF	; 255
    2a8a:	81 1d       	adc	r24, r1
    2a8c:	81 1d       	adc	r24, r1
    2a8e:	08 95       	ret

00002a90 <__fp_inf>:
    2a90:	97 f9       	bld	r25, 7
    2a92:	9f 67       	ori	r25, 0x7F	; 127
    2a94:	80 e8       	ldi	r24, 0x80	; 128
    2a96:	70 e0       	ldi	r23, 0x00	; 0
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	08 95       	ret

00002a9c <__fp_nan>:
    2a9c:	9f ef       	ldi	r25, 0xFF	; 255
    2a9e:	80 ec       	ldi	r24, 0xC0	; 192
    2aa0:	08 95       	ret

00002aa2 <__fp_pscA>:
    2aa2:	00 24       	eor	r0, r0
    2aa4:	0a 94       	dec	r0
    2aa6:	16 16       	cp	r1, r22
    2aa8:	17 06       	cpc	r1, r23
    2aaa:	18 06       	cpc	r1, r24
    2aac:	09 06       	cpc	r0, r25
    2aae:	08 95       	ret

00002ab0 <__fp_pscB>:
    2ab0:	00 24       	eor	r0, r0
    2ab2:	0a 94       	dec	r0
    2ab4:	12 16       	cp	r1, r18
    2ab6:	13 06       	cpc	r1, r19
    2ab8:	14 06       	cpc	r1, r20
    2aba:	05 06       	cpc	r0, r21
    2abc:	08 95       	ret

00002abe <__fp_round>:
    2abe:	09 2e       	mov	r0, r25
    2ac0:	03 94       	inc	r0
    2ac2:	00 0c       	add	r0, r0
    2ac4:	11 f4       	brne	.+4      	; 0x2aca <__fp_round+0xc>
    2ac6:	88 23       	and	r24, r24
    2ac8:	52 f0       	brmi	.+20     	; 0x2ade <__fp_round+0x20>
    2aca:	bb 0f       	add	r27, r27
    2acc:	40 f4       	brcc	.+16     	; 0x2ade <__fp_round+0x20>
    2ace:	bf 2b       	or	r27, r31
    2ad0:	11 f4       	brne	.+4      	; 0x2ad6 <__fp_round+0x18>
    2ad2:	60 ff       	sbrs	r22, 0
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <__fp_round+0x20>
    2ad6:	6f 5f       	subi	r22, 0xFF	; 255
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	8f 4f       	sbci	r24, 0xFF	; 255
    2adc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ade:	08 95       	ret

00002ae0 <__fp_split3>:
    2ae0:	57 fd       	sbrc	r21, 7
    2ae2:	90 58       	subi	r25, 0x80	; 128
    2ae4:	44 0f       	add	r20, r20
    2ae6:	55 1f       	adc	r21, r21
    2ae8:	59 f0       	breq	.+22     	; 0x2b00 <__fp_splitA+0x10>
    2aea:	5f 3f       	cpi	r21, 0xFF	; 255
    2aec:	71 f0       	breq	.+28     	; 0x2b0a <__fp_splitA+0x1a>
    2aee:	47 95       	ror	r20

00002af0 <__fp_splitA>:
    2af0:	88 0f       	add	r24, r24
    2af2:	97 fb       	bst	r25, 7
    2af4:	99 1f       	adc	r25, r25
    2af6:	61 f0       	breq	.+24     	; 0x2b10 <__fp_splitA+0x20>
    2af8:	9f 3f       	cpi	r25, 0xFF	; 255
    2afa:	79 f0       	breq	.+30     	; 0x2b1a <__fp_splitA+0x2a>
    2afc:	87 95       	ror	r24
    2afe:	08 95       	ret
    2b00:	12 16       	cp	r1, r18
    2b02:	13 06       	cpc	r1, r19
    2b04:	14 06       	cpc	r1, r20
    2b06:	55 1f       	adc	r21, r21
    2b08:	f2 cf       	rjmp	.-28     	; 0x2aee <__fp_split3+0xe>
    2b0a:	46 95       	lsr	r20
    2b0c:	f1 df       	rcall	.-30     	; 0x2af0 <__fp_splitA>
    2b0e:	08 c0       	rjmp	.+16     	; 0x2b20 <__fp_splitA+0x30>
    2b10:	16 16       	cp	r1, r22
    2b12:	17 06       	cpc	r1, r23
    2b14:	18 06       	cpc	r1, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	f1 cf       	rjmp	.-30     	; 0x2afc <__fp_splitA+0xc>
    2b1a:	86 95       	lsr	r24
    2b1c:	71 05       	cpc	r23, r1
    2b1e:	61 05       	cpc	r22, r1
    2b20:	08 94       	sec
    2b22:	08 95       	ret

00002b24 <__fp_zero>:
    2b24:	e8 94       	clt

00002b26 <__fp_szero>:
    2b26:	bb 27       	eor	r27, r27
    2b28:	66 27       	eor	r22, r22
    2b2a:	77 27       	eor	r23, r23
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	97 f9       	bld	r25, 7
    2b30:	08 95       	ret

00002b32 <__mulsf3>:
    2b32:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__mulsf3x>
    2b36:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__fp_round>
    2b3a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fp_pscA>
    2b3e:	38 f0       	brcs	.+14     	; 0x2b4e <__mulsf3+0x1c>
    2b40:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__fp_pscB>
    2b44:	20 f0       	brcs	.+8      	; 0x2b4e <__mulsf3+0x1c>
    2b46:	95 23       	and	r25, r21
    2b48:	11 f0       	breq	.+4      	; 0x2b4e <__mulsf3+0x1c>
    2b4a:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>
    2b4e:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__fp_nan>
    2b52:	11 24       	eor	r1, r1
    2b54:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_szero>

00002b58 <__mulsf3x>:
    2b58:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__fp_split3>
    2b5c:	70 f3       	brcs	.-36     	; 0x2b3a <__mulsf3+0x8>

00002b5e <__mulsf3_pse>:
    2b5e:	95 9f       	mul	r25, r21
    2b60:	c1 f3       	breq	.-16     	; 0x2b52 <__mulsf3+0x20>
    2b62:	95 0f       	add	r25, r21
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	55 1f       	adc	r21, r21
    2b68:	62 9f       	mul	r22, r18
    2b6a:	f0 01       	movw	r30, r0
    2b6c:	72 9f       	mul	r23, r18
    2b6e:	bb 27       	eor	r27, r27
    2b70:	f0 0d       	add	r31, r0
    2b72:	b1 1d       	adc	r27, r1
    2b74:	63 9f       	mul	r22, r19
    2b76:	aa 27       	eor	r26, r26
    2b78:	f0 0d       	add	r31, r0
    2b7a:	b1 1d       	adc	r27, r1
    2b7c:	aa 1f       	adc	r26, r26
    2b7e:	64 9f       	mul	r22, r20
    2b80:	66 27       	eor	r22, r22
    2b82:	b0 0d       	add	r27, r0
    2b84:	a1 1d       	adc	r26, r1
    2b86:	66 1f       	adc	r22, r22
    2b88:	82 9f       	mul	r24, r18
    2b8a:	22 27       	eor	r18, r18
    2b8c:	b0 0d       	add	r27, r0
    2b8e:	a1 1d       	adc	r26, r1
    2b90:	62 1f       	adc	r22, r18
    2b92:	73 9f       	mul	r23, r19
    2b94:	b0 0d       	add	r27, r0
    2b96:	a1 1d       	adc	r26, r1
    2b98:	62 1f       	adc	r22, r18
    2b9a:	83 9f       	mul	r24, r19
    2b9c:	a0 0d       	add	r26, r0
    2b9e:	61 1d       	adc	r22, r1
    2ba0:	22 1f       	adc	r18, r18
    2ba2:	74 9f       	mul	r23, r20
    2ba4:	33 27       	eor	r19, r19
    2ba6:	a0 0d       	add	r26, r0
    2ba8:	61 1d       	adc	r22, r1
    2baa:	23 1f       	adc	r18, r19
    2bac:	84 9f       	mul	r24, r20
    2bae:	60 0d       	add	r22, r0
    2bb0:	21 1d       	adc	r18, r1
    2bb2:	82 2f       	mov	r24, r18
    2bb4:	76 2f       	mov	r23, r22
    2bb6:	6a 2f       	mov	r22, r26
    2bb8:	11 24       	eor	r1, r1
    2bba:	9f 57       	subi	r25, 0x7F	; 127
    2bbc:	50 40       	sbci	r21, 0x00	; 0
    2bbe:	9a f0       	brmi	.+38     	; 0x2be6 <__mulsf3_pse+0x88>
    2bc0:	f1 f0       	breq	.+60     	; 0x2bfe <__mulsf3_pse+0xa0>
    2bc2:	88 23       	and	r24, r24
    2bc4:	4a f0       	brmi	.+18     	; 0x2bd8 <__mulsf3_pse+0x7a>
    2bc6:	ee 0f       	add	r30, r30
    2bc8:	ff 1f       	adc	r31, r31
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	91 50       	subi	r25, 0x01	; 1
    2bd4:	50 40       	sbci	r21, 0x00	; 0
    2bd6:	a9 f7       	brne	.-22     	; 0x2bc2 <__mulsf3_pse+0x64>
    2bd8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bda:	51 05       	cpc	r21, r1
    2bdc:	80 f0       	brcs	.+32     	; 0x2bfe <__mulsf3_pse+0xa0>
    2bde:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>
    2be2:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_szero>
    2be6:	5f 3f       	cpi	r21, 0xFF	; 255
    2be8:	e4 f3       	brlt	.-8      	; 0x2be2 <__mulsf3_pse+0x84>
    2bea:	98 3e       	cpi	r25, 0xE8	; 232
    2bec:	d4 f3       	brlt	.-12     	; 0x2be2 <__mulsf3_pse+0x84>
    2bee:	86 95       	lsr	r24
    2bf0:	77 95       	ror	r23
    2bf2:	67 95       	ror	r22
    2bf4:	b7 95       	ror	r27
    2bf6:	f7 95       	ror	r31
    2bf8:	e7 95       	ror	r30
    2bfa:	9f 5f       	subi	r25, 0xFF	; 255
    2bfc:	c1 f7       	brne	.-16     	; 0x2bee <__mulsf3_pse+0x90>
    2bfe:	fe 2b       	or	r31, r30
    2c00:	88 0f       	add	r24, r24
    2c02:	91 1d       	adc	r25, r1
    2c04:	96 95       	lsr	r25
    2c06:	87 95       	ror	r24
    2c08:	97 f9       	bld	r25, 7
    2c0a:	08 95       	ret

00002c0c <pow>:
    2c0c:	fa 01       	movw	r30, r20
    2c0e:	ee 0f       	add	r30, r30
    2c10:	ff 1f       	adc	r31, r31
    2c12:	30 96       	adiw	r30, 0x00	; 0
    2c14:	21 05       	cpc	r18, r1
    2c16:	31 05       	cpc	r19, r1
    2c18:	a1 f1       	breq	.+104    	; 0x2c82 <pow+0x76>
    2c1a:	61 15       	cp	r22, r1
    2c1c:	71 05       	cpc	r23, r1
    2c1e:	61 f4       	brne	.+24     	; 0x2c38 <pow+0x2c>
    2c20:	80 38       	cpi	r24, 0x80	; 128
    2c22:	bf e3       	ldi	r27, 0x3F	; 63
    2c24:	9b 07       	cpc	r25, r27
    2c26:	49 f1       	breq	.+82     	; 0x2c7a <pow+0x6e>
    2c28:	68 94       	set
    2c2a:	90 38       	cpi	r25, 0x80	; 128
    2c2c:	81 05       	cpc	r24, r1
    2c2e:	61 f0       	breq	.+24     	; 0x2c48 <pow+0x3c>
    2c30:	80 38       	cpi	r24, 0x80	; 128
    2c32:	bf ef       	ldi	r27, 0xFF	; 255
    2c34:	9b 07       	cpc	r25, r27
    2c36:	41 f0       	breq	.+16     	; 0x2c48 <pow+0x3c>
    2c38:	99 23       	and	r25, r25
    2c3a:	4a f5       	brpl	.+82     	; 0x2c8e <pow+0x82>
    2c3c:	ff 3f       	cpi	r31, 0xFF	; 255
    2c3e:	e1 05       	cpc	r30, r1
    2c40:	31 05       	cpc	r19, r1
    2c42:	21 05       	cpc	r18, r1
    2c44:	19 f1       	breq	.+70     	; 0x2c8c <pow+0x80>
    2c46:	e8 94       	clt
    2c48:	08 94       	sec
    2c4a:	e7 95       	ror	r30
    2c4c:	d9 01       	movw	r26, r18
    2c4e:	aa 23       	and	r26, r26
    2c50:	29 f4       	brne	.+10     	; 0x2c5c <pow+0x50>
    2c52:	ab 2f       	mov	r26, r27
    2c54:	be 2f       	mov	r27, r30
    2c56:	f8 5f       	subi	r31, 0xF8	; 248
    2c58:	d0 f3       	brcs	.-12     	; 0x2c4e <pow+0x42>
    2c5a:	10 c0       	rjmp	.+32     	; 0x2c7c <pow+0x70>
    2c5c:	ff 5f       	subi	r31, 0xFF	; 255
    2c5e:	70 f4       	brcc	.+28     	; 0x2c7c <pow+0x70>
    2c60:	a6 95       	lsr	r26
    2c62:	e0 f7       	brcc	.-8      	; 0x2c5c <pow+0x50>
    2c64:	f7 39       	cpi	r31, 0x97	; 151
    2c66:	50 f0       	brcs	.+20     	; 0x2c7c <pow+0x70>
    2c68:	19 f0       	breq	.+6      	; 0x2c70 <pow+0x64>
    2c6a:	ff 3a       	cpi	r31, 0xAF	; 175
    2c6c:	38 f4       	brcc	.+14     	; 0x2c7c <pow+0x70>
    2c6e:	9f 77       	andi	r25, 0x7F	; 127
    2c70:	9f 93       	push	r25
    2c72:	0d d0       	rcall	.+26     	; 0x2c8e <pow+0x82>
    2c74:	0f 90       	pop	r0
    2c76:	07 fc       	sbrc	r0, 7
    2c78:	90 58       	subi	r25, 0x80	; 128
    2c7a:	08 95       	ret
    2c7c:	46 f0       	brts	.+16     	; 0x2c8e <pow+0x82>
    2c7e:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__fp_nan>
    2c82:	60 e0       	ldi	r22, 0x00	; 0
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	80 e8       	ldi	r24, 0x80	; 128
    2c88:	9f e3       	ldi	r25, 0x3F	; 63
    2c8a:	08 95       	ret
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	9f 77       	andi	r25, 0x7F	; 127
    2c90:	5f 93       	push	r21
    2c92:	4f 93       	push	r20
    2c94:	3f 93       	push	r19
    2c96:	2f 93       	push	r18
    2c98:	0e 94 01 17 	call	0x2e02	; 0x2e02 <log>
    2c9c:	2f 91       	pop	r18
    2c9e:	3f 91       	pop	r19
    2ca0:	4f 91       	pop	r20
    2ca2:	5f 91       	pop	r21
    2ca4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    2ca8:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <exp>
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <pow+0xac>
    2cae:	16 f0       	brts	.+4      	; 0x2cb4 <pow+0xa8>
    2cb0:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>
    2cb4:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__fp_zero>
    2cb8:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__fp_nan>

00002cbc <exp>:
    2cbc:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fp_splitA>
    2cc0:	a8 f3       	brcs	.-22     	; 0x2cac <pow+0xa0>
    2cc2:	96 38       	cpi	r25, 0x86	; 134
    2cc4:	a0 f7       	brcc	.-24     	; 0x2cae <pow+0xa2>
    2cc6:	07 f8       	bld	r0, 7
    2cc8:	0f 92       	push	r0
    2cca:	e8 94       	clt
    2ccc:	2b e3       	ldi	r18, 0x3B	; 59
    2cce:	3a ea       	ldi	r19, 0xAA	; 170
    2cd0:	48 eb       	ldi	r20, 0xB8	; 184
    2cd2:	5f e7       	ldi	r21, 0x7F	; 127
    2cd4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__mulsf3_pse>
    2cd8:	0f 92       	push	r0
    2cda:	0f 92       	push	r0
    2cdc:	0f 92       	push	r0
    2cde:	4d b7       	in	r20, 0x3d	; 61
    2ce0:	5e b7       	in	r21, 0x3e	; 62
    2ce2:	0f 92       	push	r0
    2ce4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <modf>
    2ce8:	e2 e8       	ldi	r30, 0x82	; 130
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__fp_powser>
    2cf0:	4f 91       	pop	r20
    2cf2:	5f 91       	pop	r21
    2cf4:	ef 91       	pop	r30
    2cf6:	ff 91       	pop	r31
    2cf8:	e5 95       	asr	r30
    2cfa:	ee 1f       	adc	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	49 f0       	breq	.+18     	; 0x2d12 <exp+0x56>
    2d00:	fe 57       	subi	r31, 0x7E	; 126
    2d02:	e0 68       	ori	r30, 0x80	; 128
    2d04:	44 27       	eor	r20, r20
    2d06:	ee 0f       	add	r30, r30
    2d08:	44 1f       	adc	r20, r20
    2d0a:	fa 95       	dec	r31
    2d0c:	e1 f7       	brne	.-8      	; 0x2d06 <exp+0x4a>
    2d0e:	41 95       	neg	r20
    2d10:	55 0b       	sbc	r21, r21
    2d12:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <ldexp>
    2d16:	0f 90       	pop	r0
    2d18:	07 fe       	sbrs	r0, 7
    2d1a:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <inverse>
    2d1e:	08 95       	ret

00002d20 <__fp_powser>:
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	1f 93       	push	r17
    2d26:	0f 93       	push	r16
    2d28:	ff 92       	push	r15
    2d2a:	ef 92       	push	r14
    2d2c:	df 92       	push	r13
    2d2e:	7b 01       	movw	r14, r22
    2d30:	8c 01       	movw	r16, r24
    2d32:	68 94       	set
    2d34:	06 c0       	rjmp	.+12     	; 0x2d42 <__fp_powser+0x22>
    2d36:	da 2e       	mov	r13, r26
    2d38:	ef 01       	movw	r28, r30
    2d3a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__mulsf3x>
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e8 94       	clt
    2d42:	a5 91       	lpm	r26, Z+
    2d44:	25 91       	lpm	r18, Z+
    2d46:	35 91       	lpm	r19, Z+
    2d48:	45 91       	lpm	r20, Z+
    2d4a:	55 91       	lpm	r21, Z+
    2d4c:	a6 f3       	brts	.-24     	; 0x2d36 <__fp_powser+0x16>
    2d4e:	ef 01       	movw	r28, r30
    2d50:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__addsf3x>
    2d54:	fe 01       	movw	r30, r28
    2d56:	97 01       	movw	r18, r14
    2d58:	a8 01       	movw	r20, r16
    2d5a:	da 94       	dec	r13
    2d5c:	69 f7       	brne	.-38     	; 0x2d38 <__fp_powser+0x18>
    2d5e:	df 90       	pop	r13
    2d60:	ef 90       	pop	r14
    2d62:	ff 90       	pop	r15
    2d64:	0f 91       	pop	r16
    2d66:	1f 91       	pop	r17
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <inverse>:
    2d6e:	9b 01       	movw	r18, r22
    2d70:	ac 01       	movw	r20, r24
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	80 e8       	ldi	r24, 0x80	; 128
    2d78:	9f e3       	ldi	r25, 0x3F	; 63
    2d7a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__divsf3>
    2d7e:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>
    2d82:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__fp_mpack>

00002d86 <ldexp>:
    2d86:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fp_splitA>
    2d8a:	d8 f3       	brcs	.-10     	; 0x2d82 <inverse+0x14>
    2d8c:	99 23       	and	r25, r25
    2d8e:	c9 f3       	breq	.-14     	; 0x2d82 <inverse+0x14>
    2d90:	94 0f       	add	r25, r20
    2d92:	51 1d       	adc	r21, r1
    2d94:	a3 f3       	brvs	.-24     	; 0x2d7e <inverse+0x10>
    2d96:	91 50       	subi	r25, 0x01	; 1
    2d98:	50 40       	sbci	r21, 0x00	; 0
    2d9a:	94 f0       	brlt	.+36     	; 0x2dc0 <ldexp+0x3a>
    2d9c:	59 f0       	breq	.+22     	; 0x2db4 <ldexp+0x2e>
    2d9e:	88 23       	and	r24, r24
    2da0:	32 f0       	brmi	.+12     	; 0x2dae <ldexp+0x28>
    2da2:	66 0f       	add	r22, r22
    2da4:	77 1f       	adc	r23, r23
    2da6:	88 1f       	adc	r24, r24
    2da8:	91 50       	subi	r25, 0x01	; 1
    2daa:	50 40       	sbci	r21, 0x00	; 0
    2dac:	c1 f7       	brne	.-16     	; 0x2d9e <ldexp+0x18>
    2dae:	9e 3f       	cpi	r25, 0xFE	; 254
    2db0:	51 05       	cpc	r21, r1
    2db2:	2c f7       	brge	.-54     	; 0x2d7e <inverse+0x10>
    2db4:	88 0f       	add	r24, r24
    2db6:	91 1d       	adc	r25, r1
    2db8:	96 95       	lsr	r25
    2dba:	87 95       	ror	r24
    2dbc:	97 f9       	bld	r25, 7
    2dbe:	08 95       	ret
    2dc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2dc2:	ac f0       	brlt	.+42     	; 0x2dee <ldexp+0x68>
    2dc4:	98 3e       	cpi	r25, 0xE8	; 232
    2dc6:	9c f0       	brlt	.+38     	; 0x2dee <ldexp+0x68>
    2dc8:	bb 27       	eor	r27, r27
    2dca:	86 95       	lsr	r24
    2dcc:	77 95       	ror	r23
    2dce:	67 95       	ror	r22
    2dd0:	b7 95       	ror	r27
    2dd2:	08 f4       	brcc	.+2      	; 0x2dd6 <ldexp+0x50>
    2dd4:	b1 60       	ori	r27, 0x01	; 1
    2dd6:	93 95       	inc	r25
    2dd8:	c1 f7       	brne	.-16     	; 0x2dca <ldexp+0x44>
    2dda:	bb 0f       	add	r27, r27
    2ddc:	58 f7       	brcc	.-42     	; 0x2db4 <ldexp+0x2e>
    2dde:	11 f4       	brne	.+4      	; 0x2de4 <ldexp+0x5e>
    2de0:	60 ff       	sbrs	r22, 0
    2de2:	e8 cf       	rjmp	.-48     	; 0x2db4 <ldexp+0x2e>
    2de4:	6f 5f       	subi	r22, 0xFF	; 255
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	e3 cf       	rjmp	.-58     	; 0x2db4 <ldexp+0x2e>
    2dee:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_szero>
    2df2:	16 f0       	brts	.+4      	; 0x2df8 <ldexp+0x72>
    2df4:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__fp_mpack>
    2df8:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__fp_nan>
    2dfc:	68 94       	set
    2dfe:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__fp_inf>

00002e02 <log>:
    2e02:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__fp_splitA>
    2e06:	a8 f3       	brcs	.-22     	; 0x2df2 <ldexp+0x6c>
    2e08:	99 23       	and	r25, r25
    2e0a:	c1 f3       	breq	.-16     	; 0x2dfc <ldexp+0x76>
    2e0c:	ae f3       	brts	.-22     	; 0x2df8 <ldexp+0x72>
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	1f 93       	push	r17
    2e14:	0f 93       	push	r16
    2e16:	ff 92       	push	r15
    2e18:	c9 2f       	mov	r28, r25
    2e1a:	dd 27       	eor	r29, r29
    2e1c:	88 23       	and	r24, r24
    2e1e:	2a f0       	brmi	.+10     	; 0x2e2a <log+0x28>
    2e20:	21 97       	sbiw	r28, 0x01	; 1
    2e22:	66 0f       	add	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	88 1f       	adc	r24, r24
    2e28:	da f7       	brpl	.-10     	; 0x2e20 <log+0x1e>
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e8       	ldi	r20, 0x80	; 128
    2e30:	5f eb       	ldi	r21, 0xBF	; 191
    2e32:	9f e3       	ldi	r25, 0x3F	; 63
    2e34:	88 39       	cpi	r24, 0x98	; 152
    2e36:	20 f0       	brcs	.+8      	; 0x2e40 <log+0x3e>
    2e38:	80 3e       	cpi	r24, 0xE0	; 224
    2e3a:	38 f0       	brcs	.+14     	; 0x2e4a <log+0x48>
    2e3c:	21 96       	adiw	r28, 0x01	; 1
    2e3e:	8f 77       	andi	r24, 0x7F	; 127
    2e40:	0e 94 ce 13 	call	0x279c	; 0x279c <__addsf3>
    2e44:	ea ea       	ldi	r30, 0xAA	; 170
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	04 c0       	rjmp	.+8      	; 0x2e52 <log+0x50>
    2e4a:	0e 94 ce 13 	call	0x279c	; 0x279c <__addsf3>
    2e4e:	e7 ed       	ldi	r30, 0xD7	; 215
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__fp_powser>
    2e56:	8b 01       	movw	r16, r22
    2e58:	be 01       	movw	r22, r28
    2e5a:	ec 01       	movw	r28, r24
    2e5c:	fb 2e       	mov	r15, r27
    2e5e:	6f 57       	subi	r22, 0x7F	; 127
    2e60:	71 09       	sbc	r23, r1
    2e62:	75 95       	asr	r23
    2e64:	77 1f       	adc	r23, r23
    2e66:	88 0b       	sbc	r24, r24
    2e68:	99 0b       	sbc	r25, r25
    2e6a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__floatsisf>
    2e6e:	28 e1       	ldi	r18, 0x18	; 24
    2e70:	32 e7       	ldi	r19, 0x72	; 114
    2e72:	41 e3       	ldi	r20, 0x31	; 49
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__mulsf3x>
    2e7a:	af 2d       	mov	r26, r15
    2e7c:	98 01       	movw	r18, r16
    2e7e:	ae 01       	movw	r20, r28
    2e80:	ff 90       	pop	r15
    2e82:	0f 91       	pop	r16
    2e84:	1f 91       	pop	r17
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__addsf3x>
    2e8e:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__fp_round>

00002e92 <modf>:
    2e92:	fa 01       	movw	r30, r20
    2e94:	dc 01       	movw	r26, r24
    2e96:	aa 0f       	add	r26, r26
    2e98:	bb 1f       	adc	r27, r27
    2e9a:	9b 01       	movw	r18, r22
    2e9c:	ac 01       	movw	r20, r24
    2e9e:	bf 57       	subi	r27, 0x7F	; 127
    2ea0:	28 f4       	brcc	.+10     	; 0x2eac <modf+0x1a>
    2ea2:	22 27       	eor	r18, r18
    2ea4:	33 27       	eor	r19, r19
    2ea6:	44 27       	eor	r20, r20
    2ea8:	50 78       	andi	r21, 0x80	; 128
    2eaa:	20 c0       	rjmp	.+64     	; 0x2eec <modf+0x5a>
    2eac:	b7 51       	subi	r27, 0x17	; 23
    2eae:	90 f4       	brcc	.+36     	; 0x2ed4 <modf+0x42>
    2eb0:	ab 2f       	mov	r26, r27
    2eb2:	00 24       	eor	r0, r0
    2eb4:	46 95       	lsr	r20
    2eb6:	37 95       	ror	r19
    2eb8:	27 95       	ror	r18
    2eba:	01 1c       	adc	r0, r1
    2ebc:	a3 95       	inc	r26
    2ebe:	d2 f3       	brmi	.-12     	; 0x2eb4 <modf+0x22>
    2ec0:	00 20       	and	r0, r0
    2ec2:	71 f0       	breq	.+28     	; 0x2ee0 <modf+0x4e>
    2ec4:	22 0f       	add	r18, r18
    2ec6:	33 1f       	adc	r19, r19
    2ec8:	44 1f       	adc	r20, r20
    2eca:	b3 95       	inc	r27
    2ecc:	da f3       	brmi	.-10     	; 0x2ec4 <modf+0x32>
    2ece:	0e d0       	rcall	.+28     	; 0x2eec <modf+0x5a>
    2ed0:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__subsf3>
    2ed4:	61 30       	cpi	r22, 0x01	; 1
    2ed6:	71 05       	cpc	r23, r1
    2ed8:	a0 e8       	ldi	r26, 0x80	; 128
    2eda:	8a 07       	cpc	r24, r26
    2edc:	b9 46       	sbci	r27, 0x69	; 105
    2ede:	30 f4       	brcc	.+12     	; 0x2eec <modf+0x5a>
    2ee0:	9b 01       	movw	r18, r22
    2ee2:	ac 01       	movw	r20, r24
    2ee4:	66 27       	eor	r22, r22
    2ee6:	77 27       	eor	r23, r23
    2ee8:	88 27       	eor	r24, r24
    2eea:	90 78       	andi	r25, 0x80	; 128
    2eec:	30 96       	adiw	r30, 0x00	; 0
    2eee:	21 f0       	breq	.+8      	; 0x2ef8 <modf+0x66>
    2ef0:	20 83       	st	Z, r18
    2ef2:	31 83       	std	Z+1, r19	; 0x01
    2ef4:	42 83       	std	Z+2, r20	; 0x02
    2ef6:	53 83       	std	Z+3, r21	; 0x03
    2ef8:	08 95       	ret

00002efa <__fp_mpack>:
    2efa:	9f 3f       	cpi	r25, 0xFF	; 255
    2efc:	31 f0       	breq	.+12     	; 0x2f0a <__fp_mpack_finite+0xc>

00002efe <__fp_mpack_finite>:
    2efe:	91 50       	subi	r25, 0x01	; 1
    2f00:	20 f4       	brcc	.+8      	; 0x2f0a <__fp_mpack_finite+0xc>
    2f02:	87 95       	ror	r24
    2f04:	77 95       	ror	r23
    2f06:	67 95       	ror	r22
    2f08:	b7 95       	ror	r27
    2f0a:	88 0f       	add	r24, r24
    2f0c:	91 1d       	adc	r25, r1
    2f0e:	96 95       	lsr	r25
    2f10:	87 95       	ror	r24
    2f12:	97 f9       	bld	r25, 7
    2f14:	08 95       	ret

00002f16 <__divmodhi4>:
    2f16:	97 fb       	bst	r25, 7
    2f18:	07 2e       	mov	r0, r23
    2f1a:	16 f4       	brtc	.+4      	; 0x2f20 <__divmodhi4+0xa>
    2f1c:	00 94       	com	r0
    2f1e:	07 d0       	rcall	.+14     	; 0x2f2e <__divmodhi4_neg1>
    2f20:	77 fd       	sbrc	r23, 7
    2f22:	09 d0       	rcall	.+18     	; 0x2f36 <__divmodhi4_neg2>
    2f24:	0e 94 aa 18 	call	0x3154	; 0x3154 <__udivmodhi4>
    2f28:	07 fc       	sbrc	r0, 7
    2f2a:	05 d0       	rcall	.+10     	; 0x2f36 <__divmodhi4_neg2>
    2f2c:	3e f4       	brtc	.+14     	; 0x2f3c <__divmodhi4_exit>

00002f2e <__divmodhi4_neg1>:
    2f2e:	90 95       	com	r25
    2f30:	81 95       	neg	r24
    2f32:	9f 4f       	sbci	r25, 0xFF	; 255
    2f34:	08 95       	ret

00002f36 <__divmodhi4_neg2>:
    2f36:	70 95       	com	r23
    2f38:	61 95       	neg	r22
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255

00002f3c <__divmodhi4_exit>:
    2f3c:	08 95       	ret

00002f3e <__tablejump2__>:
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	05 90       	lpm	r0, Z+
    2f44:	f4 91       	lpm	r31, Z
    2f46:	e0 2d       	mov	r30, r0
    2f48:	09 94       	ijmp

00002f4a <__moddi3>:
    2f4a:	68 94       	set
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <__divdi3_moddi3>

00002f4e <__divdi3>:
    2f4e:	e8 94       	clt

00002f50 <__divdi3_moddi3>:
    2f50:	f9 2f       	mov	r31, r25
    2f52:	f1 2b       	or	r31, r17
    2f54:	12 f0       	brmi	.+4      	; 0x2f5a <__divdi3_moddi3+0xa>
    2f56:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__udivdi3_umoddi3>
    2f5a:	a0 e0       	ldi	r26, 0x00	; 0
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e3 eb       	ldi	r30, 0xB3	; 179
    2f60:	f7 e1       	ldi	r31, 0x17	; 23
    2f62:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0xc>
    2f66:	09 2e       	mov	r0, r25
    2f68:	05 94       	asr	r0
    2f6a:	22 f4       	brpl	.+8      	; 0x2f74 <__divdi3_moddi3+0x24>
    2f6c:	0e 94 35 18 	call	0x306a	; 0x306a <__negdi2>
    2f70:	11 23       	and	r17, r17
    2f72:	92 f4       	brpl	.+36     	; 0x2f98 <__divdi3_moddi3+0x48>
    2f74:	f0 e8       	ldi	r31, 0x80	; 128
    2f76:	0f 26       	eor	r0, r31
    2f78:	ff ef       	ldi	r31, 0xFF	; 255
    2f7a:	e0 94       	com	r14
    2f7c:	f0 94       	com	r15
    2f7e:	00 95       	com	r16
    2f80:	10 95       	com	r17
    2f82:	b0 94       	com	r11
    2f84:	c0 94       	com	r12
    2f86:	d0 94       	com	r13
    2f88:	a1 94       	neg	r10
    2f8a:	bf 0a       	sbc	r11, r31
    2f8c:	cf 0a       	sbc	r12, r31
    2f8e:	df 0a       	sbc	r13, r31
    2f90:	ef 0a       	sbc	r14, r31
    2f92:	ff 0a       	sbc	r15, r31
    2f94:	0f 0b       	sbc	r16, r31
    2f96:	1f 0b       	sbc	r17, r31
    2f98:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__udivmod64>
    2f9c:	07 fc       	sbrc	r0, 7
    2f9e:	0e 94 35 18 	call	0x306a	; 0x306a <__negdi2>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	ec e0       	ldi	r30, 0x0C	; 12
    2fa8:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0xc>

00002fac <__umoddi3>:
    2fac:	68 94       	set
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <__udivdi3_umoddi3>

00002fb0 <__udivdi3>:
    2fb0:	e8 94       	clt

00002fb2 <__udivdi3_umoddi3>:
    2fb2:	8f 92       	push	r8
    2fb4:	9f 92       	push	r9
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
    2fba:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__udivmod64>
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	9f 90       	pop	r9
    2fc4:	8f 90       	pop	r8
    2fc6:	08 95       	ret

00002fc8 <__udivmod64>:
    2fc8:	88 24       	eor	r8, r8
    2fca:	99 24       	eor	r9, r9
    2fcc:	f4 01       	movw	r30, r8
    2fce:	e4 01       	movw	r28, r8
    2fd0:	b0 e4       	ldi	r27, 0x40	; 64
    2fd2:	9f 93       	push	r25
    2fd4:	aa 27       	eor	r26, r26
    2fd6:	9a 15       	cp	r25, r10
    2fd8:	8b 04       	cpc	r8, r11
    2fda:	9c 04       	cpc	r9, r12
    2fdc:	ed 05       	cpc	r30, r13
    2fde:	fe 05       	cpc	r31, r14
    2fe0:	cf 05       	cpc	r28, r15
    2fe2:	d0 07       	cpc	r29, r16
    2fe4:	a1 07       	cpc	r26, r17
    2fe6:	98 f4       	brcc	.+38     	; 0x300e <__udivmod64+0x46>
    2fe8:	ad 2f       	mov	r26, r29
    2fea:	dc 2f       	mov	r29, r28
    2fec:	cf 2f       	mov	r28, r31
    2fee:	fe 2f       	mov	r31, r30
    2ff0:	e9 2d       	mov	r30, r9
    2ff2:	98 2c       	mov	r9, r8
    2ff4:	89 2e       	mov	r8, r25
    2ff6:	98 2f       	mov	r25, r24
    2ff8:	87 2f       	mov	r24, r23
    2ffa:	76 2f       	mov	r23, r22
    2ffc:	65 2f       	mov	r22, r21
    2ffe:	54 2f       	mov	r21, r20
    3000:	43 2f       	mov	r20, r19
    3002:	32 2f       	mov	r19, r18
    3004:	22 27       	eor	r18, r18
    3006:	b8 50       	subi	r27, 0x08	; 8
    3008:	31 f7       	brne	.-52     	; 0x2fd6 <__udivmod64+0xe>
    300a:	bf 91       	pop	r27
    300c:	27 c0       	rjmp	.+78     	; 0x305c <__udivmod64+0x94>
    300e:	1b 2e       	mov	r1, r27
    3010:	bf 91       	pop	r27
    3012:	bb 27       	eor	r27, r27
    3014:	22 0f       	add	r18, r18
    3016:	33 1f       	adc	r19, r19
    3018:	44 1f       	adc	r20, r20
    301a:	55 1f       	adc	r21, r21
    301c:	66 1f       	adc	r22, r22
    301e:	77 1f       	adc	r23, r23
    3020:	88 1f       	adc	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	88 1c       	adc	r8, r8
    3026:	99 1c       	adc	r9, r9
    3028:	ee 1f       	adc	r30, r30
    302a:	ff 1f       	adc	r31, r31
    302c:	cc 1f       	adc	r28, r28
    302e:	dd 1f       	adc	r29, r29
    3030:	aa 1f       	adc	r26, r26
    3032:	bb 1f       	adc	r27, r27
    3034:	8a 14       	cp	r8, r10
    3036:	9b 04       	cpc	r9, r11
    3038:	ec 05       	cpc	r30, r12
    303a:	fd 05       	cpc	r31, r13
    303c:	ce 05       	cpc	r28, r14
    303e:	df 05       	cpc	r29, r15
    3040:	a0 07       	cpc	r26, r16
    3042:	b1 07       	cpc	r27, r17
    3044:	48 f0       	brcs	.+18     	; 0x3058 <__udivmod64+0x90>
    3046:	8a 18       	sub	r8, r10
    3048:	9b 08       	sbc	r9, r11
    304a:	ec 09       	sbc	r30, r12
    304c:	fd 09       	sbc	r31, r13
    304e:	ce 09       	sbc	r28, r14
    3050:	df 09       	sbc	r29, r15
    3052:	a0 0b       	sbc	r26, r16
    3054:	b1 0b       	sbc	r27, r17
    3056:	21 60       	ori	r18, 0x01	; 1
    3058:	1a 94       	dec	r1
    305a:	e1 f6       	brne	.-72     	; 0x3014 <__udivmod64+0x4c>
    305c:	2e f4       	brtc	.+10     	; 0x3068 <__udivmod64+0xa0>
    305e:	94 01       	movw	r18, r8
    3060:	af 01       	movw	r20, r30
    3062:	be 01       	movw	r22, r28
    3064:	cd 01       	movw	r24, r26
    3066:	00 0c       	add	r0, r0
    3068:	08 95       	ret

0000306a <__negdi2>:
    306a:	60 95       	com	r22
    306c:	70 95       	com	r23
    306e:	80 95       	com	r24
    3070:	90 95       	com	r25
    3072:	30 95       	com	r19
    3074:	40 95       	com	r20
    3076:	50 95       	com	r21
    3078:	21 95       	neg	r18
    307a:	3f 4f       	sbci	r19, 0xFF	; 255
    307c:	4f 4f       	sbci	r20, 0xFF	; 255
    307e:	5f 4f       	sbci	r21, 0xFF	; 255
    3080:	6f 4f       	sbci	r22, 0xFF	; 255
    3082:	7f 4f       	sbci	r23, 0xFF	; 255
    3084:	8f 4f       	sbci	r24, 0xFF	; 255
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	08 95       	ret

0000308a <__prologue_saves__>:
    308a:	2f 92       	push	r2
    308c:	3f 92       	push	r3
    308e:	4f 92       	push	r4
    3090:	5f 92       	push	r5
    3092:	6f 92       	push	r6
    3094:	7f 92       	push	r7
    3096:	8f 92       	push	r8
    3098:	9f 92       	push	r9
    309a:	af 92       	push	r10
    309c:	bf 92       	push	r11
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	ff 92       	push	r15
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	ca 1b       	sub	r28, r26
    30b4:	db 0b       	sbc	r29, r27
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	09 94       	ijmp

000030c2 <__epilogue_restores__>:
    30c2:	2a 88       	ldd	r2, Y+18	; 0x12
    30c4:	39 88       	ldd	r3, Y+17	; 0x11
    30c6:	48 88       	ldd	r4, Y+16	; 0x10
    30c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    30ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    30cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    30d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    30d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    30d4:	b9 84       	ldd	r11, Y+9	; 0x09
    30d6:	c8 84       	ldd	r12, Y+8	; 0x08
    30d8:	df 80       	ldd	r13, Y+7	; 0x07
    30da:	ee 80       	ldd	r14, Y+6	; 0x06
    30dc:	fd 80       	ldd	r15, Y+5	; 0x05
    30de:	0c 81       	ldd	r16, Y+4	; 0x04
    30e0:	1b 81       	ldd	r17, Y+3	; 0x03
    30e2:	aa 81       	ldd	r26, Y+2	; 0x02
    30e4:	b9 81       	ldd	r27, Y+1	; 0x01
    30e6:	ce 0f       	add	r28, r30
    30e8:	d1 1d       	adc	r29, r1
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	ed 01       	movw	r28, r26
    30f6:	08 95       	ret

000030f8 <__ashldi3>:
    30f8:	0f 93       	push	r16
    30fa:	08 30       	cpi	r16, 0x08	; 8
    30fc:	90 f0       	brcs	.+36     	; 0x3122 <__ashldi3+0x2a>
    30fe:	98 2f       	mov	r25, r24
    3100:	87 2f       	mov	r24, r23
    3102:	76 2f       	mov	r23, r22
    3104:	65 2f       	mov	r22, r21
    3106:	54 2f       	mov	r21, r20
    3108:	43 2f       	mov	r20, r19
    310a:	32 2f       	mov	r19, r18
    310c:	22 27       	eor	r18, r18
    310e:	08 50       	subi	r16, 0x08	; 8
    3110:	f4 cf       	rjmp	.-24     	; 0x30fa <__ashldi3+0x2>
    3112:	22 0f       	add	r18, r18
    3114:	33 1f       	adc	r19, r19
    3116:	44 1f       	adc	r20, r20
    3118:	55 1f       	adc	r21, r21
    311a:	66 1f       	adc	r22, r22
    311c:	77 1f       	adc	r23, r23
    311e:	88 1f       	adc	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	0a 95       	dec	r16
    3124:	b2 f7       	brpl	.-20     	; 0x3112 <__ashldi3+0x1a>
    3126:	0f 91       	pop	r16
    3128:	08 95       	ret

0000312a <__adddi3>:
    312a:	2a 0d       	add	r18, r10
    312c:	3b 1d       	adc	r19, r11
    312e:	4c 1d       	adc	r20, r12
    3130:	5d 1d       	adc	r21, r13
    3132:	6e 1d       	adc	r22, r14
    3134:	7f 1d       	adc	r23, r15
    3136:	80 1f       	adc	r24, r16
    3138:	91 1f       	adc	r25, r17
    313a:	08 95       	ret

0000313c <__cmpdi2_s8>:
    313c:	00 24       	eor	r0, r0
    313e:	a7 fd       	sbrc	r26, 7
    3140:	00 94       	com	r0
    3142:	2a 17       	cp	r18, r26
    3144:	30 05       	cpc	r19, r0
    3146:	40 05       	cpc	r20, r0
    3148:	50 05       	cpc	r21, r0
    314a:	60 05       	cpc	r22, r0
    314c:	70 05       	cpc	r23, r0
    314e:	80 05       	cpc	r24, r0
    3150:	90 05       	cpc	r25, r0
    3152:	08 95       	ret

00003154 <__udivmodhi4>:
    3154:	aa 1b       	sub	r26, r26
    3156:	bb 1b       	sub	r27, r27
    3158:	51 e1       	ldi	r21, 0x11	; 17
    315a:	07 c0       	rjmp	.+14     	; 0x316a <__udivmodhi4_ep>

0000315c <__udivmodhi4_loop>:
    315c:	aa 1f       	adc	r26, r26
    315e:	bb 1f       	adc	r27, r27
    3160:	a6 17       	cp	r26, r22
    3162:	b7 07       	cpc	r27, r23
    3164:	10 f0       	brcs	.+4      	; 0x316a <__udivmodhi4_ep>
    3166:	a6 1b       	sub	r26, r22
    3168:	b7 0b       	sbc	r27, r23

0000316a <__udivmodhi4_ep>:
    316a:	88 1f       	adc	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	5a 95       	dec	r21
    3170:	a9 f7       	brne	.-22     	; 0x315c <__udivmodhi4_loop>
    3172:	80 95       	com	r24
    3174:	90 95       	com	r25
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	08 95       	ret

0000317c <malloc>:
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	82 30       	cpi	r24, 0x02	; 2
    3186:	91 05       	cpc	r25, r1
    3188:	10 f4       	brcc	.+4      	; 0x318e <malloc+0x12>
    318a:	82 e0       	ldi	r24, 0x02	; 2
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <__flp>
    3192:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <__flp+0x1>
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	a0 e0       	ldi	r26, 0x00	; 0
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	30 97       	sbiw	r30, 0x00	; 0
    31a0:	19 f1       	breq	.+70     	; 0x31e8 <malloc+0x6c>
    31a2:	40 81       	ld	r20, Z
    31a4:	51 81       	ldd	r21, Z+1	; 0x01
    31a6:	02 81       	ldd	r16, Z+2	; 0x02
    31a8:	13 81       	ldd	r17, Z+3	; 0x03
    31aa:	48 17       	cp	r20, r24
    31ac:	59 07       	cpc	r21, r25
    31ae:	c8 f0       	brcs	.+50     	; 0x31e2 <malloc+0x66>
    31b0:	84 17       	cp	r24, r20
    31b2:	95 07       	cpc	r25, r21
    31b4:	69 f4       	brne	.+26     	; 0x31d0 <malloc+0x54>
    31b6:	10 97       	sbiw	r26, 0x00	; 0
    31b8:	31 f0       	breq	.+12     	; 0x31c6 <malloc+0x4a>
    31ba:	12 96       	adiw	r26, 0x02	; 2
    31bc:	0c 93       	st	X, r16
    31be:	12 97       	sbiw	r26, 0x02	; 2
    31c0:	13 96       	adiw	r26, 0x03	; 3
    31c2:	1c 93       	st	X, r17
    31c4:	27 c0       	rjmp	.+78     	; 0x3214 <malloc+0x98>
    31c6:	00 93 e9 01 	sts	0x01E9, r16	; 0x8001e9 <__flp>
    31ca:	10 93 ea 01 	sts	0x01EA, r17	; 0x8001ea <__flp+0x1>
    31ce:	22 c0       	rjmp	.+68     	; 0x3214 <malloc+0x98>
    31d0:	21 15       	cp	r18, r1
    31d2:	31 05       	cpc	r19, r1
    31d4:	19 f0       	breq	.+6      	; 0x31dc <malloc+0x60>
    31d6:	42 17       	cp	r20, r18
    31d8:	53 07       	cpc	r21, r19
    31da:	18 f4       	brcc	.+6      	; 0x31e2 <malloc+0x66>
    31dc:	9a 01       	movw	r18, r20
    31de:	bd 01       	movw	r22, r26
    31e0:	ef 01       	movw	r28, r30
    31e2:	df 01       	movw	r26, r30
    31e4:	f8 01       	movw	r30, r16
    31e6:	db cf       	rjmp	.-74     	; 0x319e <malloc+0x22>
    31e8:	21 15       	cp	r18, r1
    31ea:	31 05       	cpc	r19, r1
    31ec:	f9 f0       	breq	.+62     	; 0x322c <malloc+0xb0>
    31ee:	28 1b       	sub	r18, r24
    31f0:	39 0b       	sbc	r19, r25
    31f2:	24 30       	cpi	r18, 0x04	; 4
    31f4:	31 05       	cpc	r19, r1
    31f6:	80 f4       	brcc	.+32     	; 0x3218 <malloc+0x9c>
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	61 15       	cp	r22, r1
    31fe:	71 05       	cpc	r23, r1
    3200:	21 f0       	breq	.+8      	; 0x320a <malloc+0x8e>
    3202:	fb 01       	movw	r30, r22
    3204:	93 83       	std	Z+3, r25	; 0x03
    3206:	82 83       	std	Z+2, r24	; 0x02
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <malloc+0x96>
    320a:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <__flp+0x1>
    320e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <__flp>
    3212:	fe 01       	movw	r30, r28
    3214:	32 96       	adiw	r30, 0x02	; 2
    3216:	44 c0       	rjmp	.+136    	; 0x32a0 <malloc+0x124>
    3218:	fe 01       	movw	r30, r28
    321a:	e2 0f       	add	r30, r18
    321c:	f3 1f       	adc	r31, r19
    321e:	81 93       	st	Z+, r24
    3220:	91 93       	st	Z+, r25
    3222:	22 50       	subi	r18, 0x02	; 2
    3224:	31 09       	sbc	r19, r1
    3226:	39 83       	std	Y+1, r19	; 0x01
    3228:	28 83       	st	Y, r18
    322a:	3a c0       	rjmp	.+116    	; 0x32a0 <malloc+0x124>
    322c:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <__brkval>
    3230:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <__brkval+0x1>
    3234:	23 2b       	or	r18, r19
    3236:	41 f4       	brne	.+16     	; 0x3248 <malloc+0xcc>
    3238:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    323c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    3240:	30 93 e8 01 	sts	0x01E8, r19	; 0x8001e8 <__brkval+0x1>
    3244:	20 93 e7 01 	sts	0x01E7, r18	; 0x8001e7 <__brkval>
    3248:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    324c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    3250:	21 15       	cp	r18, r1
    3252:	31 05       	cpc	r19, r1
    3254:	41 f4       	brne	.+16     	; 0x3266 <malloc+0xea>
    3256:	2d b7       	in	r18, 0x3d	; 61
    3258:	3e b7       	in	r19, 0x3e	; 62
    325a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    325e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    3262:	24 1b       	sub	r18, r20
    3264:	35 0b       	sbc	r19, r21
    3266:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <__brkval>
    326a:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <__brkval+0x1>
    326e:	e2 17       	cp	r30, r18
    3270:	f3 07       	cpc	r31, r19
    3272:	a0 f4       	brcc	.+40     	; 0x329c <malloc+0x120>
    3274:	2e 1b       	sub	r18, r30
    3276:	3f 0b       	sbc	r19, r31
    3278:	28 17       	cp	r18, r24
    327a:	39 07       	cpc	r19, r25
    327c:	78 f0       	brcs	.+30     	; 0x329c <malloc+0x120>
    327e:	ac 01       	movw	r20, r24
    3280:	4e 5f       	subi	r20, 0xFE	; 254
    3282:	5f 4f       	sbci	r21, 0xFF	; 255
    3284:	24 17       	cp	r18, r20
    3286:	35 07       	cpc	r19, r21
    3288:	48 f0       	brcs	.+18     	; 0x329c <malloc+0x120>
    328a:	4e 0f       	add	r20, r30
    328c:	5f 1f       	adc	r21, r31
    328e:	50 93 e8 01 	sts	0x01E8, r21	; 0x8001e8 <__brkval+0x1>
    3292:	40 93 e7 01 	sts	0x01E7, r20	; 0x8001e7 <__brkval>
    3296:	81 93       	st	Z+, r24
    3298:	91 93       	st	Z+, r25
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <malloc+0x124>
    329c:	e0 e0       	ldi	r30, 0x00	; 0
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	cf 01       	movw	r24, r30
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	08 95       	ret

000032ac <free>:
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <free+0xa>
    32b4:	81 c0       	rjmp	.+258    	; 0x33b8 <free+0x10c>
    32b6:	fc 01       	movw	r30, r24
    32b8:	32 97       	sbiw	r30, 0x02	; 2
    32ba:	13 82       	std	Z+3, r1	; 0x03
    32bc:	12 82       	std	Z+2, r1	; 0x02
    32be:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <__flp>
    32c2:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <__flp+0x1>
    32c6:	10 97       	sbiw	r26, 0x00	; 0
    32c8:	81 f4       	brne	.+32     	; 0x32ea <free+0x3e>
    32ca:	20 81       	ld	r18, Z
    32cc:	31 81       	ldd	r19, Z+1	; 0x01
    32ce:	82 0f       	add	r24, r18
    32d0:	93 1f       	adc	r25, r19
    32d2:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <__brkval>
    32d6:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <__brkval+0x1>
    32da:	28 17       	cp	r18, r24
    32dc:	39 07       	cpc	r19, r25
    32de:	51 f5       	brne	.+84     	; 0x3334 <free+0x88>
    32e0:	f0 93 e8 01 	sts	0x01E8, r31	; 0x8001e8 <__brkval+0x1>
    32e4:	e0 93 e7 01 	sts	0x01E7, r30	; 0x8001e7 <__brkval>
    32e8:	67 c0       	rjmp	.+206    	; 0x33b8 <free+0x10c>
    32ea:	ed 01       	movw	r28, r26
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	ce 17       	cp	r28, r30
    32f2:	df 07       	cpc	r29, r31
    32f4:	40 f4       	brcc	.+16     	; 0x3306 <free+0x5a>
    32f6:	4a 81       	ldd	r20, Y+2	; 0x02
    32f8:	5b 81       	ldd	r21, Y+3	; 0x03
    32fa:	9e 01       	movw	r18, r28
    32fc:	41 15       	cp	r20, r1
    32fe:	51 05       	cpc	r21, r1
    3300:	f1 f0       	breq	.+60     	; 0x333e <free+0x92>
    3302:	ea 01       	movw	r28, r20
    3304:	f5 cf       	rjmp	.-22     	; 0x32f0 <free+0x44>
    3306:	d3 83       	std	Z+3, r29	; 0x03
    3308:	c2 83       	std	Z+2, r28	; 0x02
    330a:	40 81       	ld	r20, Z
    330c:	51 81       	ldd	r21, Z+1	; 0x01
    330e:	84 0f       	add	r24, r20
    3310:	95 1f       	adc	r25, r21
    3312:	c8 17       	cp	r28, r24
    3314:	d9 07       	cpc	r29, r25
    3316:	59 f4       	brne	.+22     	; 0x332e <free+0x82>
    3318:	88 81       	ld	r24, Y
    331a:	99 81       	ldd	r25, Y+1	; 0x01
    331c:	84 0f       	add	r24, r20
    331e:	95 1f       	adc	r25, r21
    3320:	02 96       	adiw	r24, 0x02	; 2
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	80 83       	st	Z, r24
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	9b 81       	ldd	r25, Y+3	; 0x03
    332a:	93 83       	std	Z+3, r25	; 0x03
    332c:	82 83       	std	Z+2, r24	; 0x02
    332e:	21 15       	cp	r18, r1
    3330:	31 05       	cpc	r19, r1
    3332:	29 f4       	brne	.+10     	; 0x333e <free+0x92>
    3334:	f0 93 ea 01 	sts	0x01EA, r31	; 0x8001ea <__flp+0x1>
    3338:	e0 93 e9 01 	sts	0x01E9, r30	; 0x8001e9 <__flp>
    333c:	3d c0       	rjmp	.+122    	; 0x33b8 <free+0x10c>
    333e:	e9 01       	movw	r28, r18
    3340:	fb 83       	std	Y+3, r31	; 0x03
    3342:	ea 83       	std	Y+2, r30	; 0x02
    3344:	49 91       	ld	r20, Y+
    3346:	59 91       	ld	r21, Y+
    3348:	c4 0f       	add	r28, r20
    334a:	d5 1f       	adc	r29, r21
    334c:	ec 17       	cp	r30, r28
    334e:	fd 07       	cpc	r31, r29
    3350:	61 f4       	brne	.+24     	; 0x336a <free+0xbe>
    3352:	80 81       	ld	r24, Z
    3354:	91 81       	ldd	r25, Z+1	; 0x01
    3356:	84 0f       	add	r24, r20
    3358:	95 1f       	adc	r25, r21
    335a:	02 96       	adiw	r24, 0x02	; 2
    335c:	e9 01       	movw	r28, r18
    335e:	99 83       	std	Y+1, r25	; 0x01
    3360:	88 83       	st	Y, r24
    3362:	82 81       	ldd	r24, Z+2	; 0x02
    3364:	93 81       	ldd	r25, Z+3	; 0x03
    3366:	9b 83       	std	Y+3, r25	; 0x03
    3368:	8a 83       	std	Y+2, r24	; 0x02
    336a:	e0 e0       	ldi	r30, 0x00	; 0
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	12 96       	adiw	r26, 0x02	; 2
    3370:	8d 91       	ld	r24, X+
    3372:	9c 91       	ld	r25, X
    3374:	13 97       	sbiw	r26, 0x03	; 3
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	19 f0       	breq	.+6      	; 0x3380 <free+0xd4>
    337a:	fd 01       	movw	r30, r26
    337c:	dc 01       	movw	r26, r24
    337e:	f7 cf       	rjmp	.-18     	; 0x336e <free+0xc2>
    3380:	8d 91       	ld	r24, X+
    3382:	9c 91       	ld	r25, X
    3384:	11 97       	sbiw	r26, 0x01	; 1
    3386:	9d 01       	movw	r18, r26
    3388:	2e 5f       	subi	r18, 0xFE	; 254
    338a:	3f 4f       	sbci	r19, 0xFF	; 255
    338c:	82 0f       	add	r24, r18
    338e:	93 1f       	adc	r25, r19
    3390:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <__brkval>
    3394:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <__brkval+0x1>
    3398:	28 17       	cp	r18, r24
    339a:	39 07       	cpc	r19, r25
    339c:	69 f4       	brne	.+26     	; 0x33b8 <free+0x10c>
    339e:	30 97       	sbiw	r30, 0x00	; 0
    33a0:	29 f4       	brne	.+10     	; 0x33ac <free+0x100>
    33a2:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__flp+0x1>
    33a6:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <__flp>
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <free+0x104>
    33ac:	13 82       	std	Z+3, r1	; 0x03
    33ae:	12 82       	std	Z+2, r1	; 0x02
    33b0:	b0 93 e8 01 	sts	0x01E8, r27	; 0x8001e8 <__brkval+0x1>
    33b4:	a0 93 e7 01 	sts	0x01E7, r26	; 0x8001e7 <__brkval>
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	08 95       	ret

000033be <atof>:
    33be:	66 27       	eor	r22, r22
    33c0:	77 27       	eor	r23, r23
    33c2:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <strtod>

000033c6 <atoi>:
    33c6:	fc 01       	movw	r30, r24
    33c8:	88 27       	eor	r24, r24
    33ca:	99 27       	eor	r25, r25
    33cc:	e8 94       	clt
    33ce:	21 91       	ld	r18, Z+
    33d0:	20 32       	cpi	r18, 0x20	; 32
    33d2:	e9 f3       	breq	.-6      	; 0x33ce <atoi+0x8>
    33d4:	29 30       	cpi	r18, 0x09	; 9
    33d6:	10 f0       	brcs	.+4      	; 0x33dc <atoi+0x16>
    33d8:	2e 30       	cpi	r18, 0x0E	; 14
    33da:	c8 f3       	brcs	.-14     	; 0x33ce <atoi+0x8>
    33dc:	2b 32       	cpi	r18, 0x2B	; 43
    33de:	41 f0       	breq	.+16     	; 0x33f0 <atoi+0x2a>
    33e0:	2d 32       	cpi	r18, 0x2D	; 45
    33e2:	39 f4       	brne	.+14     	; 0x33f2 <atoi+0x2c>
    33e4:	68 94       	set
    33e6:	04 c0       	rjmp	.+8      	; 0x33f0 <atoi+0x2a>
    33e8:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__mulhi_const_10>
    33ec:	82 0f       	add	r24, r18
    33ee:	91 1d       	adc	r25, r1
    33f0:	21 91       	ld	r18, Z+
    33f2:	20 53       	subi	r18, 0x30	; 48
    33f4:	2a 30       	cpi	r18, 0x0A	; 10
    33f6:	c0 f3       	brcs	.-16     	; 0x33e8 <atoi+0x22>
    33f8:	1e f4       	brtc	.+6      	; 0x3400 <atoi+0x3a>
    33fa:	90 95       	com	r25
    33fc:	81 95       	neg	r24
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	08 95       	ret

00003402 <isxdigit>:
    3402:	91 11       	cpse	r25, r1
    3404:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__ctype_isfalse>
    3408:	80 53       	subi	r24, 0x30	; 48
    340a:	8a 50       	subi	r24, 0x0A	; 10
    340c:	28 f0       	brcs	.+10     	; 0x3418 <isxdigit+0x16>
    340e:	86 5c       	subi	r24, 0xC6	; 198
    3410:	80 62       	ori	r24, 0x20	; 32
    3412:	81 56       	subi	r24, 0x61	; 97
    3414:	86 50       	subi	r24, 0x06	; 6
    3416:	b0 f7       	brcc	.-20     	; 0x3404 <isxdigit+0x2>
    3418:	08 95       	ret

0000341a <toupper>:
    341a:	91 11       	cpse	r25, r1
    341c:	08 95       	ret
    341e:	81 56       	subi	r24, 0x61	; 97
    3420:	8a 51       	subi	r24, 0x1A	; 26
    3422:	08 f4       	brcc	.+2      	; 0x3426 <toupper+0xc>
    3424:	80 52       	subi	r24, 0x20	; 32
    3426:	85 58       	subi	r24, 0x85	; 133
    3428:	08 95       	ret

0000342a <strcat>:
    342a:	fb 01       	movw	r30, r22
    342c:	dc 01       	movw	r26, r24
    342e:	0d 90       	ld	r0, X+
    3430:	00 20       	and	r0, r0
    3432:	e9 f7       	brne	.-6      	; 0x342e <strcat+0x4>
    3434:	11 97       	sbiw	r26, 0x01	; 1
    3436:	01 90       	ld	r0, Z+
    3438:	0d 92       	st	X+, r0
    343a:	00 20       	and	r0, r0
    343c:	e1 f7       	brne	.-8      	; 0x3436 <strcat+0xc>
    343e:	08 95       	ret

00003440 <strchr>:
    3440:	fc 01       	movw	r30, r24
    3442:	81 91       	ld	r24, Z+
    3444:	86 17       	cp	r24, r22
    3446:	21 f0       	breq	.+8      	; 0x3450 <strchr+0x10>
    3448:	88 23       	and	r24, r24
    344a:	d9 f7       	brne	.-10     	; 0x3442 <strchr+0x2>
    344c:	99 27       	eor	r25, r25
    344e:	08 95       	ret
    3450:	31 97       	sbiw	r30, 0x01	; 1
    3452:	cf 01       	movw	r24, r30
    3454:	08 95       	ret

00003456 <__mulhi_const_10>:
    3456:	7a e0       	ldi	r23, 0x0A	; 10
    3458:	97 9f       	mul	r25, r23
    345a:	90 2d       	mov	r25, r0
    345c:	87 9f       	mul	r24, r23
    345e:	80 2d       	mov	r24, r0
    3460:	91 0d       	add	r25, r1
    3462:	11 24       	eor	r1, r1
    3464:	08 95       	ret

00003466 <printf>:
    3466:	a0 e0       	ldi	r26, 0x00	; 0
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e9 e3       	ldi	r30, 0x39	; 57
    346c:	fa e1       	ldi	r31, 0x1A	; 26
    346e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x20>
    3472:	ae 01       	movw	r20, r28
    3474:	4b 5f       	subi	r20, 0xFB	; 251
    3476:	5f 4f       	sbci	r21, 0xFF	; 255
    3478:	fa 01       	movw	r30, r20
    347a:	61 91       	ld	r22, Z+
    347c:	71 91       	ld	r23, Z+
    347e:	af 01       	movw	r20, r30
    3480:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <__iob+0x2>
    3484:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <__iob+0x3>
    3488:	0e 94 49 1a 	call	0x3492	; 0x3492 <vfprintf>
    348c:	e2 e0       	ldi	r30, 0x02	; 2
    348e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x20>

00003492 <vfprintf>:
    3492:	ab e0       	ldi	r26, 0x0B	; 11
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	ef e4       	ldi	r30, 0x4F	; 79
    3498:	fa e1       	ldi	r31, 0x1A	; 26
    349a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__>
    349e:	6c 01       	movw	r12, r24
    34a0:	7b 01       	movw	r14, r22
    34a2:	8a 01       	movw	r16, r20
    34a4:	fc 01       	movw	r30, r24
    34a6:	17 82       	std	Z+7, r1	; 0x07
    34a8:	16 82       	std	Z+6, r1	; 0x06
    34aa:	83 81       	ldd	r24, Z+3	; 0x03
    34ac:	81 ff       	sbrs	r24, 1
    34ae:	cc c1       	rjmp	.+920    	; 0x3848 <vfprintf+0x3b6>
    34b0:	ce 01       	movw	r24, r28
    34b2:	01 96       	adiw	r24, 0x01	; 1
    34b4:	3c 01       	movw	r6, r24
    34b6:	f6 01       	movw	r30, r12
    34b8:	93 81       	ldd	r25, Z+3	; 0x03
    34ba:	f7 01       	movw	r30, r14
    34bc:	93 fd       	sbrc	r25, 3
    34be:	85 91       	lpm	r24, Z+
    34c0:	93 ff       	sbrs	r25, 3
    34c2:	81 91       	ld	r24, Z+
    34c4:	7f 01       	movw	r14, r30
    34c6:	88 23       	and	r24, r24
    34c8:	09 f4       	brne	.+2      	; 0x34cc <vfprintf+0x3a>
    34ca:	ba c1       	rjmp	.+884    	; 0x3840 <vfprintf+0x3ae>
    34cc:	85 32       	cpi	r24, 0x25	; 37
    34ce:	39 f4       	brne	.+14     	; 0x34de <vfprintf+0x4c>
    34d0:	93 fd       	sbrc	r25, 3
    34d2:	85 91       	lpm	r24, Z+
    34d4:	93 ff       	sbrs	r25, 3
    34d6:	81 91       	ld	r24, Z+
    34d8:	7f 01       	movw	r14, r30
    34da:	85 32       	cpi	r24, 0x25	; 37
    34dc:	29 f4       	brne	.+10     	; 0x34e8 <vfprintf+0x56>
    34de:	b6 01       	movw	r22, r12
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    34e6:	e7 cf       	rjmp	.-50     	; 0x34b6 <vfprintf+0x24>
    34e8:	91 2c       	mov	r9, r1
    34ea:	21 2c       	mov	r2, r1
    34ec:	31 2c       	mov	r3, r1
    34ee:	ff e1       	ldi	r31, 0x1F	; 31
    34f0:	f3 15       	cp	r31, r3
    34f2:	d8 f0       	brcs	.+54     	; 0x352a <vfprintf+0x98>
    34f4:	8b 32       	cpi	r24, 0x2B	; 43
    34f6:	79 f0       	breq	.+30     	; 0x3516 <vfprintf+0x84>
    34f8:	38 f4       	brcc	.+14     	; 0x3508 <vfprintf+0x76>
    34fa:	80 32       	cpi	r24, 0x20	; 32
    34fc:	79 f0       	breq	.+30     	; 0x351c <vfprintf+0x8a>
    34fe:	83 32       	cpi	r24, 0x23	; 35
    3500:	a1 f4       	brne	.+40     	; 0x352a <vfprintf+0x98>
    3502:	23 2d       	mov	r18, r3
    3504:	20 61       	ori	r18, 0x10	; 16
    3506:	1d c0       	rjmp	.+58     	; 0x3542 <vfprintf+0xb0>
    3508:	8d 32       	cpi	r24, 0x2D	; 45
    350a:	61 f0       	breq	.+24     	; 0x3524 <vfprintf+0x92>
    350c:	80 33       	cpi	r24, 0x30	; 48
    350e:	69 f4       	brne	.+26     	; 0x352a <vfprintf+0x98>
    3510:	23 2d       	mov	r18, r3
    3512:	21 60       	ori	r18, 0x01	; 1
    3514:	16 c0       	rjmp	.+44     	; 0x3542 <vfprintf+0xb0>
    3516:	83 2d       	mov	r24, r3
    3518:	82 60       	ori	r24, 0x02	; 2
    351a:	38 2e       	mov	r3, r24
    351c:	e3 2d       	mov	r30, r3
    351e:	e4 60       	ori	r30, 0x04	; 4
    3520:	3e 2e       	mov	r3, r30
    3522:	2a c0       	rjmp	.+84     	; 0x3578 <vfprintf+0xe6>
    3524:	f3 2d       	mov	r31, r3
    3526:	f8 60       	ori	r31, 0x08	; 8
    3528:	1d c0       	rjmp	.+58     	; 0x3564 <vfprintf+0xd2>
    352a:	37 fc       	sbrc	r3, 7
    352c:	2d c0       	rjmp	.+90     	; 0x3588 <vfprintf+0xf6>
    352e:	20 ed       	ldi	r18, 0xD0	; 208
    3530:	28 0f       	add	r18, r24
    3532:	2a 30       	cpi	r18, 0x0A	; 10
    3534:	40 f0       	brcs	.+16     	; 0x3546 <vfprintf+0xb4>
    3536:	8e 32       	cpi	r24, 0x2E	; 46
    3538:	b9 f4       	brne	.+46     	; 0x3568 <vfprintf+0xd6>
    353a:	36 fc       	sbrc	r3, 6
    353c:	81 c1       	rjmp	.+770    	; 0x3840 <vfprintf+0x3ae>
    353e:	23 2d       	mov	r18, r3
    3540:	20 64       	ori	r18, 0x40	; 64
    3542:	32 2e       	mov	r3, r18
    3544:	19 c0       	rjmp	.+50     	; 0x3578 <vfprintf+0xe6>
    3546:	36 fe       	sbrs	r3, 6
    3548:	06 c0       	rjmp	.+12     	; 0x3556 <vfprintf+0xc4>
    354a:	8a e0       	ldi	r24, 0x0A	; 10
    354c:	98 9e       	mul	r9, r24
    354e:	20 0d       	add	r18, r0
    3550:	11 24       	eor	r1, r1
    3552:	92 2e       	mov	r9, r18
    3554:	11 c0       	rjmp	.+34     	; 0x3578 <vfprintf+0xe6>
    3556:	ea e0       	ldi	r30, 0x0A	; 10
    3558:	2e 9e       	mul	r2, r30
    355a:	20 0d       	add	r18, r0
    355c:	11 24       	eor	r1, r1
    355e:	22 2e       	mov	r2, r18
    3560:	f3 2d       	mov	r31, r3
    3562:	f0 62       	ori	r31, 0x20	; 32
    3564:	3f 2e       	mov	r3, r31
    3566:	08 c0       	rjmp	.+16     	; 0x3578 <vfprintf+0xe6>
    3568:	8c 36       	cpi	r24, 0x6C	; 108
    356a:	21 f4       	brne	.+8      	; 0x3574 <vfprintf+0xe2>
    356c:	83 2d       	mov	r24, r3
    356e:	80 68       	ori	r24, 0x80	; 128
    3570:	38 2e       	mov	r3, r24
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <vfprintf+0xe6>
    3574:	88 36       	cpi	r24, 0x68	; 104
    3576:	41 f4       	brne	.+16     	; 0x3588 <vfprintf+0xf6>
    3578:	f7 01       	movw	r30, r14
    357a:	93 fd       	sbrc	r25, 3
    357c:	85 91       	lpm	r24, Z+
    357e:	93 ff       	sbrs	r25, 3
    3580:	81 91       	ld	r24, Z+
    3582:	7f 01       	movw	r14, r30
    3584:	81 11       	cpse	r24, r1
    3586:	b3 cf       	rjmp	.-154    	; 0x34ee <vfprintf+0x5c>
    3588:	98 2f       	mov	r25, r24
    358a:	9f 7d       	andi	r25, 0xDF	; 223
    358c:	95 54       	subi	r25, 0x45	; 69
    358e:	93 30       	cpi	r25, 0x03	; 3
    3590:	28 f4       	brcc	.+10     	; 0x359c <vfprintf+0x10a>
    3592:	0c 5f       	subi	r16, 0xFC	; 252
    3594:	1f 4f       	sbci	r17, 0xFF	; 255
    3596:	9f e3       	ldi	r25, 0x3F	; 63
    3598:	99 83       	std	Y+1, r25	; 0x01
    359a:	0d c0       	rjmp	.+26     	; 0x35b6 <vfprintf+0x124>
    359c:	83 36       	cpi	r24, 0x63	; 99
    359e:	31 f0       	breq	.+12     	; 0x35ac <vfprintf+0x11a>
    35a0:	83 37       	cpi	r24, 0x73	; 115
    35a2:	71 f0       	breq	.+28     	; 0x35c0 <vfprintf+0x12e>
    35a4:	83 35       	cpi	r24, 0x53	; 83
    35a6:	09 f0       	breq	.+2      	; 0x35aa <vfprintf+0x118>
    35a8:	59 c0       	rjmp	.+178    	; 0x365c <vfprintf+0x1ca>
    35aa:	21 c0       	rjmp	.+66     	; 0x35ee <vfprintf+0x15c>
    35ac:	f8 01       	movw	r30, r16
    35ae:	80 81       	ld	r24, Z
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	0e 5f       	subi	r16, 0xFE	; 254
    35b4:	1f 4f       	sbci	r17, 0xFF	; 255
    35b6:	88 24       	eor	r8, r8
    35b8:	83 94       	inc	r8
    35ba:	91 2c       	mov	r9, r1
    35bc:	53 01       	movw	r10, r6
    35be:	13 c0       	rjmp	.+38     	; 0x35e6 <vfprintf+0x154>
    35c0:	28 01       	movw	r4, r16
    35c2:	f2 e0       	ldi	r31, 0x02	; 2
    35c4:	4f 0e       	add	r4, r31
    35c6:	51 1c       	adc	r5, r1
    35c8:	f8 01       	movw	r30, r16
    35ca:	a0 80       	ld	r10, Z
    35cc:	b1 80       	ldd	r11, Z+1	; 0x01
    35ce:	36 fe       	sbrs	r3, 6
    35d0:	03 c0       	rjmp	.+6      	; 0x35d8 <vfprintf+0x146>
    35d2:	69 2d       	mov	r22, r9
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <vfprintf+0x14a>
    35d8:	6f ef       	ldi	r22, 0xFF	; 255
    35da:	7f ef       	ldi	r23, 0xFF	; 255
    35dc:	c5 01       	movw	r24, r10
    35de:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <strnlen>
    35e2:	4c 01       	movw	r8, r24
    35e4:	82 01       	movw	r16, r4
    35e6:	f3 2d       	mov	r31, r3
    35e8:	ff 77       	andi	r31, 0x7F	; 127
    35ea:	3f 2e       	mov	r3, r31
    35ec:	16 c0       	rjmp	.+44     	; 0x361a <vfprintf+0x188>
    35ee:	28 01       	movw	r4, r16
    35f0:	22 e0       	ldi	r18, 0x02	; 2
    35f2:	42 0e       	add	r4, r18
    35f4:	51 1c       	adc	r5, r1
    35f6:	f8 01       	movw	r30, r16
    35f8:	a0 80       	ld	r10, Z
    35fa:	b1 80       	ldd	r11, Z+1	; 0x01
    35fc:	36 fe       	sbrs	r3, 6
    35fe:	03 c0       	rjmp	.+6      	; 0x3606 <vfprintf+0x174>
    3600:	69 2d       	mov	r22, r9
    3602:	70 e0       	ldi	r23, 0x00	; 0
    3604:	02 c0       	rjmp	.+4      	; 0x360a <vfprintf+0x178>
    3606:	6f ef       	ldi	r22, 0xFF	; 255
    3608:	7f ef       	ldi	r23, 0xFF	; 255
    360a:	c5 01       	movw	r24, r10
    360c:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <strnlen_P>
    3610:	4c 01       	movw	r8, r24
    3612:	f3 2d       	mov	r31, r3
    3614:	f0 68       	ori	r31, 0x80	; 128
    3616:	3f 2e       	mov	r3, r31
    3618:	82 01       	movw	r16, r4
    361a:	33 fc       	sbrc	r3, 3
    361c:	1b c0       	rjmp	.+54     	; 0x3654 <vfprintf+0x1c2>
    361e:	82 2d       	mov	r24, r2
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	88 16       	cp	r8, r24
    3624:	99 06       	cpc	r9, r25
    3626:	b0 f4       	brcc	.+44     	; 0x3654 <vfprintf+0x1c2>
    3628:	b6 01       	movw	r22, r12
    362a:	80 e2       	ldi	r24, 0x20	; 32
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    3632:	2a 94       	dec	r2
    3634:	f4 cf       	rjmp	.-24     	; 0x361e <vfprintf+0x18c>
    3636:	f5 01       	movw	r30, r10
    3638:	37 fc       	sbrc	r3, 7
    363a:	85 91       	lpm	r24, Z+
    363c:	37 fe       	sbrs	r3, 7
    363e:	81 91       	ld	r24, Z+
    3640:	5f 01       	movw	r10, r30
    3642:	b6 01       	movw	r22, r12
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    364a:	21 10       	cpse	r2, r1
    364c:	2a 94       	dec	r2
    364e:	21 e0       	ldi	r18, 0x01	; 1
    3650:	82 1a       	sub	r8, r18
    3652:	91 08       	sbc	r9, r1
    3654:	81 14       	cp	r8, r1
    3656:	91 04       	cpc	r9, r1
    3658:	71 f7       	brne	.-36     	; 0x3636 <vfprintf+0x1a4>
    365a:	e8 c0       	rjmp	.+464    	; 0x382c <vfprintf+0x39a>
    365c:	84 36       	cpi	r24, 0x64	; 100
    365e:	11 f0       	breq	.+4      	; 0x3664 <vfprintf+0x1d2>
    3660:	89 36       	cpi	r24, 0x69	; 105
    3662:	41 f5       	brne	.+80     	; 0x36b4 <vfprintf+0x222>
    3664:	f8 01       	movw	r30, r16
    3666:	37 fe       	sbrs	r3, 7
    3668:	07 c0       	rjmp	.+14     	; 0x3678 <vfprintf+0x1e6>
    366a:	60 81       	ld	r22, Z
    366c:	71 81       	ldd	r23, Z+1	; 0x01
    366e:	82 81       	ldd	r24, Z+2	; 0x02
    3670:	93 81       	ldd	r25, Z+3	; 0x03
    3672:	0c 5f       	subi	r16, 0xFC	; 252
    3674:	1f 4f       	sbci	r17, 0xFF	; 255
    3676:	08 c0       	rjmp	.+16     	; 0x3688 <vfprintf+0x1f6>
    3678:	60 81       	ld	r22, Z
    367a:	71 81       	ldd	r23, Z+1	; 0x01
    367c:	07 2e       	mov	r0, r23
    367e:	00 0c       	add	r0, r0
    3680:	88 0b       	sbc	r24, r24
    3682:	99 0b       	sbc	r25, r25
    3684:	0e 5f       	subi	r16, 0xFE	; 254
    3686:	1f 4f       	sbci	r17, 0xFF	; 255
    3688:	f3 2d       	mov	r31, r3
    368a:	ff 76       	andi	r31, 0x6F	; 111
    368c:	3f 2e       	mov	r3, r31
    368e:	97 ff       	sbrs	r25, 7
    3690:	09 c0       	rjmp	.+18     	; 0x36a4 <vfprintf+0x212>
    3692:	90 95       	com	r25
    3694:	80 95       	com	r24
    3696:	70 95       	com	r23
    3698:	61 95       	neg	r22
    369a:	7f 4f       	sbci	r23, 0xFF	; 255
    369c:	8f 4f       	sbci	r24, 0xFF	; 255
    369e:	9f 4f       	sbci	r25, 0xFF	; 255
    36a0:	f0 68       	ori	r31, 0x80	; 128
    36a2:	3f 2e       	mov	r3, r31
    36a4:	2a e0       	ldi	r18, 0x0A	; 10
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	a3 01       	movw	r20, r6
    36aa:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__ultoa_invert>
    36ae:	88 2e       	mov	r8, r24
    36b0:	86 18       	sub	r8, r6
    36b2:	45 c0       	rjmp	.+138    	; 0x373e <vfprintf+0x2ac>
    36b4:	85 37       	cpi	r24, 0x75	; 117
    36b6:	31 f4       	brne	.+12     	; 0x36c4 <vfprintf+0x232>
    36b8:	23 2d       	mov	r18, r3
    36ba:	2f 7e       	andi	r18, 0xEF	; 239
    36bc:	b2 2e       	mov	r11, r18
    36be:	2a e0       	ldi	r18, 0x0A	; 10
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	25 c0       	rjmp	.+74     	; 0x370e <vfprintf+0x27c>
    36c4:	93 2d       	mov	r25, r3
    36c6:	99 7f       	andi	r25, 0xF9	; 249
    36c8:	b9 2e       	mov	r11, r25
    36ca:	8f 36       	cpi	r24, 0x6F	; 111
    36cc:	c1 f0       	breq	.+48     	; 0x36fe <vfprintf+0x26c>
    36ce:	18 f4       	brcc	.+6      	; 0x36d6 <vfprintf+0x244>
    36d0:	88 35       	cpi	r24, 0x58	; 88
    36d2:	79 f0       	breq	.+30     	; 0x36f2 <vfprintf+0x260>
    36d4:	b5 c0       	rjmp	.+362    	; 0x3840 <vfprintf+0x3ae>
    36d6:	80 37       	cpi	r24, 0x70	; 112
    36d8:	19 f0       	breq	.+6      	; 0x36e0 <vfprintf+0x24e>
    36da:	88 37       	cpi	r24, 0x78	; 120
    36dc:	21 f0       	breq	.+8      	; 0x36e6 <vfprintf+0x254>
    36de:	b0 c0       	rjmp	.+352    	; 0x3840 <vfprintf+0x3ae>
    36e0:	e9 2f       	mov	r30, r25
    36e2:	e0 61       	ori	r30, 0x10	; 16
    36e4:	be 2e       	mov	r11, r30
    36e6:	b4 fe       	sbrs	r11, 4
    36e8:	0d c0       	rjmp	.+26     	; 0x3704 <vfprintf+0x272>
    36ea:	fb 2d       	mov	r31, r11
    36ec:	f4 60       	ori	r31, 0x04	; 4
    36ee:	bf 2e       	mov	r11, r31
    36f0:	09 c0       	rjmp	.+18     	; 0x3704 <vfprintf+0x272>
    36f2:	34 fe       	sbrs	r3, 4
    36f4:	0a c0       	rjmp	.+20     	; 0x370a <vfprintf+0x278>
    36f6:	29 2f       	mov	r18, r25
    36f8:	26 60       	ori	r18, 0x06	; 6
    36fa:	b2 2e       	mov	r11, r18
    36fc:	06 c0       	rjmp	.+12     	; 0x370a <vfprintf+0x278>
    36fe:	28 e0       	ldi	r18, 0x08	; 8
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	05 c0       	rjmp	.+10     	; 0x370e <vfprintf+0x27c>
    3704:	20 e1       	ldi	r18, 0x10	; 16
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	02 c0       	rjmp	.+4      	; 0x370e <vfprintf+0x27c>
    370a:	20 e1       	ldi	r18, 0x10	; 16
    370c:	32 e0       	ldi	r19, 0x02	; 2
    370e:	f8 01       	movw	r30, r16
    3710:	b7 fe       	sbrs	r11, 7
    3712:	07 c0       	rjmp	.+14     	; 0x3722 <vfprintf+0x290>
    3714:	60 81       	ld	r22, Z
    3716:	71 81       	ldd	r23, Z+1	; 0x01
    3718:	82 81       	ldd	r24, Z+2	; 0x02
    371a:	93 81       	ldd	r25, Z+3	; 0x03
    371c:	0c 5f       	subi	r16, 0xFC	; 252
    371e:	1f 4f       	sbci	r17, 0xFF	; 255
    3720:	06 c0       	rjmp	.+12     	; 0x372e <vfprintf+0x29c>
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	0e 5f       	subi	r16, 0xFE	; 254
    372c:	1f 4f       	sbci	r17, 0xFF	; 255
    372e:	a3 01       	movw	r20, r6
    3730:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__ultoa_invert>
    3734:	88 2e       	mov	r8, r24
    3736:	86 18       	sub	r8, r6
    3738:	fb 2d       	mov	r31, r11
    373a:	ff 77       	andi	r31, 0x7F	; 127
    373c:	3f 2e       	mov	r3, r31
    373e:	36 fe       	sbrs	r3, 6
    3740:	0d c0       	rjmp	.+26     	; 0x375c <vfprintf+0x2ca>
    3742:	23 2d       	mov	r18, r3
    3744:	2e 7f       	andi	r18, 0xFE	; 254
    3746:	a2 2e       	mov	r10, r18
    3748:	89 14       	cp	r8, r9
    374a:	58 f4       	brcc	.+22     	; 0x3762 <vfprintf+0x2d0>
    374c:	34 fe       	sbrs	r3, 4
    374e:	0b c0       	rjmp	.+22     	; 0x3766 <vfprintf+0x2d4>
    3750:	32 fc       	sbrc	r3, 2
    3752:	09 c0       	rjmp	.+18     	; 0x3766 <vfprintf+0x2d4>
    3754:	83 2d       	mov	r24, r3
    3756:	8e 7e       	andi	r24, 0xEE	; 238
    3758:	a8 2e       	mov	r10, r24
    375a:	05 c0       	rjmp	.+10     	; 0x3766 <vfprintf+0x2d4>
    375c:	b8 2c       	mov	r11, r8
    375e:	a3 2c       	mov	r10, r3
    3760:	03 c0       	rjmp	.+6      	; 0x3768 <vfprintf+0x2d6>
    3762:	b8 2c       	mov	r11, r8
    3764:	01 c0       	rjmp	.+2      	; 0x3768 <vfprintf+0x2d6>
    3766:	b9 2c       	mov	r11, r9
    3768:	a4 fe       	sbrs	r10, 4
    376a:	0f c0       	rjmp	.+30     	; 0x378a <vfprintf+0x2f8>
    376c:	fe 01       	movw	r30, r28
    376e:	e8 0d       	add	r30, r8
    3770:	f1 1d       	adc	r31, r1
    3772:	80 81       	ld	r24, Z
    3774:	80 33       	cpi	r24, 0x30	; 48
    3776:	21 f4       	brne	.+8      	; 0x3780 <vfprintf+0x2ee>
    3778:	9a 2d       	mov	r25, r10
    377a:	99 7e       	andi	r25, 0xE9	; 233
    377c:	a9 2e       	mov	r10, r25
    377e:	09 c0       	rjmp	.+18     	; 0x3792 <vfprintf+0x300>
    3780:	a2 fe       	sbrs	r10, 2
    3782:	06 c0       	rjmp	.+12     	; 0x3790 <vfprintf+0x2fe>
    3784:	b3 94       	inc	r11
    3786:	b3 94       	inc	r11
    3788:	04 c0       	rjmp	.+8      	; 0x3792 <vfprintf+0x300>
    378a:	8a 2d       	mov	r24, r10
    378c:	86 78       	andi	r24, 0x86	; 134
    378e:	09 f0       	breq	.+2      	; 0x3792 <vfprintf+0x300>
    3790:	b3 94       	inc	r11
    3792:	a3 fc       	sbrc	r10, 3
    3794:	11 c0       	rjmp	.+34     	; 0x37b8 <vfprintf+0x326>
    3796:	a0 fe       	sbrs	r10, 0
    3798:	06 c0       	rjmp	.+12     	; 0x37a6 <vfprintf+0x314>
    379a:	b2 14       	cp	r11, r2
    379c:	88 f4       	brcc	.+34     	; 0x37c0 <vfprintf+0x32e>
    379e:	28 0c       	add	r2, r8
    37a0:	92 2c       	mov	r9, r2
    37a2:	9b 18       	sub	r9, r11
    37a4:	0e c0       	rjmp	.+28     	; 0x37c2 <vfprintf+0x330>
    37a6:	b2 14       	cp	r11, r2
    37a8:	60 f4       	brcc	.+24     	; 0x37c2 <vfprintf+0x330>
    37aa:	b6 01       	movw	r22, r12
    37ac:	80 e2       	ldi	r24, 0x20	; 32
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    37b4:	b3 94       	inc	r11
    37b6:	f7 cf       	rjmp	.-18     	; 0x37a6 <vfprintf+0x314>
    37b8:	b2 14       	cp	r11, r2
    37ba:	18 f4       	brcc	.+6      	; 0x37c2 <vfprintf+0x330>
    37bc:	2b 18       	sub	r2, r11
    37be:	02 c0       	rjmp	.+4      	; 0x37c4 <vfprintf+0x332>
    37c0:	98 2c       	mov	r9, r8
    37c2:	21 2c       	mov	r2, r1
    37c4:	a4 fe       	sbrs	r10, 4
    37c6:	10 c0       	rjmp	.+32     	; 0x37e8 <vfprintf+0x356>
    37c8:	b6 01       	movw	r22, r12
    37ca:	80 e3       	ldi	r24, 0x30	; 48
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    37d2:	a2 fe       	sbrs	r10, 2
    37d4:	17 c0       	rjmp	.+46     	; 0x3804 <vfprintf+0x372>
    37d6:	a1 fc       	sbrc	r10, 1
    37d8:	03 c0       	rjmp	.+6      	; 0x37e0 <vfprintf+0x34e>
    37da:	88 e7       	ldi	r24, 0x78	; 120
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	02 c0       	rjmp	.+4      	; 0x37e4 <vfprintf+0x352>
    37e0:	88 e5       	ldi	r24, 0x58	; 88
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	b6 01       	movw	r22, r12
    37e6:	0c c0       	rjmp	.+24     	; 0x3800 <vfprintf+0x36e>
    37e8:	8a 2d       	mov	r24, r10
    37ea:	86 78       	andi	r24, 0x86	; 134
    37ec:	59 f0       	breq	.+22     	; 0x3804 <vfprintf+0x372>
    37ee:	a1 fe       	sbrs	r10, 1
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <vfprintf+0x364>
    37f2:	8b e2       	ldi	r24, 0x2B	; 43
    37f4:	01 c0       	rjmp	.+2      	; 0x37f8 <vfprintf+0x366>
    37f6:	80 e2       	ldi	r24, 0x20	; 32
    37f8:	a7 fc       	sbrc	r10, 7
    37fa:	8d e2       	ldi	r24, 0x2D	; 45
    37fc:	b6 01       	movw	r22, r12
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    3804:	89 14       	cp	r8, r9
    3806:	38 f4       	brcc	.+14     	; 0x3816 <vfprintf+0x384>
    3808:	b6 01       	movw	r22, r12
    380a:	80 e3       	ldi	r24, 0x30	; 48
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    3812:	9a 94       	dec	r9
    3814:	f7 cf       	rjmp	.-18     	; 0x3804 <vfprintf+0x372>
    3816:	8a 94       	dec	r8
    3818:	f3 01       	movw	r30, r6
    381a:	e8 0d       	add	r30, r8
    381c:	f1 1d       	adc	r31, r1
    381e:	80 81       	ld	r24, Z
    3820:	b6 01       	movw	r22, r12
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    3828:	81 10       	cpse	r8, r1
    382a:	f5 cf       	rjmp	.-22     	; 0x3816 <vfprintf+0x384>
    382c:	22 20       	and	r2, r2
    382e:	09 f4       	brne	.+2      	; 0x3832 <vfprintf+0x3a0>
    3830:	42 ce       	rjmp	.-892    	; 0x34b6 <vfprintf+0x24>
    3832:	b6 01       	movw	r22, r12
    3834:	80 e2       	ldi	r24, 0x20	; 32
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <fputc>
    383c:	2a 94       	dec	r2
    383e:	f6 cf       	rjmp	.-20     	; 0x382c <vfprintf+0x39a>
    3840:	f6 01       	movw	r30, r12
    3842:	86 81       	ldd	r24, Z+6	; 0x06
    3844:	97 81       	ldd	r25, Z+7	; 0x07
    3846:	02 c0       	rjmp	.+4      	; 0x384c <vfprintf+0x3ba>
    3848:	8f ef       	ldi	r24, 0xFF	; 255
    384a:	9f ef       	ldi	r25, 0xFF	; 255
    384c:	2b 96       	adiw	r28, 0x0b	; 11
    384e:	e2 e1       	ldi	r30, 0x12	; 18
    3850:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__>

00003854 <strtod>:
    3854:	a0 e0       	ldi	r26, 0x00	; 0
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	e0 e3       	ldi	r30, 0x30	; 48
    385a:	fc e1       	ldi	r31, 0x1C	; 28
    385c:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0xc>
    3860:	ec 01       	movw	r28, r24
    3862:	6b 01       	movw	r12, r22
    3864:	61 15       	cp	r22, r1
    3866:	71 05       	cpc	r23, r1
    3868:	19 f0       	breq	.+6      	; 0x3870 <strtod+0x1c>
    386a:	fb 01       	movw	r30, r22
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	80 83       	st	Z, r24
    3870:	7e 01       	movw	r14, r28
    3872:	ff ef       	ldi	r31, 0xFF	; 255
    3874:	ef 1a       	sub	r14, r31
    3876:	ff 0a       	sbc	r15, r31
    3878:	08 81       	ld	r16, Y
    387a:	80 2f       	mov	r24, r16
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <isspace>
    3882:	89 2b       	or	r24, r25
    3884:	11 f0       	breq	.+4      	; 0x388a <strtod+0x36>
    3886:	e7 01       	movw	r28, r14
    3888:	f3 cf       	rjmp	.-26     	; 0x3870 <strtod+0x1c>
    388a:	0d 32       	cpi	r16, 0x2D	; 45
    388c:	39 f4       	brne	.+14     	; 0x389c <strtod+0x48>
    388e:	7e 01       	movw	r14, r28
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	e8 0e       	add	r14, r24
    3894:	f1 1c       	adc	r15, r1
    3896:	09 81       	ldd	r16, Y+1	; 0x01
    3898:	11 e0       	ldi	r17, 0x01	; 1
    389a:	08 c0       	rjmp	.+16     	; 0x38ac <strtod+0x58>
    389c:	0b 32       	cpi	r16, 0x2B	; 43
    389e:	29 f4       	brne	.+10     	; 0x38aa <strtod+0x56>
    38a0:	7e 01       	movw	r14, r28
    38a2:	92 e0       	ldi	r25, 0x02	; 2
    38a4:	e9 0e       	add	r14, r25
    38a6:	f1 1c       	adc	r15, r1
    38a8:	09 81       	ldd	r16, Y+1	; 0x01
    38aa:	10 e0       	ldi	r17, 0x00	; 0
    38ac:	e7 01       	movw	r28, r14
    38ae:	21 97       	sbiw	r28, 0x01	; 1
    38b0:	43 e0       	ldi	r20, 0x03	; 3
    38b2:	50 e0       	ldi	r21, 0x00	; 0
    38b4:	6c e0       	ldi	r22, 0x0C	; 12
    38b6:	71 e0       	ldi	r23, 0x01	; 1
    38b8:	ce 01       	movw	r24, r28
    38ba:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <strncasecmp_P>
    38be:	89 2b       	or	r24, r25
    38c0:	c1 f4       	brne	.+48     	; 0x38f2 <strtod+0x9e>
    38c2:	23 96       	adiw	r28, 0x03	; 3
    38c4:	45 e0       	ldi	r20, 0x05	; 5
    38c6:	50 e0       	ldi	r21, 0x00	; 0
    38c8:	67 e0       	ldi	r22, 0x07	; 7
    38ca:	71 e0       	ldi	r23, 0x01	; 1
    38cc:	ce 01       	movw	r24, r28
    38ce:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <strncasecmp_P>
    38d2:	89 2b       	or	r24, r25
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <strtod+0x84>
    38d6:	25 96       	adiw	r28, 0x05	; 5
    38d8:	c1 14       	cp	r12, r1
    38da:	d1 04       	cpc	r13, r1
    38dc:	19 f0       	breq	.+6      	; 0x38e4 <strtod+0x90>
    38de:	f6 01       	movw	r30, r12
    38e0:	d1 83       	std	Z+1, r29	; 0x01
    38e2:	c0 83       	st	Z, r28
    38e4:	11 11       	cpse	r17, r1
    38e6:	f6 c0       	rjmp	.+492    	; 0x3ad4 <strtod+0x280>
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	70 e0       	ldi	r23, 0x00	; 0
    38ec:	80 e8       	ldi	r24, 0x80	; 128
    38ee:	9f e7       	ldi	r25, 0x7F	; 127
    38f0:	fa c0       	rjmp	.+500    	; 0x3ae6 <strtod+0x292>
    38f2:	43 e0       	ldi	r20, 0x03	; 3
    38f4:	50 e0       	ldi	r21, 0x00	; 0
    38f6:	64 e0       	ldi	r22, 0x04	; 4
    38f8:	71 e0       	ldi	r23, 0x01	; 1
    38fa:	ce 01       	movw	r24, r28
    38fc:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <strncasecmp_P>
    3900:	89 2b       	or	r24, r25
    3902:	59 f4       	brne	.+22     	; 0x391a <strtod+0xc6>
    3904:	c1 14       	cp	r12, r1
    3906:	d1 04       	cpc	r13, r1
    3908:	09 f4       	brne	.+2      	; 0x390c <strtod+0xb8>
    390a:	e9 c0       	rjmp	.+466    	; 0x3ade <strtod+0x28a>
    390c:	f2 e0       	ldi	r31, 0x02	; 2
    390e:	ef 0e       	add	r14, r31
    3910:	f1 1c       	adc	r15, r1
    3912:	f6 01       	movw	r30, r12
    3914:	f1 82       	std	Z+1, r15	; 0x01
    3916:	e0 82       	st	Z, r14
    3918:	e2 c0       	rjmp	.+452    	; 0x3ade <strtod+0x28a>
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	a9 01       	movw	r20, r18
    3920:	c0 e0       	ldi	r28, 0x00	; 0
    3922:	d0 e0       	ldi	r29, 0x00	; 0
    3924:	f7 01       	movw	r30, r14
    3926:	80 ed       	ldi	r24, 0xD0	; 208
    3928:	a8 2e       	mov	r10, r24
    392a:	a0 0e       	add	r10, r16
    392c:	89 e0       	ldi	r24, 0x09	; 9
    392e:	8a 15       	cp	r24, r10
    3930:	30 f1       	brcs	.+76     	; 0x397e <strtod+0x12a>
    3932:	91 2f       	mov	r25, r17
    3934:	92 60       	ori	r25, 0x02	; 2
    3936:	b9 2e       	mov	r11, r25
    3938:	81 2f       	mov	r24, r17
    393a:	88 70       	andi	r24, 0x08	; 8
    393c:	12 ff       	sbrs	r17, 2
    393e:	04 c0       	rjmp	.+8      	; 0x3948 <strtod+0xf4>
    3940:	81 11       	cpse	r24, r1
    3942:	24 c0       	rjmp	.+72     	; 0x398c <strtod+0x138>
    3944:	21 96       	adiw	r28, 0x01	; 1
    3946:	22 c0       	rjmp	.+68     	; 0x398c <strtod+0x138>
    3948:	81 11       	cpse	r24, r1
    394a:	21 97       	sbiw	r28, 0x01	; 1
    394c:	a5 e0       	ldi	r26, 0x05	; 5
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__muluhisi3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	88 0f       	add	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	aa 1f       	adc	r26, r26
    395e:	bb 1f       	adc	r27, r27
    3960:	9c 01       	movw	r18, r24
    3962:	ad 01       	movw	r20, r26
    3964:	2a 0d       	add	r18, r10
    3966:	31 1d       	adc	r19, r1
    3968:	41 1d       	adc	r20, r1
    396a:	51 1d       	adc	r21, r1
    396c:	28 39       	cpi	r18, 0x98	; 152
    396e:	89 e9       	ldi	r24, 0x99	; 153
    3970:	38 07       	cpc	r19, r24
    3972:	48 07       	cpc	r20, r24
    3974:	89 e1       	ldi	r24, 0x19	; 25
    3976:	58 07       	cpc	r21, r24
    3978:	48 f0       	brcs	.+18     	; 0x398c <strtod+0x138>
    397a:	16 60       	ori	r17, 0x06	; 6
    397c:	06 c0       	rjmp	.+12     	; 0x398a <strtod+0x136>
    397e:	9e ef       	ldi	r25, 0xFE	; 254
    3980:	a9 12       	cpse	r10, r25
    3982:	0a c0       	rjmp	.+20     	; 0x3998 <strtod+0x144>
    3984:	13 fd       	sbrc	r17, 3
    3986:	40 c0       	rjmp	.+128    	; 0x3a08 <strtod+0x1b4>
    3988:	18 60       	ori	r17, 0x08	; 8
    398a:	b1 2e       	mov	r11, r17
    398c:	8f ef       	ldi	r24, 0xFF	; 255
    398e:	e8 1a       	sub	r14, r24
    3990:	f8 0a       	sbc	r15, r24
    3992:	00 81       	ld	r16, Z
    3994:	1b 2d       	mov	r17, r11
    3996:	c6 cf       	rjmp	.-116    	; 0x3924 <strtod+0xd0>
    3998:	80 2f       	mov	r24, r16
    399a:	8f 7d       	andi	r24, 0xDF	; 223
    399c:	85 34       	cpi	r24, 0x45	; 69
    399e:	a1 f5       	brne	.+104    	; 0x3a08 <strtod+0x1b4>
    39a0:	80 81       	ld	r24, Z
    39a2:	8d 32       	cpi	r24, 0x2D	; 45
    39a4:	11 f4       	brne	.+4      	; 0x39aa <strtod+0x156>
    39a6:	10 61       	ori	r17, 0x10	; 16
    39a8:	06 c0       	rjmp	.+12     	; 0x39b6 <strtod+0x162>
    39aa:	8b 32       	cpi	r24, 0x2B	; 43
    39ac:	21 f0       	breq	.+8      	; 0x39b6 <strtod+0x162>
    39ae:	31 96       	adiw	r30, 0x01	; 1
    39b0:	61 e0       	ldi	r22, 0x01	; 1
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	04 c0       	rjmp	.+8      	; 0x39be <strtod+0x16a>
    39b6:	81 81       	ldd	r24, Z+1	; 0x01
    39b8:	32 96       	adiw	r30, 0x02	; 2
    39ba:	62 e0       	ldi	r22, 0x02	; 2
    39bc:	70 e0       	ldi	r23, 0x00	; 0
    39be:	80 53       	subi	r24, 0x30	; 48
    39c0:	8a 30       	cpi	r24, 0x0A	; 10
    39c2:	18 f0       	brcs	.+6      	; 0x39ca <strtod+0x176>
    39c4:	e6 1b       	sub	r30, r22
    39c6:	f7 0b       	sbc	r31, r23
    39c8:	1f c0       	rjmp	.+62     	; 0x3a08 <strtod+0x1b4>
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	60 38       	cpi	r22, 0x80	; 128
    39d0:	9c e0       	ldi	r25, 0x0C	; 12
    39d2:	79 07       	cpc	r23, r25
    39d4:	5c f4       	brge	.+22     	; 0x39ec <strtod+0x198>
    39d6:	db 01       	movw	r26, r22
    39d8:	aa 0f       	add	r26, r26
    39da:	bb 1f       	adc	r27, r27
    39dc:	aa 0f       	add	r26, r26
    39de:	bb 1f       	adc	r27, r27
    39e0:	6a 0f       	add	r22, r26
    39e2:	7b 1f       	adc	r23, r27
    39e4:	66 0f       	add	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	68 0f       	add	r22, r24
    39ea:	71 1d       	adc	r23, r1
    39ec:	31 96       	adiw	r30, 0x01	; 1
    39ee:	df 01       	movw	r26, r30
    39f0:	11 97       	sbiw	r26, 0x01	; 1
    39f2:	8c 91       	ld	r24, X
    39f4:	80 53       	subi	r24, 0x30	; 48
    39f6:	8a 30       	cpi	r24, 0x0A	; 10
    39f8:	50 f3       	brcs	.-44     	; 0x39ce <strtod+0x17a>
    39fa:	14 ff       	sbrs	r17, 4
    39fc:	03 c0       	rjmp	.+6      	; 0x3a04 <strtod+0x1b0>
    39fe:	71 95       	neg	r23
    3a00:	61 95       	neg	r22
    3a02:	71 09       	sbc	r23, r1
    3a04:	c6 0f       	add	r28, r22
    3a06:	d7 1f       	adc	r29, r23
    3a08:	11 ff       	sbrs	r17, 1
    3a0a:	08 c0       	rjmp	.+16     	; 0x3a1c <strtod+0x1c8>
    3a0c:	c1 14       	cp	r12, r1
    3a0e:	d1 04       	cpc	r13, r1
    3a10:	29 f0       	breq	.+10     	; 0x3a1c <strtod+0x1c8>
    3a12:	cf 01       	movw	r24, r30
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f6 01       	movw	r30, r12
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	80 83       	st	Z, r24
    3a1c:	ca 01       	movw	r24, r20
    3a1e:	b9 01       	movw	r22, r18
    3a20:	0e 94 e7 14 	call	0x29ce	; 0x29ce <__floatunsisf>
    3a24:	21 2f       	mov	r18, r17
    3a26:	23 70       	andi	r18, 0x03	; 3
    3a28:	23 30       	cpi	r18, 0x03	; 3
    3a2a:	19 f0       	breq	.+6      	; 0x3a32 <strtod+0x1de>
    3a2c:	4b 01       	movw	r8, r22
    3a2e:	5c 01       	movw	r10, r24
    3a30:	06 c0       	rjmp	.+12     	; 0x3a3e <strtod+0x1ea>
    3a32:	4b 01       	movw	r8, r22
    3a34:	5c 01       	movw	r10, r24
    3a36:	b7 fa       	bst	r11, 7
    3a38:	b0 94       	com	r11
    3a3a:	b7 f8       	bld	r11, 7
    3a3c:	b0 94       	com	r11
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	a9 01       	movw	r20, r18
    3a44:	c5 01       	movw	r24, r10
    3a46:	b4 01       	movw	r22, r8
    3a48:	0e 94 3a 14 	call	0x2874	; 0x2874 <__cmpsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	09 f4       	brne	.+2      	; 0x3a52 <strtod+0x1fe>
    3a50:	3e c0       	rjmp	.+124    	; 0x3ace <strtod+0x27a>
    3a52:	d7 ff       	sbrs	r29, 7
    3a54:	06 c0       	rjmp	.+12     	; 0x3a62 <strtod+0x20e>
    3a56:	d1 95       	neg	r29
    3a58:	c1 95       	neg	r28
    3a5a:	d1 09       	sbc	r29, r1
    3a5c:	03 e2       	ldi	r16, 0x23	; 35
    3a5e:	11 e0       	ldi	r17, 0x01	; 1
    3a60:	02 c0       	rjmp	.+4      	; 0x3a66 <strtod+0x212>
    3a62:	0b e3       	ldi	r16, 0x3B	; 59
    3a64:	11 e0       	ldi	r17, 0x01	; 1
    3a66:	68 01       	movw	r12, r16
    3a68:	f8 e1       	ldi	r31, 0x18	; 24
    3a6a:	cf 1a       	sub	r12, r31
    3a6c:	d1 08       	sbc	r13, r1
    3a6e:	90 e2       	ldi	r25, 0x20	; 32
    3a70:	e9 2e       	mov	r14, r25
    3a72:	f1 2c       	mov	r15, r1
    3a74:	ce 15       	cp	r28, r14
    3a76:	df 05       	cpc	r29, r15
    3a78:	74 f0       	brlt	.+28     	; 0x3a96 <strtod+0x242>
    3a7a:	f8 01       	movw	r30, r16
    3a7c:	25 91       	lpm	r18, Z+
    3a7e:	35 91       	lpm	r19, Z+
    3a80:	45 91       	lpm	r20, Z+
    3a82:	54 91       	lpm	r21, Z
    3a84:	c5 01       	movw	r24, r10
    3a86:	b4 01       	movw	r22, r8
    3a88:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    3a8c:	4b 01       	movw	r8, r22
    3a8e:	5c 01       	movw	r10, r24
    3a90:	ce 19       	sub	r28, r14
    3a92:	df 09       	sbc	r29, r15
    3a94:	ef cf       	rjmp	.-34     	; 0x3a74 <strtod+0x220>
    3a96:	04 50       	subi	r16, 0x04	; 4
    3a98:	11 09       	sbc	r17, r1
    3a9a:	f5 94       	asr	r15
    3a9c:	e7 94       	ror	r14
    3a9e:	0c 15       	cp	r16, r12
    3aa0:	1d 05       	cpc	r17, r13
    3aa2:	41 f7       	brne	.-48     	; 0x3a74 <strtod+0x220>
    3aa4:	8a 2d       	mov	r24, r10
    3aa6:	88 0f       	add	r24, r24
    3aa8:	8b 2d       	mov	r24, r11
    3aaa:	88 1f       	adc	r24, r24
    3aac:	8f 3f       	cpi	r24, 0xFF	; 255
    3aae:	49 f0       	breq	.+18     	; 0x3ac2 <strtod+0x26e>
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	a9 01       	movw	r20, r18
    3ab6:	c5 01       	movw	r24, r10
    3ab8:	b4 01       	movw	r22, r8
    3aba:	0e 94 3a 14 	call	0x2874	; 0x2874 <__cmpsf2>
    3abe:	81 11       	cpse	r24, r1
    3ac0:	06 c0       	rjmp	.+12     	; 0x3ace <strtod+0x27a>
    3ac2:	82 e2       	ldi	r24, 0x22	; 34
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <errno+0x1>
    3aca:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <errno>
    3ace:	c5 01       	movw	r24, r10
    3ad0:	b4 01       	movw	r22, r8
    3ad2:	09 c0       	rjmp	.+18     	; 0x3ae6 <strtod+0x292>
    3ad4:	60 e0       	ldi	r22, 0x00	; 0
    3ad6:	70 e0       	ldi	r23, 0x00	; 0
    3ad8:	80 e8       	ldi	r24, 0x80	; 128
    3ada:	9f ef       	ldi	r25, 0xFF	; 255
    3adc:	04 c0       	rjmp	.+8      	; 0x3ae6 <strtod+0x292>
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	70 e0       	ldi	r23, 0x00	; 0
    3ae2:	80 ec       	ldi	r24, 0xC0	; 192
    3ae4:	9f e7       	ldi	r25, 0x7F	; 127
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
    3aea:	ec e0       	ldi	r30, 0x0C	; 12
    3aec:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0xc>

00003af0 <__ctype_isfalse>:
    3af0:	99 27       	eor	r25, r25
    3af2:	88 27       	eor	r24, r24

00003af4 <__ctype_istrue>:
    3af4:	08 95       	ret

00003af6 <isspace>:
    3af6:	91 11       	cpse	r25, r1
    3af8:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__ctype_isfalse>
    3afc:	80 32       	cpi	r24, 0x20	; 32
    3afe:	19 f0       	breq	.+6      	; 0x3b06 <isspace+0x10>
    3b00:	89 50       	subi	r24, 0x09	; 9
    3b02:	85 50       	subi	r24, 0x05	; 5
    3b04:	c8 f7       	brcc	.-14     	; 0x3af8 <isspace+0x2>
    3b06:	08 95       	ret

00003b08 <strncasecmp_P>:
    3b08:	fb 01       	movw	r30, r22
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	41 50       	subi	r20, 0x01	; 1
    3b0e:	50 40       	sbci	r21, 0x00	; 0
    3b10:	88 f0       	brcs	.+34     	; 0x3b34 <strncasecmp_P+0x2c>
    3b12:	8d 91       	ld	r24, X+
    3b14:	81 34       	cpi	r24, 0x41	; 65
    3b16:	1c f0       	brlt	.+6      	; 0x3b1e <strncasecmp_P+0x16>
    3b18:	8b 35       	cpi	r24, 0x5B	; 91
    3b1a:	0c f4       	brge	.+2      	; 0x3b1e <strncasecmp_P+0x16>
    3b1c:	80 5e       	subi	r24, 0xE0	; 224
    3b1e:	65 91       	lpm	r22, Z+
    3b20:	61 34       	cpi	r22, 0x41	; 65
    3b22:	1c f0       	brlt	.+6      	; 0x3b2a <strncasecmp_P+0x22>
    3b24:	6b 35       	cpi	r22, 0x5B	; 91
    3b26:	0c f4       	brge	.+2      	; 0x3b2a <strncasecmp_P+0x22>
    3b28:	60 5e       	subi	r22, 0xE0	; 224
    3b2a:	86 1b       	sub	r24, r22
    3b2c:	61 11       	cpse	r22, r1
    3b2e:	71 f3       	breq	.-36     	; 0x3b0c <strncasecmp_P+0x4>
    3b30:	99 0b       	sbc	r25, r25
    3b32:	08 95       	ret
    3b34:	88 1b       	sub	r24, r24
    3b36:	fc cf       	rjmp	.-8      	; 0x3b30 <strncasecmp_P+0x28>

00003b38 <strnlen_P>:
    3b38:	fc 01       	movw	r30, r24
    3b3a:	05 90       	lpm	r0, Z+
    3b3c:	61 50       	subi	r22, 0x01	; 1
    3b3e:	70 40       	sbci	r23, 0x00	; 0
    3b40:	01 10       	cpse	r0, r1
    3b42:	d8 f7       	brcc	.-10     	; 0x3b3a <strnlen_P+0x2>
    3b44:	80 95       	com	r24
    3b46:	90 95       	com	r25
    3b48:	8e 0f       	add	r24, r30
    3b4a:	9f 1f       	adc	r25, r31
    3b4c:	08 95       	ret

00003b4e <strnlen>:
    3b4e:	fc 01       	movw	r30, r24
    3b50:	61 50       	subi	r22, 0x01	; 1
    3b52:	70 40       	sbci	r23, 0x00	; 0
    3b54:	01 90       	ld	r0, Z+
    3b56:	01 10       	cpse	r0, r1
    3b58:	d8 f7       	brcc	.-10     	; 0x3b50 <strnlen+0x2>
    3b5a:	80 95       	com	r24
    3b5c:	90 95       	com	r25
    3b5e:	8e 0f       	add	r24, r30
    3b60:	9f 1f       	adc	r25, r31
    3b62:	08 95       	ret

00003b64 <fputc>:
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	fb 01       	movw	r30, r22
    3b6e:	23 81       	ldd	r18, Z+3	; 0x03
    3b70:	21 fd       	sbrc	r18, 1
    3b72:	03 c0       	rjmp	.+6      	; 0x3b7a <fputc+0x16>
    3b74:	8f ef       	ldi	r24, 0xFF	; 255
    3b76:	9f ef       	ldi	r25, 0xFF	; 255
    3b78:	2c c0       	rjmp	.+88     	; 0x3bd2 <fputc+0x6e>
    3b7a:	22 ff       	sbrs	r18, 2
    3b7c:	16 c0       	rjmp	.+44     	; 0x3baa <fputc+0x46>
    3b7e:	46 81       	ldd	r20, Z+6	; 0x06
    3b80:	57 81       	ldd	r21, Z+7	; 0x07
    3b82:	24 81       	ldd	r18, Z+4	; 0x04
    3b84:	35 81       	ldd	r19, Z+5	; 0x05
    3b86:	42 17       	cp	r20, r18
    3b88:	53 07       	cpc	r21, r19
    3b8a:	44 f4       	brge	.+16     	; 0x3b9c <fputc+0x38>
    3b8c:	a0 81       	ld	r26, Z
    3b8e:	b1 81       	ldd	r27, Z+1	; 0x01
    3b90:	9d 01       	movw	r18, r26
    3b92:	2f 5f       	subi	r18, 0xFF	; 255
    3b94:	3f 4f       	sbci	r19, 0xFF	; 255
    3b96:	31 83       	std	Z+1, r19	; 0x01
    3b98:	20 83       	st	Z, r18
    3b9a:	8c 93       	st	X, r24
    3b9c:	26 81       	ldd	r18, Z+6	; 0x06
    3b9e:	37 81       	ldd	r19, Z+7	; 0x07
    3ba0:	2f 5f       	subi	r18, 0xFF	; 255
    3ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba4:	37 83       	std	Z+7, r19	; 0x07
    3ba6:	26 83       	std	Z+6, r18	; 0x06
    3ba8:	14 c0       	rjmp	.+40     	; 0x3bd2 <fputc+0x6e>
    3baa:	8b 01       	movw	r16, r22
    3bac:	ec 01       	movw	r28, r24
    3bae:	fb 01       	movw	r30, r22
    3bb0:	00 84       	ldd	r0, Z+8	; 0x08
    3bb2:	f1 85       	ldd	r31, Z+9	; 0x09
    3bb4:	e0 2d       	mov	r30, r0
    3bb6:	09 95       	icall
    3bb8:	89 2b       	or	r24, r25
    3bba:	e1 f6       	brne	.-72     	; 0x3b74 <fputc+0x10>
    3bbc:	d8 01       	movw	r26, r16
    3bbe:	16 96       	adiw	r26, 0x06	; 6
    3bc0:	8d 91       	ld	r24, X+
    3bc2:	9c 91       	ld	r25, X
    3bc4:	17 97       	sbiw	r26, 0x07	; 7
    3bc6:	01 96       	adiw	r24, 0x01	; 1
    3bc8:	17 96       	adiw	r26, 0x07	; 7
    3bca:	9c 93       	st	X, r25
    3bcc:	8e 93       	st	-X, r24
    3bce:	16 97       	sbiw	r26, 0x06	; 6
    3bd0:	ce 01       	movw	r24, r28
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	1f 91       	pop	r17
    3bd8:	0f 91       	pop	r16
    3bda:	08 95       	ret

00003bdc <__ultoa_invert>:
    3bdc:	fa 01       	movw	r30, r20
    3bde:	aa 27       	eor	r26, r26
    3be0:	28 30       	cpi	r18, 0x08	; 8
    3be2:	51 f1       	breq	.+84     	; 0x3c38 <__ultoa_invert+0x5c>
    3be4:	20 31       	cpi	r18, 0x10	; 16
    3be6:	81 f1       	breq	.+96     	; 0x3c48 <__ultoa_invert+0x6c>
    3be8:	e8 94       	clt
    3bea:	6f 93       	push	r22
    3bec:	6e 7f       	andi	r22, 0xFE	; 254
    3bee:	6e 5f       	subi	r22, 0xFE	; 254
    3bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    3bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf6:	af 4f       	sbci	r26, 0xFF	; 255
    3bf8:	b1 e0       	ldi	r27, 0x01	; 1
    3bfa:	3e d0       	rcall	.+124    	; 0x3c78 <__ultoa_invert+0x9c>
    3bfc:	b4 e0       	ldi	r27, 0x04	; 4
    3bfe:	3c d0       	rcall	.+120    	; 0x3c78 <__ultoa_invert+0x9c>
    3c00:	67 0f       	add	r22, r23
    3c02:	78 1f       	adc	r23, r24
    3c04:	89 1f       	adc	r24, r25
    3c06:	9a 1f       	adc	r25, r26
    3c08:	a1 1d       	adc	r26, r1
    3c0a:	68 0f       	add	r22, r24
    3c0c:	79 1f       	adc	r23, r25
    3c0e:	8a 1f       	adc	r24, r26
    3c10:	91 1d       	adc	r25, r1
    3c12:	a1 1d       	adc	r26, r1
    3c14:	6a 0f       	add	r22, r26
    3c16:	71 1d       	adc	r23, r1
    3c18:	81 1d       	adc	r24, r1
    3c1a:	91 1d       	adc	r25, r1
    3c1c:	a1 1d       	adc	r26, r1
    3c1e:	20 d0       	rcall	.+64     	; 0x3c60 <__ultoa_invert+0x84>
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <__ultoa_invert+0x48>
    3c22:	68 94       	set
    3c24:	3f 91       	pop	r19
    3c26:	2a e0       	ldi	r18, 0x0A	; 10
    3c28:	26 9f       	mul	r18, r22
    3c2a:	11 24       	eor	r1, r1
    3c2c:	30 19       	sub	r19, r0
    3c2e:	30 5d       	subi	r19, 0xD0	; 208
    3c30:	31 93       	st	Z+, r19
    3c32:	de f6       	brtc	.-74     	; 0x3bea <__ultoa_invert+0xe>
    3c34:	cf 01       	movw	r24, r30
    3c36:	08 95       	ret
    3c38:	46 2f       	mov	r20, r22
    3c3a:	47 70       	andi	r20, 0x07	; 7
    3c3c:	40 5d       	subi	r20, 0xD0	; 208
    3c3e:	41 93       	st	Z+, r20
    3c40:	b3 e0       	ldi	r27, 0x03	; 3
    3c42:	0f d0       	rcall	.+30     	; 0x3c62 <__ultoa_invert+0x86>
    3c44:	c9 f7       	brne	.-14     	; 0x3c38 <__ultoa_invert+0x5c>
    3c46:	f6 cf       	rjmp	.-20     	; 0x3c34 <__ultoa_invert+0x58>
    3c48:	46 2f       	mov	r20, r22
    3c4a:	4f 70       	andi	r20, 0x0F	; 15
    3c4c:	40 5d       	subi	r20, 0xD0	; 208
    3c4e:	4a 33       	cpi	r20, 0x3A	; 58
    3c50:	18 f0       	brcs	.+6      	; 0x3c58 <__ultoa_invert+0x7c>
    3c52:	49 5d       	subi	r20, 0xD9	; 217
    3c54:	31 fd       	sbrc	r19, 1
    3c56:	40 52       	subi	r20, 0x20	; 32
    3c58:	41 93       	st	Z+, r20
    3c5a:	02 d0       	rcall	.+4      	; 0x3c60 <__ultoa_invert+0x84>
    3c5c:	a9 f7       	brne	.-22     	; 0x3c48 <__ultoa_invert+0x6c>
    3c5e:	ea cf       	rjmp	.-44     	; 0x3c34 <__ultoa_invert+0x58>
    3c60:	b4 e0       	ldi	r27, 0x04	; 4
    3c62:	a6 95       	lsr	r26
    3c64:	97 95       	ror	r25
    3c66:	87 95       	ror	r24
    3c68:	77 95       	ror	r23
    3c6a:	67 95       	ror	r22
    3c6c:	ba 95       	dec	r27
    3c6e:	c9 f7       	brne	.-14     	; 0x3c62 <__ultoa_invert+0x86>
    3c70:	00 97       	sbiw	r24, 0x00	; 0
    3c72:	61 05       	cpc	r22, r1
    3c74:	71 05       	cpc	r23, r1
    3c76:	08 95       	ret
    3c78:	9b 01       	movw	r18, r22
    3c7a:	ac 01       	movw	r20, r24
    3c7c:	0a 2e       	mov	r0, r26
    3c7e:	06 94       	lsr	r0
    3c80:	57 95       	ror	r21
    3c82:	47 95       	ror	r20
    3c84:	37 95       	ror	r19
    3c86:	27 95       	ror	r18
    3c88:	ba 95       	dec	r27
    3c8a:	c9 f7       	brne	.-14     	; 0x3c7e <__ultoa_invert+0xa2>
    3c8c:	62 0f       	add	r22, r18
    3c8e:	73 1f       	adc	r23, r19
    3c90:	84 1f       	adc	r24, r20
    3c92:	95 1f       	adc	r25, r21
    3c94:	a0 1d       	adc	r26, r0
    3c96:	08 95       	ret

00003c98 <__muluhisi3>:
    3c98:	0e 94 57 1e 	call	0x3cae	; 0x3cae <__umulhisi3>
    3c9c:	a5 9f       	mul	r26, r21
    3c9e:	90 0d       	add	r25, r0
    3ca0:	b4 9f       	mul	r27, r20
    3ca2:	90 0d       	add	r25, r0
    3ca4:	a4 9f       	mul	r26, r20
    3ca6:	80 0d       	add	r24, r0
    3ca8:	91 1d       	adc	r25, r1
    3caa:	11 24       	eor	r1, r1
    3cac:	08 95       	ret

00003cae <__umulhisi3>:
    3cae:	a2 9f       	mul	r26, r18
    3cb0:	b0 01       	movw	r22, r0
    3cb2:	b3 9f       	mul	r27, r19
    3cb4:	c0 01       	movw	r24, r0
    3cb6:	a3 9f       	mul	r26, r19
    3cb8:	70 0d       	add	r23, r0
    3cba:	81 1d       	adc	r24, r1
    3cbc:	11 24       	eor	r1, r1
    3cbe:	91 1d       	adc	r25, r1
    3cc0:	b2 9f       	mul	r27, r18
    3cc2:	70 0d       	add	r23, r0
    3cc4:	81 1d       	adc	r24, r1
    3cc6:	11 24       	eor	r1, r1
    3cc8:	91 1d       	adc	r25, r1
    3cca:	08 95       	ret

00003ccc <_exit>:
    3ccc:	f8 94       	cli

00003cce <__stop_program>:
    3cce:	ff cf       	rjmp	.-2      	; 0x3cce <__stop_program>
