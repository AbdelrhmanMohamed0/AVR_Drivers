
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b82  00000c16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  00000c18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001949  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a96  00000000  00000000  00002745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fde  00000000  00000000  000031db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f2  00000000  00000000  00004540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001938  00000000  00000000  00004e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000676a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 04 	call	0x90a	; 0x90a <main>
  8a:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	return Local_u8ErrorState;
}
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8f 77       	andi	r24, 0x7F	; 127
  9c:	87 b9       	out	0x07, r24	; 7
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	86 b9       	out	0x06, r24	; 6
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	86 b9       	out	0x06, r24	; 6
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	86 b9       	out	0x06, r24	; 6
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	86 b9       	out	0x06, r24	; 6
  bc:	08 95       	ret

000000be <ADC_u8GetResultSync>:
  be:	61 15       	cp	r22, r1
  c0:	71 05       	cpc	r23, r1
  c2:	b9 f1       	breq	.+110    	; 0x132 <ADC_u8GetResultSync+0x74>
  c4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	95 30       	cpi	r25, 0x05	; 5
  ca:	a9 f5       	brne	.+106    	; 0x136 <ADC_u8GetResultSync+0x78>
  cc:	96 e0       	ldi	r25, 0x06	; 6
  ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	97 b1       	in	r25, 0x07	; 7
  d4:	90 7e       	andi	r25, 0xE0	; 224
  d6:	97 b9       	out	0x07, r25	; 7
  d8:	97 b1       	in	r25, 0x07	; 7
  da:	89 2b       	or	r24, r25
  dc:	87 b9       	out	0x07, r24	; 7
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	86 b9       	out	0x06, r24	; 6
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	dc 01       	movw	r26, r24
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <ADC_u8GetResultSync+0x34>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	a1 1d       	adc	r26, r1
  f0:	b1 1d       	adc	r27, r1
  f2:	34 99       	sbic	0x06, 4	; 6
  f4:	06 c0       	rjmp	.+12     	; 0x102 <ADC_u8GetResultSync+0x44>
  f6:	80 35       	cpi	r24, 0x50	; 80
  f8:	23 ec       	ldi	r18, 0xC3	; 195
  fa:	92 07       	cpc	r25, r18
  fc:	a1 05       	cpc	r26, r1
  fe:	b1 05       	cpc	r27, r1
 100:	a8 f3       	brcs	.-22     	; 0xec <ADC_u8GetResultSync+0x2e>
 102:	80 35       	cpi	r24, 0x50	; 80
 104:	93 4c       	sbci	r25, 0xC3	; 195
 106:	a1 05       	cpc	r26, r1
 108:	b1 05       	cpc	r27, r1
 10a:	71 f0       	breq	.+28     	; 0x128 <ADC_u8GetResultSync+0x6a>
 10c:	86 b1       	in	r24, 0x06	; 6
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	86 b9       	out	0x06, r24	; 6
 112:	24 b1       	in	r18, 0x04	; 4
 114:	85 b1       	in	r24, 0x05	; 5
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	98 2f       	mov	r25, r24
 11a:	88 27       	eor	r24, r24
 11c:	82 2b       	or	r24, r18
 11e:	fb 01       	movw	r30, r22
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	01 c0       	rjmp	.+2      	; 0x12a <ADC_u8GetResultSync+0x6c>
 128:	87 e0       	ldi	r24, 0x07	; 7
 12a:	95 e0       	ldi	r25, 0x05	; 5
 12c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	08 95       	ret
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	08 95       	ret
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	08 95       	ret

0000013a <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
 15c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ADC_u8ISRState>
 160:	81 11       	cpse	r24, r1
 162:	18 c0       	rjmp	.+48     	; 0x194 <__vector_16+0x5a>
	{
		/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
		*ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
 164:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <ADC_pu16AsynchConversionResult>
 168:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <ADC_pu16AsynchConversionResult+0x1>
 16c:	24 b1       	in	r18, 0x04	; 4
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	98 2f       	mov	r25, r24
 174:	88 27       	eor	r24, r24
 176:	82 2b       	or	r24, r18
 178:	91 83       	std	Z+1, r25	; 0x01
 17a:	80 83       	st	Z, r24
#error "Wrong ADC_ADJUSTMENT config"

#endif

		/*ADC is IDLE*/
		ADC_u8State = ES_ADC_IDLE;
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		/*Call Notification Function*/
		ADC_pvNotificationFunc();
 182:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <ADC_pvNotificationFunc>
 186:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <ADC_pvNotificationFunc+0x1>
 18a:	09 95       	icall

		/*Disable the Conversion Complete Interrupt*/
		CLR_BIT(ADSAR, ADSAR_ADIE);
 18c:	86 b1       	in	r24, 0x06	; 6
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	86 b9       	out	0x06, r24	; 6
 192:	33 c0       	rjmp	.+102    	; 0x1fa <__vector_16+0xc0>
	}
	else
	{
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
		*ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
 194:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <ADC_pu16AsynchConversionResult>
 198:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <ADC_pu16AsynchConversionResult+0x1>
 19c:	24 b1       	in	r18, 0x04	; 4
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	98 2f       	mov	r25, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	82 2b       	or	r24, r18
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	80 83       	st	Z, r24
#error "Wrong ADC_ADJUSTMENT config"

#endif

		/*Increment Data index of the chain*/
		ADC_u8Index++;
 1ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>

		if (ADC_u8Index == ADC_u8ChainSize)
 1b6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ADC_u8ChainSize>
 1ba:	89 13       	cpse	r24, r25
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <__vector_16+0x9c>
		{
			/*ADC is IDLE*/
			ADC_u8State = ES_ADC_IDLE;
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

			/*Call Notification Function*/
			ADC_pvNotificationFunc();
 1c4:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <ADC_pvNotificationFunc>
 1c8:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <ADC_pvNotificationFunc+0x1>
 1cc:	09 95       	icall

			/*Disable the Conversion Complete Interrupt*/
			CLR_BIT(ADSAR, ADSAR_ADIE);
 1ce:	86 b1       	in	r24, 0x06	; 6
 1d0:	87 7f       	andi	r24, 0xF7	; 247
 1d2:	86 b9       	out	0x06, r24	; 6
 1d4:	12 c0       	rjmp	.+36     	; 0x1fa <__vector_16+0xc0>
		}
		else
		{
			/*Set required channel*/
			ADMUX &= ADC_CH_MASK;
 1d6:	87 b1       	in	r24, 0x07	; 7
 1d8:	80 7e       	andi	r24, 0xE0	; 224
 1da:	87 b9       	out	0x07, r24	; 7
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
 1dc:	97 b1       	in	r25, 0x07	; 7
 1de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1e2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ADC_pu8ChainChannel>
 1e6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ADC_pu8ChainChannel+0x1>
 1ea:	e8 0f       	add	r30, r24
 1ec:	f1 1d       	adc	r31, r1
 1ee:	80 81       	ld	r24, Z
 1f0:	89 2b       	or	r24, r25
 1f2:	87 b9       	out	0x07, r24	; 7

			/*Start Conversion*/
			SET_BIT(ADSAR, ADSAR_ADSC);
 1f4:	86 b1       	in	r24, 0x06	; 6
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	86 b9       	out	0x06, r24	; 6
		}
	}
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <DIO_Enu_Init>:
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
 21c:	80 ef       	ldi	r24, 0xF0	; 240
 21e:	8a bb       	out	0x1a, r24	; 26
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	87 bb       	out	0x17, r24	; 23
 224:	84 bb       	out	0x14, r24	; 20
 226:	81 bb       	out	0x11, r24	; 17
 228:	1b ba       	out	0x1b, r1	; 27
 22a:	18 ba       	out	0x18, r1	; 24
 22c:	15 ba       	out	0x15, r1	; 21
 22e:	12 ba       	out	0x12, r1	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	08 95       	ret

00000234 <DIO_Enu_SetPinDirection>:
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	08 f0       	brcs	.+2      	; 0x23a <DIO_Enu_SetPinDirection+0x6>
 238:	67 c0       	rjmp	.+206    	; 0x308 <DIO_Enu_SetPinDirection+0xd4>
 23a:	68 30       	cpi	r22, 0x08	; 8
 23c:	08 f0       	brcs	.+2      	; 0x240 <DIO_Enu_SetPinDirection+0xc>
 23e:	66 c0       	rjmp	.+204    	; 0x30c <DIO_Enu_SetPinDirection+0xd8>
 240:	42 30       	cpi	r20, 0x02	; 2
 242:	08 f0       	brcs	.+2      	; 0x246 <DIO_Enu_SetPinDirection+0x12>
 244:	65 c0       	rjmp	.+202    	; 0x310 <DIO_Enu_SetPinDirection+0xdc>
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	e9 f0       	breq	.+58     	; 0x284 <DIO_Enu_SetPinDirection+0x50>
 24a:	30 f0       	brcs	.+12     	; 0x258 <DIO_Enu_SetPinDirection+0x24>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	81 f1       	breq	.+96     	; 0x2b0 <DIO_Enu_SetPinDirection+0x7c>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	09 f4       	brne	.+2      	; 0x256 <DIO_Enu_SetPinDirection+0x22>
 254:	43 c0       	rjmp	.+134    	; 0x2dc <DIO_Enu_SetPinDirection+0xa8>
 256:	5e c0       	rjmp	.+188    	; 0x314 <DIO_Enu_SetPinDirection+0xe0>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	06 2e       	mov	r0, r22
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_Enu_SetPinDirection+0x30>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_Enu_SetPinDirection+0x2c>
 268:	80 95       	com	r24
 26a:	2a b3       	in	r18, 0x1a	; 26
 26c:	28 23       	and	r18, r24
 26e:	84 2f       	mov	r24, r20
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_Enu_SetPinDirection+0x44>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_Enu_SetPinDirection+0x40>
 27c:	82 2b       	or	r24, r18
 27e:	8a bb       	out	0x1a, r24	; 26
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	06 2e       	mov	r0, r22
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_Enu_SetPinDirection+0x5c>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_Enu_SetPinDirection+0x58>
 294:	20 95       	com	r18
 296:	87 b3       	in	r24, 0x17	; 23
 298:	28 23       	and	r18, r24
 29a:	84 2f       	mov	r24, r20
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_Enu_SetPinDirection+0x70>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_Enu_SetPinDirection+0x6c>
 2a8:	82 2b       	or	r24, r18
 2aa:	87 bb       	out	0x17, r24	; 23
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	06 2e       	mov	r0, r22
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_Enu_SetPinDirection+0x88>
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_Enu_SetPinDirection+0x84>
 2c0:	20 95       	com	r18
 2c2:	84 b3       	in	r24, 0x14	; 20
 2c4:	28 23       	and	r18, r24
 2c6:	84 2f       	mov	r24, r20
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_Enu_SetPinDirection+0x9c>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_Enu_SetPinDirection+0x98>
 2d4:	82 2b       	or	r24, r18
 2d6:	84 bb       	out	0x14, r24	; 20
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	08 95       	ret
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	06 2e       	mov	r0, r22
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_Enu_SetPinDirection+0xb4>
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_Enu_SetPinDirection+0xb0>
 2ec:	20 95       	com	r18
 2ee:	81 b3       	in	r24, 0x11	; 17
 2f0:	28 23       	and	r18, r24
 2f2:	84 2f       	mov	r24, r20
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_Enu_SetPinDirection+0xc8>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_Enu_SetPinDirection+0xc4>
 300:	82 2b       	or	r24, r18
 302:	81 bb       	out	0x11, r24	; 17
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	08 95       	ret
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	08 95       	ret
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	08 95       	ret
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	08 95       	ret
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	08 95       	ret

00000318 <DIO_Enu_SetPinValue>:
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	08 f0       	brcs	.+2      	; 0x31e <DIO_Enu_SetPinValue+0x6>
 31c:	67 c0       	rjmp	.+206    	; 0x3ec <DIO_Enu_SetPinValue+0xd4>
 31e:	68 30       	cpi	r22, 0x08	; 8
 320:	08 f0       	brcs	.+2      	; 0x324 <DIO_Enu_SetPinValue+0xc>
 322:	66 c0       	rjmp	.+204    	; 0x3f0 <DIO_Enu_SetPinValue+0xd8>
 324:	42 30       	cpi	r20, 0x02	; 2
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_Enu_SetPinValue+0x12>
 328:	65 c0       	rjmp	.+202    	; 0x3f4 <DIO_Enu_SetPinValue+0xdc>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	e9 f0       	breq	.+58     	; 0x368 <DIO_Enu_SetPinValue+0x50>
 32e:	30 f0       	brcs	.+12     	; 0x33c <DIO_Enu_SetPinValue+0x24>
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	81 f1       	breq	.+96     	; 0x394 <DIO_Enu_SetPinValue+0x7c>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	09 f4       	brne	.+2      	; 0x33a <DIO_Enu_SetPinValue+0x22>
 338:	43 c0       	rjmp	.+134    	; 0x3c0 <DIO_Enu_SetPinValue+0xa8>
 33a:	5e c0       	rjmp	.+188    	; 0x3f8 <DIO_Enu_SetPinValue+0xe0>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	06 2e       	mov	r0, r22
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_Enu_SetPinValue+0x30>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_Enu_SetPinValue+0x2c>
 34c:	80 95       	com	r24
 34e:	2b b3       	in	r18, 0x1b	; 27
 350:	28 23       	and	r18, r24
 352:	84 2f       	mov	r24, r20
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_Enu_SetPinValue+0x44>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_Enu_SetPinValue+0x40>
 360:	82 2b       	or	r24, r18
 362:	8b bb       	out	0x1b, r24	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	08 95       	ret
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	06 2e       	mov	r0, r22
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_Enu_SetPinValue+0x5c>
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_Enu_SetPinValue+0x58>
 378:	20 95       	com	r18
 37a:	88 b3       	in	r24, 0x18	; 24
 37c:	28 23       	and	r18, r24
 37e:	84 2f       	mov	r24, r20
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_Enu_SetPinValue+0x70>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_Enu_SetPinValue+0x6c>
 38c:	82 2b       	or	r24, r18
 38e:	88 bb       	out	0x18, r24	; 24
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	08 95       	ret
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	06 2e       	mov	r0, r22
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_Enu_SetPinValue+0x88>
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_Enu_SetPinValue+0x84>
 3a4:	20 95       	com	r18
 3a6:	85 b3       	in	r24, 0x15	; 21
 3a8:	28 23       	and	r18, r24
 3aa:	84 2f       	mov	r24, r20
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_Enu_SetPinValue+0x9c>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_Enu_SetPinValue+0x98>
 3b8:	82 2b       	or	r24, r18
 3ba:	85 bb       	out	0x15, r24	; 21
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	08 95       	ret
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	06 2e       	mov	r0, r22
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_Enu_SetPinValue+0xb4>
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_Enu_SetPinValue+0xb0>
 3d0:	20 95       	com	r18
 3d2:	82 b3       	in	r24, 0x12	; 18
 3d4:	28 23       	and	r18, r24
 3d6:	84 2f       	mov	r24, r20
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_Enu_SetPinValue+0xc8>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_Enu_SetPinValue+0xc4>
 3e4:	82 2b       	or	r24, r18
 3e6:	82 bb       	out	0x12, r24	; 18
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	08 95       	ret
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	08 95       	ret
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	08 95       	ret
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret

000003fc <DIO_Enu_WriteHighNibbles>:
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
 3fc:	84 30       	cpi	r24, 0x04	; 4
 3fe:	10 f5       	brcc	.+68     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
 400:	62 95       	swap	r22
 402:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PortID)
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	61 f0       	breq	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 408:	28 f0       	brcs	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	79 f0       	breq	.+30     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 40e:	83 30       	cpi	r24, 0x03	; 3
 410:	99 f0       	breq	.+38     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 412:	1a c0       	rjmp	.+52     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
 414:	8b b3       	in	r24, 0x1b	; 27
 416:	8f 70       	andi	r24, 0x0F	; 15
			PORTA |=Copy_u8Value;			
 418:	68 2b       	or	r22, r24
 41a:	6b bb       	out	0x1b, r22	; 27
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 41c:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8PortID)
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
			PORTA |=Copy_u8Value;			
			break ;
 41e:	08 95       	ret
		case DIO_PORTB:
			PORTB &=0x0f;                 
 420:	88 b3       	in	r24, 0x18	; 24
 422:	8f 70       	andi	r24, 0x0F	; 15
			PORTB |=Copy_u8Value;
 424:	68 2b       	or	r22, r24
 426:	68 bb       	out	0x18, r22	; 24
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 428:	81 e0       	ldi	r24, 0x01	; 1
			PORTA |=Copy_u8Value;			
			break ;
		case DIO_PORTB:
			PORTB &=0x0f;                 
			PORTB |=Copy_u8Value;
			break ;
 42a:	08 95       	ret
		case DIO_PORTC :
			PORTC &=0x0f;                 
 42c:	85 b3       	in	r24, 0x15	; 21
 42e:	8f 70       	andi	r24, 0x0F	; 15
			PORTC |=Copy_u8Value;
 430:	68 2b       	or	r22, r24
 432:	65 bb       	out	0x15, r22	; 21
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 434:	81 e0       	ldi	r24, 0x01	; 1
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
			PORTC |=Copy_u8Value;
			break ;
 436:	08 95       	ret
		case DIO_PORTD:
			PORTD &=0x0f;                 
 438:	82 b3       	in	r24, 0x12	; 18
 43a:	8f 70       	andi	r24, 0x0F	; 15
			PORTD |=Copy_u8Value;
 43c:	68 2b       	or	r22, r24
 43e:	62 bb       	out	0x12, r22	; 18
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 440:	81 e0       	ldi	r24, 0x01	; 1
			PORTC |=Copy_u8Value;
			break ;
		case DIO_PORTD:
			PORTD &=0x0f;                 
			PORTD |=Copy_u8Value;
			break ;
 442:	08 95       	ret
        }
        Local_EnuErrorState = ES_OK;
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	08 95       	ret
			PORTD |=Copy_u8Value;
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
 448:	81 e0       	ldi	r24, 0x01	; 1
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

	return Local_EnuErrorState ;

}
 44a:	08 95       	ret

0000044c <LCD_voidSendFallingEdge>:
        LCD_enuSendData(LOC_u8Iterator);
    }
    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	62 e0       	ldi	r22, 0x02	; 2
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_Enu_SetPinValue>
 456:	8f ec       	ldi	r24, 0xCF	; 207
 458:	97 e0       	ldi	r25, 0x07	; 7
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_voidSendFallingEdge+0xe>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_voidSendFallingEdge+0x14>
 460:	00 00       	nop
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_Enu_SetPinValue>
 46c:	8f ec       	ldi	r24, 0xCF	; 207
 46e:	97 e0       	ldi	r25, 0x07	; 7
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <LCD_voidSendFallingEdge+0x24>
 474:	00 c0       	rjmp	.+0      	; 0x476 <LCD_voidSendFallingEdge+0x2a>
 476:	00 00       	nop
 478:	08 95       	ret

0000047a <LCD_enuSendCommand>:
 47a:	cf 93       	push	r28
 47c:	c8 2f       	mov	r28, r24
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_Enu_SetPinValue>
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_Enu_SetPinValue>
 492:	6c 2f       	mov	r22, r28
 494:	62 95       	swap	r22
 496:	6f 70       	andi	r22, 0x0F	; 15
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_Enu_WriteHighNibbles>
 49e:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_voidSendFallingEdge>
 4a2:	6c 2f       	mov	r22, r28
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_Enu_WriteHighNibbles>
 4aa:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_voidSendFallingEdge>
 4ae:	8f ec       	ldi	r24, 0xCF	; 207
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_enuSendCommand+0x38>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_enuSendCommand+0x3e>
 4b8:	00 00       	nop
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <LCD_enuSendData>:
 4c0:	cf 93       	push	r28
 4c2:	c8 2f       	mov	r28, r24
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_Enu_SetPinValue>
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_Enu_SetPinValue>
 4d8:	6c 2f       	mov	r22, r28
 4da:	62 95       	swap	r22
 4dc:	6f 70       	andi	r22, 0x0F	; 15
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_Enu_WriteHighNibbles>
 4e4:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_voidSendFallingEdge>
 4e8:	6c 2f       	mov	r22, r28
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_Enu_WriteHighNibbles>
 4f0:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_voidSendFallingEdge>
 4f4:	8f ec       	ldi	r24, 0xCF	; 207
 4f6:	97 e0       	ldi	r25, 0x07	; 7
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_enuSendData+0x38>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_enuSendData+0x3e>
 4fe:	00 00       	nop
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <LCD_enuSendNumber>:
 506:	2f 92       	push	r2
 508:	3f 92       	push	r3
 50a:	4f 92       	push	r4
 50c:	5f 92       	push	r5
 50e:	6f 92       	push	r6
 510:	7f 92       	push	r7
 512:	8f 92       	push	r8
 514:	9f 92       	push	r9
 516:	af 92       	push	r10
 518:	bf 92       	push	r11
 51a:	cf 92       	push	r12
 51c:	df 92       	push	r13
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	28 97       	sbiw	r28, 0x08	; 8
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	29 83       	std	Y+1, r18	; 0x01
 53c:	3a 83       	std	Y+2, r19	; 0x02
 53e:	4b 83       	std	Y+3, r20	; 0x03
 540:	5c 83       	std	Y+4, r21	; 0x04
 542:	6d 83       	std	Y+5, r22	; 0x05
 544:	7e 83       	std	Y+6, r23	; 0x06
 546:	38 2e       	mov	r3, r24
 548:	29 2e       	mov	r2, r25
 54a:	a0 e0       	ldi	r26, 0x00	; 0
 54c:	0e 94 b3 05 	call	0xb66	; 0xb66 <__cmpdi2_s8>
 550:	21 f4       	brne	.+8      	; 0x55a <LCD_enuSendNumber+0x54>
 552:	80 e3       	ldi	r24, 0x30	; 48
 554:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_enuSendData>
 558:	e2 c0       	rjmp	.+452    	; 0x71e <LCD_enuSendNumber+0x218>
 55a:	29 81       	ldd	r18, Y+1	; 0x01
 55c:	3a 81       	ldd	r19, Y+2	; 0x02
 55e:	4b 81       	ldd	r20, Y+3	; 0x03
 560:	5c 81       	ldd	r21, Y+4	; 0x04
 562:	6d 81       	ldd	r22, Y+5	; 0x05
 564:	7e 81       	ldd	r23, Y+6	; 0x06
 566:	a0 e0       	ldi	r26, 0x00	; 0
 568:	0e 94 b3 05 	call	0xb66	; 0xb66 <__cmpdi2_s8>
 56c:	6c f4       	brge	.+26     	; 0x588 <LCD_enuSendNumber+0x82>
 56e:	0e 94 4a 05 	call	0xa94	; 0xa94 <__negdi2>
 572:	29 83       	std	Y+1, r18	; 0x01
 574:	3a 83       	std	Y+2, r19	; 0x02
 576:	4b 83       	std	Y+3, r20	; 0x03
 578:	5c 83       	std	Y+4, r21	; 0x04
 57a:	6d 83       	std	Y+5, r22	; 0x05
 57c:	7e 83       	std	Y+6, r23	; 0x06
 57e:	38 2e       	mov	r3, r24
 580:	29 2e       	mov	r2, r25
 582:	8d e2       	ldi	r24, 0x2D	; 45
 584:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_enuSendData>
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	18 86       	std	Y+8, r1	; 0x08
 58c:	91 2c       	mov	r9, r1
 58e:	81 2c       	mov	r8, r1
 590:	71 2c       	mov	r7, r1
 592:	61 2c       	mov	r6, r1
 594:	51 2c       	mov	r5, r1
 596:	41 2c       	mov	r4, r1
 598:	8f 83       	std	Y+7, r24	; 0x07
 59a:	7c c0       	rjmp	.+248    	; 0x694 <LCD_enuSendNumber+0x18e>
 59c:	2f 81       	ldd	r18, Y+7	; 0x07
 59e:	38 85       	ldd	r19, Y+8	; 0x08
 5a0:	49 2d       	mov	r20, r9
 5a2:	58 2d       	mov	r21, r8
 5a4:	67 2d       	mov	r22, r7
 5a6:	76 2d       	mov	r23, r6
 5a8:	85 2d       	mov	r24, r5
 5aa:	94 2d       	mov	r25, r4
 5ac:	01 e0       	ldi	r16, 0x01	; 1
 5ae:	0e 94 91 05 	call	0xb22	; 0xb22 <__ashldi3>
 5b2:	82 2e       	mov	r8, r18
 5b4:	93 2e       	mov	r9, r19
 5b6:	48 87       	std	Y+8, r20	; 0x08
 5b8:	5f 83       	std	Y+7, r21	; 0x07
 5ba:	b6 2f       	mov	r27, r22
 5bc:	a7 2f       	mov	r26, r23
 5be:	f8 2f       	mov	r31, r24
 5c0:	e9 2f       	mov	r30, r25
 5c2:	02 e0       	ldi	r16, 0x02	; 2
 5c4:	0e 94 91 05 	call	0xb22	; 0xb22 <__ashldi3>
 5c8:	a2 2e       	mov	r10, r18
 5ca:	b3 2e       	mov	r11, r19
 5cc:	c4 2e       	mov	r12, r20
 5ce:	d5 2e       	mov	r13, r21
 5d0:	e6 2e       	mov	r14, r22
 5d2:	f7 2e       	mov	r15, r23
 5d4:	08 2f       	mov	r16, r24
 5d6:	19 2f       	mov	r17, r25
 5d8:	28 2d       	mov	r18, r8
 5da:	39 2d       	mov	r19, r9
 5dc:	48 85       	ldd	r20, Y+8	; 0x08
 5de:	5f 81       	ldd	r21, Y+7	; 0x07
 5e0:	6b 2f       	mov	r22, r27
 5e2:	7a 2f       	mov	r23, r26
 5e4:	8f 2f       	mov	r24, r31
 5e6:	9e 2f       	mov	r25, r30
 5e8:	0e 94 aa 05 	call	0xb54	; 0xb54 <__adddi3>
 5ec:	28 87       	std	Y+8, r18	; 0x08
 5ee:	3f 83       	std	Y+7, r19	; 0x07
 5f0:	94 2e       	mov	r9, r20
 5f2:	85 2e       	mov	r8, r21
 5f4:	76 2e       	mov	r7, r22
 5f6:	67 2e       	mov	r6, r23
 5f8:	58 2e       	mov	r5, r24
 5fa:	49 2e       	mov	r4, r25
 5fc:	0f 2e       	mov	r0, r31
 5fe:	fa e0       	ldi	r31, 0x0A	; 10
 600:	af 2e       	mov	r10, r31
 602:	f0 2d       	mov	r31, r0
 604:	b1 2c       	mov	r11, r1
 606:	c1 2c       	mov	r12, r1
 608:	d1 2c       	mov	r13, r1
 60a:	e1 2c       	mov	r14, r1
 60c:	f1 2c       	mov	r15, r1
 60e:	00 e0       	ldi	r16, 0x00	; 0
 610:	10 e0       	ldi	r17, 0x00	; 0
 612:	29 81       	ldd	r18, Y+1	; 0x01
 614:	3a 81       	ldd	r19, Y+2	; 0x02
 616:	4b 81       	ldd	r20, Y+3	; 0x03
 618:	5c 81       	ldd	r21, Y+4	; 0x04
 61a:	6d 81       	ldd	r22, Y+5	; 0x05
 61c:	7e 81       	ldd	r23, Y+6	; 0x06
 61e:	83 2d       	mov	r24, r3
 620:	92 2d       	mov	r25, r2
 622:	0e 94 ba 04 	call	0x974	; 0x974 <__moddi3>
 626:	a2 2e       	mov	r10, r18
 628:	b3 2e       	mov	r11, r19
 62a:	c4 2e       	mov	r12, r20
 62c:	d5 2e       	mov	r13, r21
 62e:	e6 2e       	mov	r14, r22
 630:	f7 2e       	mov	r15, r23
 632:	08 2f       	mov	r16, r24
 634:	19 2f       	mov	r17, r25
 636:	28 85       	ldd	r18, Y+8	; 0x08
 638:	3f 81       	ldd	r19, Y+7	; 0x07
 63a:	49 2d       	mov	r20, r9
 63c:	58 2d       	mov	r21, r8
 63e:	67 2d       	mov	r22, r7
 640:	76 2d       	mov	r23, r6
 642:	85 2d       	mov	r24, r5
 644:	94 2d       	mov	r25, r4
 646:	0e 94 aa 05 	call	0xb54	; 0xb54 <__adddi3>
 64a:	2f 83       	std	Y+7, r18	; 0x07
 64c:	38 87       	std	Y+8, r19	; 0x08
 64e:	94 2e       	mov	r9, r20
 650:	85 2e       	mov	r8, r21
 652:	76 2e       	mov	r7, r22
 654:	67 2e       	mov	r6, r23
 656:	58 2e       	mov	r5, r24
 658:	49 2e       	mov	r4, r25
 65a:	0f 2e       	mov	r0, r31
 65c:	fa e0       	ldi	r31, 0x0A	; 10
 65e:	af 2e       	mov	r10, r31
 660:	f0 2d       	mov	r31, r0
 662:	b1 2c       	mov	r11, r1
 664:	c1 2c       	mov	r12, r1
 666:	d1 2c       	mov	r13, r1
 668:	e1 2c       	mov	r14, r1
 66a:	f1 2c       	mov	r15, r1
 66c:	00 e0       	ldi	r16, 0x00	; 0
 66e:	10 e0       	ldi	r17, 0x00	; 0
 670:	29 81       	ldd	r18, Y+1	; 0x01
 672:	3a 81       	ldd	r19, Y+2	; 0x02
 674:	4b 81       	ldd	r20, Y+3	; 0x03
 676:	5c 81       	ldd	r21, Y+4	; 0x04
 678:	6d 81       	ldd	r22, Y+5	; 0x05
 67a:	7e 81       	ldd	r23, Y+6	; 0x06
 67c:	83 2d       	mov	r24, r3
 67e:	92 2d       	mov	r25, r2
 680:	0e 94 bc 04 	call	0x978	; 0x978 <__divdi3>
 684:	29 83       	std	Y+1, r18	; 0x01
 686:	3a 83       	std	Y+2, r19	; 0x02
 688:	4b 83       	std	Y+3, r20	; 0x03
 68a:	5c 83       	std	Y+4, r21	; 0x04
 68c:	6d 83       	std	Y+5, r22	; 0x05
 68e:	7e 83       	std	Y+6, r23	; 0x06
 690:	38 2e       	mov	r3, r24
 692:	29 2e       	mov	r2, r25
 694:	29 81       	ldd	r18, Y+1	; 0x01
 696:	3a 81       	ldd	r19, Y+2	; 0x02
 698:	4b 81       	ldd	r20, Y+3	; 0x03
 69a:	5c 81       	ldd	r21, Y+4	; 0x04
 69c:	6d 81       	ldd	r22, Y+5	; 0x05
 69e:	7e 81       	ldd	r23, Y+6	; 0x06
 6a0:	83 2d       	mov	r24, r3
 6a2:	92 2d       	mov	r25, r2
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	0e 94 b3 05 	call	0xb66	; 0xb66 <__cmpdi2_s8>
 6aa:	09 f0       	breq	.+2      	; 0x6ae <LCD_enuSendNumber+0x1a8>
 6ac:	77 cf       	rjmp	.-274    	; 0x59c <LCD_enuSendNumber+0x96>
 6ae:	2b c0       	rjmp	.+86     	; 0x706 <LCD_enuSendNumber+0x200>
 6b0:	0f 2e       	mov	r0, r31
 6b2:	fa e0       	ldi	r31, 0x0A	; 10
 6b4:	af 2e       	mov	r10, r31
 6b6:	f0 2d       	mov	r31, r0
 6b8:	b1 2c       	mov	r11, r1
 6ba:	c1 2c       	mov	r12, r1
 6bc:	d1 2c       	mov	r13, r1
 6be:	e1 2c       	mov	r14, r1
 6c0:	f1 2c       	mov	r15, r1
 6c2:	00 e0       	ldi	r16, 0x00	; 0
 6c4:	10 e0       	ldi	r17, 0x00	; 0
 6c6:	2f 81       	ldd	r18, Y+7	; 0x07
 6c8:	38 85       	ldd	r19, Y+8	; 0x08
 6ca:	49 2d       	mov	r20, r9
 6cc:	58 2d       	mov	r21, r8
 6ce:	67 2d       	mov	r22, r7
 6d0:	76 2d       	mov	r23, r6
 6d2:	85 2d       	mov	r24, r5
 6d4:	94 2d       	mov	r25, r4
 6d6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__umoddi3>
 6da:	80 e3       	ldi	r24, 0x30	; 48
 6dc:	82 0f       	add	r24, r18
 6de:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_enuSendData>
 6e2:	2f 81       	ldd	r18, Y+7	; 0x07
 6e4:	38 85       	ldd	r19, Y+8	; 0x08
 6e6:	49 2d       	mov	r20, r9
 6e8:	58 2d       	mov	r21, r8
 6ea:	67 2d       	mov	r22, r7
 6ec:	76 2d       	mov	r23, r6
 6ee:	85 2d       	mov	r24, r5
 6f0:	94 2d       	mov	r25, r4
 6f2:	0e 94 ed 04 	call	0x9da	; 0x9da <__udivdi3>
 6f6:	2f 83       	std	Y+7, r18	; 0x07
 6f8:	38 87       	std	Y+8, r19	; 0x08
 6fa:	94 2e       	mov	r9, r20
 6fc:	85 2e       	mov	r8, r21
 6fe:	76 2e       	mov	r7, r22
 700:	67 2e       	mov	r6, r23
 702:	58 2e       	mov	r5, r24
 704:	49 2e       	mov	r4, r25
 706:	2f 81       	ldd	r18, Y+7	; 0x07
 708:	38 85       	ldd	r19, Y+8	; 0x08
 70a:	49 2d       	mov	r20, r9
 70c:	58 2d       	mov	r21, r8
 70e:	67 2d       	mov	r22, r7
 710:	76 2d       	mov	r23, r6
 712:	85 2d       	mov	r24, r5
 714:	94 2d       	mov	r25, r4
 716:	a1 e0       	ldi	r26, 0x01	; 1
 718:	0e 94 b3 05 	call	0xb66	; 0xb66 <__cmpdi2_s8>
 71c:	49 f6       	brne	.-110    	; 0x6b0 <LCD_enuSendNumber+0x1aa>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	28 96       	adiw	r28, 0x08	; 8
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	ff 90       	pop	r15
 736:	ef 90       	pop	r14
 738:	df 90       	pop	r13
 73a:	cf 90       	pop	r12
 73c:	bf 90       	pop	r11
 73e:	af 90       	pop	r10
 740:	9f 90       	pop	r9
 742:	8f 90       	pop	r8
 744:	7f 90       	pop	r7
 746:	6f 90       	pop	r6
 748:	5f 90       	pop	r5
 74a:	4f 90       	pop	r4
 74c:	3f 90       	pop	r3
 74e:	2f 90       	pop	r2
 750:	08 95       	ret

00000752 <LCD_enuSetPosition>:
 752:	9f ef       	ldi	r25, 0xFF	; 255
 754:	98 0f       	add	r25, r24
 756:	92 30       	cpi	r25, 0x02	; 2
 758:	70 f4       	brcc	.+28     	; 0x776 <LCD_enuSetPosition+0x24>
 75a:	61 31       	cpi	r22, 0x11	; 17
 75c:	70 f4       	brcc	.+28     	; 0x77a <LCD_enuSetPosition+0x28>
 75e:	66 23       	and	r22, r22
 760:	71 f0       	breq	.+28     	; 0x77e <LCD_enuSetPosition+0x2c>
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	19 f4       	brne	.+6      	; 0x76c <LCD_enuSetPosition+0x1a>
 766:	2f e7       	ldi	r18, 0x7F	; 127
 768:	26 0f       	add	r18, r22
 76a:	0a c0       	rjmp	.+20     	; 0x780 <LCD_enuSetPosition+0x2e>
 76c:	82 30       	cpi	r24, 0x02	; 2
 76e:	41 f4       	brne	.+16     	; 0x780 <LCD_enuSetPosition+0x2e>
 770:	2f eb       	ldi	r18, 0xBF	; 191
 772:	26 0f       	add	r18, r22
 774:	05 c0       	rjmp	.+10     	; 0x780 <LCD_enuSetPosition+0x2e>
 776:	20 e8       	ldi	r18, 0x80	; 128
 778:	03 c0       	rjmp	.+6      	; 0x780 <LCD_enuSetPosition+0x2e>
 77a:	20 e8       	ldi	r18, 0x80	; 128
 77c:	01 c0       	rjmp	.+2      	; 0x780 <LCD_enuSetPosition+0x2e>
 77e:	20 e8       	ldi	r18, 0x80	; 128
 780:	82 2f       	mov	r24, r18
 782:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_enuSendCommand>
 786:	8f ec       	ldi	r24, 0xCF	; 207
 788:	97 e0       	ldi	r25, 0x07	; 7
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	f1 f7       	brne	.-4      	; 0x78a <LCD_enuSetPosition+0x38>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <LCD_enuSetPosition+0x3e>
 790:	00 00       	nop
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	08 95       	ret

00000796 <LCD_enuClearScreen>:

ES_t LCD_enuClearScreen(void)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;
    LCD_enuSendCommand(lcd_Clear);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_enuSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 79c:	8f e9       	ldi	r24, 0x9F	; 159
 79e:	9f e0       	ldi	r25, 0x0F	; 15
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <LCD_enuClearScreen+0xa>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <LCD_enuClearScreen+0x10>
 7a6:	00 00       	nop
    _delay_ms(2); // wait more than 1.53 ms

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	08 95       	ret

000007ac <LCD_enuInit>:
 7ac:	2f e7       	ldi	r18, 0x7F	; 127
 7ae:	88 e3       	ldi	r24, 0x38	; 56
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	21 50       	subi	r18, 0x01	; 1
 7b4:	80 40       	sbci	r24, 0x00	; 0
 7b6:	90 40       	sbci	r25, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <LCD_enuInit+0x6>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <LCD_enuInit+0x10>
 7bc:	00 00       	nop

#elif LCD_MODE == 4

    // 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
    _delay_ms(50);
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN4, DIO_u8OUTPUT);
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	64 e0       	ldi	r22, 0x04	; 4
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN5, DIO_u8OUTPUT);
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	65 e0       	ldi	r22, 0x05	; 5
 7cc:	83 e0       	ldi	r24, 0x03	; 3
 7ce:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN6, DIO_u8OUTPUT);
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	66 e0       	ldi	r22, 0x06	; 6
 7d6:	83 e0       	ldi	r24, 0x03	; 3
 7d8:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN7, DIO_u8OUTPUT);
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	67 e0       	ldi	r22, 0x07	; 7
 7e0:	83 e0       	ldi	r24, 0x03	; 3
 7e2:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RS, DIO_u8OUTPUT);
 7e6:	41 e0       	ldi	r20, 0x01	; 1
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RW, DIO_u8OUTPUT);
 7f0:	41 e0       	ldi	r20, 0x01	; 1
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	82 e0       	ldi	r24, 0x02	; 2
 7f6:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_EN, DIO_u8OUTPUT);
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_Enu_SetPinDirection>

    /*return home*/
    LCD_enuSendCommand(lcd_Home);
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_enuSendCommand>
 80a:	8f e5       	ldi	r24, 0x5F	; 95
 80c:	9a ee       	ldi	r25, 0xEA	; 234
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 812:	00 c0       	rjmp	.+0      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 814:	00 00       	nop
    _delay_ms(30);

    /*FUNCTION SET Command*/
    LCD_enuSendCommand(FOUR_BITS); // 4 Bit Mode
 816:	88 e2       	ldi	r24, 0x28	; 40
 818:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_enuSendCommand>
 81c:	8f ec       	ldi	r24, 0xCF	; 207
 81e:	97 e0       	ldi	r25, 0x07	; 7
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 824:	00 c0       	rjmp	.+0      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 826:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY & Cursor (ON / OFF) Control */
    LCD_enuSendCommand(lcd_DisplayOn_CursorOff);
 828:	8c e0       	ldi	r24, 0x0C	; 12
 82a:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_enuSendCommand>
 82e:	8f ec       	ldi	r24, 0xCF	; 207
 830:	97 e0       	ldi	r25, 0x07	; 7
 832:	01 97       	sbiw	r24, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 838:	00 00       	nop
    _delay_ms(1);

    /* DISPLAY CLEAR */
    LCD_enuClearScreen();
 83a:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_enuClearScreen>

    /* ENTRY MODE  Set*/
    LCD_enuSendCommand(lcd_EntryMode);
 83e:	86 e0       	ldi	r24, 0x06	; 6
 840:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_enuSendCommand>
 844:	8f ec       	ldi	r24, 0xCF	; 207
 846:	97 e0       	ldi	r25, 0x07	; 7
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84e:	00 00       	nop
#endif

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	08 95       	ret

00000854 <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
			=> Pointer to TEMP Variable which will return in it 
* return : Error State
*/
u8 LM35_u8GetTemp (LM35_CONFIG * lm35 , u8 * Copy_u8TempValue)
{
 854:	af 92       	push	r10
 856:	bf 92       	push	r11
 858:	cf 92       	push	r12
 85a:	df 92       	push	r13
 85c:	ef 92       	push	r14
 85e:	ff 92       	push	r15
 860:	0f 93       	push	r16
 862:	1f 93       	push	r17
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	00 d0       	rcall	.+0      	; 0x86a <__stack+0xb>
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	7c 01       	movw	r14, r24
 870:	6b 01       	movw	r12, r22
	ES_t Local_u8ErrorState = ES_OK;

	u16 Local_u16ADCResult ;
	u16 Local_u16AnalogValue ;
	
	u16 Local_u8ADCReference = ( lm35->Copy_u8ADCVoltageReference ) * 1000 ;  // To Convert from ( V --> mV )
 872:	fc 01       	movw	r30, r24
 874:	21 81       	ldd	r18, Z+1	; 0x01
 876:	88 ee       	ldi	r24, 0xE8	; 232
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	28 9f       	mul	r18, r24
 87c:	50 01       	movw	r10, r0
 87e:	29 9f       	mul	r18, r25
 880:	b0 0c       	add	r11, r0
 882:	11 24       	eor	r1, r1
	
	
	/* ADC Digital Reading  */
	ADC_u8GetResultSync( lm35->Copy_u8LM35Channel , &Local_u16ADCResult ) ;
 884:	be 01       	movw	r22, r28
 886:	6f 5f       	subi	r22, 0xFF	; 255
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	80 81       	ld	r24, Z
 88c:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_u8GetResultSync>

	/* Check for ADC Resolution  */
	if ( lm35->Copy_u8ADCResolution == ADC_RESOLUTION_10_BIT )
 890:	f7 01       	movw	r30, r14
 892:	82 81       	ldd	r24, Z+2	; 0x02
 894:	81 11       	cpse	r24, r1
 896:	12 c0       	rjmp	.+36     	; 0x8bc <__stack+0x5d>
	{
		Local_u16AnalogValue = (u16) ( ((u32)Local_u16ADCResult * (u32)Local_u8ADCReference ) / 1024UL) ;
 898:	29 81       	ldd	r18, Y+1	; 0x01
 89a:	3a 81       	ldd	r19, Y+2	; 0x02
 89c:	d5 01       	movw	r26, r10
 89e:	0e 94 ab 04 	call	0x956	; 0x956 <__umulhisi3>
 8a2:	dc 01       	movw	r26, r24
 8a4:	cb 01       	movw	r24, r22
 8a6:	07 2e       	mov	r0, r23
 8a8:	7a e0       	ldi	r23, 0x0A	; 10
 8aa:	b6 95       	lsr	r27
 8ac:	a7 95       	ror	r26
 8ae:	97 95       	ror	r25
 8b0:	87 95       	ror	r24
 8b2:	7a 95       	dec	r23
 8b4:	d1 f7       	brne	.-12     	; 0x8aa <__stack+0x4b>
 8b6:	70 2d       	mov	r23, r0
 8b8:	8c 01       	movw	r16, r24
 8ba:	0c c0       	rjmp	.+24     	; 0x8d4 <__stack+0x75>

	}
	else if ( lm35->Copy_u8ADCResolution == ADC_RESOLUTION_8_BIT )
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	51 f4       	brne	.+20     	; 0x8d4 <__stack+0x75>
	{
		Local_u16AnalogValue = (u16) ( ((u32)Local_u16ADCResult * (u32)Local_u8ADCReference ) / 256UL) ;
 8c0:	29 81       	ldd	r18, Y+1	; 0x01
 8c2:	3a 81       	ldd	r19, Y+2	; 0x02
 8c4:	d5 01       	movw	r26, r10
 8c6:	0e 94 ab 04 	call	0x956	; 0x956 <__umulhisi3>
 8ca:	bb 27       	eor	r27, r27
 8cc:	a9 2f       	mov	r26, r25
 8ce:	98 2f       	mov	r25, r24
 8d0:	87 2f       	mov	r24, r23
 8d2:	8c 01       	movw	r16, r24
	}


	/* Convert ( mv --> Temp ) */
	* Copy_u8TempValue = Local_u16AnalogValue / 10 ;
 8d4:	98 01       	movw	r18, r16
 8d6:	ad ec       	ldi	r26, 0xCD	; 205
 8d8:	bc ec       	ldi	r27, 0xCC	; 204
 8da:	0e 94 ab 04 	call	0x956	; 0x956 <__umulhisi3>
 8de:	96 95       	lsr	r25
 8e0:	87 95       	ror	r24
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	f6 01       	movw	r30, r12
 8ec:	80 83       	st	Z, r24

	return Local_u8ErrorState ;
}
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	bf 90       	pop	r11
 906:	af 90       	pop	r10
 908:	08 95       	ret

0000090a <main>:
#include "LM35_INTERFACE.h"
#include "LCD_INTERFACE.h"
#include <util/delay.h>

int main(void)
{
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	00 d0       	rcall	.+0      	; 0x910 <main+0x6>
 910:	00 d0       	rcall	.+0      	; 0x912 <main+0x8>
 912:	cd b7       	in	r28, 0x3d	; 61
 914:	de b7       	in	r29, 0x3e	; 62
	DIO_Enu_Init();
 916:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_Enu_Init>
	ADC_voidInit();
 91a:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	LCD_enuInit();
 91e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_enuInit>
	LM35_CONFIG LM1={0,5,ADC_RESOLUTION_10_BIT};
 922:	19 82       	std	Y+1, r1	; 0x01
 924:	85 e0       	ldi	r24, 0x05	; 5
 926:	8a 83       	std	Y+2, r24	; 0x02
 928:	1b 82       	std	Y+3, r1	; 0x03
	u8 value ;
    /* Replace with your application code */
    while (1) 
    {
		LM35_u8GetTemp(&LM1,&value);
 92a:	be 01       	movw	r22, r28
 92c:	6c 5f       	subi	r22, 0xFC	; 252
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	ce 01       	movw	r24, r28
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	0e 94 2a 04 	call	0x854	; 0x854 <LM35_u8GetTemp>
		LCD_enuSetPosition(1,1);
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	0e 94 a9 03 	call	0x752	; 0x752 <LCD_enuSetPosition>
		LCD_enuSendNumber(value);
 940:	2c 81       	ldd	r18, Y+4	; 0x04
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	40 e0       	ldi	r20, 0x00	; 0
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	60 e0       	ldi	r22, 0x00	; 0
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 83 02 	call	0x506	; 0x506 <LCD_enuSendNumber>
 954:	ea cf       	rjmp	.-44     	; 0x92a <main+0x20>

00000956 <__umulhisi3>:
 956:	a2 9f       	mul	r26, r18
 958:	b0 01       	movw	r22, r0
 95a:	b3 9f       	mul	r27, r19
 95c:	c0 01       	movw	r24, r0
 95e:	a3 9f       	mul	r26, r19
 960:	70 0d       	add	r23, r0
 962:	81 1d       	adc	r24, r1
 964:	11 24       	eor	r1, r1
 966:	91 1d       	adc	r25, r1
 968:	b2 9f       	mul	r27, r18
 96a:	70 0d       	add	r23, r0
 96c:	81 1d       	adc	r24, r1
 96e:	11 24       	eor	r1, r1
 970:	91 1d       	adc	r25, r1
 972:	08 95       	ret

00000974 <__moddi3>:
 974:	68 94       	set
 976:	01 c0       	rjmp	.+2      	; 0x97a <__divdi3_moddi3>

00000978 <__divdi3>:
 978:	e8 94       	clt

0000097a <__divdi3_moddi3>:
 97a:	f9 2f       	mov	r31, r25
 97c:	f1 2b       	or	r31, r17
 97e:	12 f0       	brmi	.+4      	; 0x984 <__divdi3_moddi3+0xa>
 980:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__udivdi3_umoddi3>
 984:	a0 e0       	ldi	r26, 0x00	; 0
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	e8 ec       	ldi	r30, 0xC8	; 200
 98a:	f4 e0       	ldi	r31, 0x04	; 4
 98c:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__prologue_saves__+0xc>
 990:	09 2e       	mov	r0, r25
 992:	05 94       	asr	r0
 994:	22 f4       	brpl	.+8      	; 0x99e <__divdi3_moddi3+0x24>
 996:	0e 94 4a 05 	call	0xa94	; 0xa94 <__negdi2>
 99a:	11 23       	and	r17, r17
 99c:	92 f4       	brpl	.+36     	; 0x9c2 <__divdi3_moddi3+0x48>
 99e:	f0 e8       	ldi	r31, 0x80	; 128
 9a0:	0f 26       	eor	r0, r31
 9a2:	ff ef       	ldi	r31, 0xFF	; 255
 9a4:	e0 94       	com	r14
 9a6:	f0 94       	com	r15
 9a8:	00 95       	com	r16
 9aa:	10 95       	com	r17
 9ac:	b0 94       	com	r11
 9ae:	c0 94       	com	r12
 9b0:	d0 94       	com	r13
 9b2:	a1 94       	neg	r10
 9b4:	bf 0a       	sbc	r11, r31
 9b6:	cf 0a       	sbc	r12, r31
 9b8:	df 0a       	sbc	r13, r31
 9ba:	ef 0a       	sbc	r14, r31
 9bc:	ff 0a       	sbc	r15, r31
 9be:	0f 0b       	sbc	r16, r31
 9c0:	1f 0b       	sbc	r17, r31
 9c2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmod64>
 9c6:	07 fc       	sbrc	r0, 7
 9c8:	0e 94 4a 05 	call	0xa94	; 0xa94 <__negdi2>
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
 9d0:	ec e0       	ldi	r30, 0x0C	; 12
 9d2:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__epilogue_restores__+0xc>

000009d6 <__umoddi3>:
 9d6:	68 94       	set
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__udivdi3_umoddi3>

000009da <__udivdi3>:
 9da:	e8 94       	clt

000009dc <__udivdi3_umoddi3>:
 9dc:	8f 92       	push	r8
 9de:	9f 92       	push	r9
 9e0:	cf 93       	push	r28
 9e2:	df 93       	push	r29
 9e4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmod64>
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	9f 90       	pop	r9
 9ee:	8f 90       	pop	r8
 9f0:	08 95       	ret

000009f2 <__udivmod64>:
 9f2:	88 24       	eor	r8, r8
 9f4:	99 24       	eor	r9, r9
 9f6:	f4 01       	movw	r30, r8
 9f8:	e4 01       	movw	r28, r8
 9fa:	b0 e4       	ldi	r27, 0x40	; 64
 9fc:	9f 93       	push	r25
 9fe:	aa 27       	eor	r26, r26
 a00:	9a 15       	cp	r25, r10
 a02:	8b 04       	cpc	r8, r11
 a04:	9c 04       	cpc	r9, r12
 a06:	ed 05       	cpc	r30, r13
 a08:	fe 05       	cpc	r31, r14
 a0a:	cf 05       	cpc	r28, r15
 a0c:	d0 07       	cpc	r29, r16
 a0e:	a1 07       	cpc	r26, r17
 a10:	98 f4       	brcc	.+38     	; 0xa38 <__udivmod64+0x46>
 a12:	ad 2f       	mov	r26, r29
 a14:	dc 2f       	mov	r29, r28
 a16:	cf 2f       	mov	r28, r31
 a18:	fe 2f       	mov	r31, r30
 a1a:	e9 2d       	mov	r30, r9
 a1c:	98 2c       	mov	r9, r8
 a1e:	89 2e       	mov	r8, r25
 a20:	98 2f       	mov	r25, r24
 a22:	87 2f       	mov	r24, r23
 a24:	76 2f       	mov	r23, r22
 a26:	65 2f       	mov	r22, r21
 a28:	54 2f       	mov	r21, r20
 a2a:	43 2f       	mov	r20, r19
 a2c:	32 2f       	mov	r19, r18
 a2e:	22 27       	eor	r18, r18
 a30:	b8 50       	subi	r27, 0x08	; 8
 a32:	31 f7       	brne	.-52     	; 0xa00 <__udivmod64+0xe>
 a34:	bf 91       	pop	r27
 a36:	27 c0       	rjmp	.+78     	; 0xa86 <__udivmod64+0x94>
 a38:	1b 2e       	mov	r1, r27
 a3a:	bf 91       	pop	r27
 a3c:	bb 27       	eor	r27, r27
 a3e:	22 0f       	add	r18, r18
 a40:	33 1f       	adc	r19, r19
 a42:	44 1f       	adc	r20, r20
 a44:	55 1f       	adc	r21, r21
 a46:	66 1f       	adc	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	88 1c       	adc	r8, r8
 a50:	99 1c       	adc	r9, r9
 a52:	ee 1f       	adc	r30, r30
 a54:	ff 1f       	adc	r31, r31
 a56:	cc 1f       	adc	r28, r28
 a58:	dd 1f       	adc	r29, r29
 a5a:	aa 1f       	adc	r26, r26
 a5c:	bb 1f       	adc	r27, r27
 a5e:	8a 14       	cp	r8, r10
 a60:	9b 04       	cpc	r9, r11
 a62:	ec 05       	cpc	r30, r12
 a64:	fd 05       	cpc	r31, r13
 a66:	ce 05       	cpc	r28, r14
 a68:	df 05       	cpc	r29, r15
 a6a:	a0 07       	cpc	r26, r16
 a6c:	b1 07       	cpc	r27, r17
 a6e:	48 f0       	brcs	.+18     	; 0xa82 <__udivmod64+0x90>
 a70:	8a 18       	sub	r8, r10
 a72:	9b 08       	sbc	r9, r11
 a74:	ec 09       	sbc	r30, r12
 a76:	fd 09       	sbc	r31, r13
 a78:	ce 09       	sbc	r28, r14
 a7a:	df 09       	sbc	r29, r15
 a7c:	a0 0b       	sbc	r26, r16
 a7e:	b1 0b       	sbc	r27, r17
 a80:	21 60       	ori	r18, 0x01	; 1
 a82:	1a 94       	dec	r1
 a84:	e1 f6       	brne	.-72     	; 0xa3e <__udivmod64+0x4c>
 a86:	2e f4       	brtc	.+10     	; 0xa92 <__udivmod64+0xa0>
 a88:	94 01       	movw	r18, r8
 a8a:	af 01       	movw	r20, r30
 a8c:	be 01       	movw	r22, r28
 a8e:	cd 01       	movw	r24, r26
 a90:	00 0c       	add	r0, r0
 a92:	08 95       	ret

00000a94 <__negdi2>:
 a94:	60 95       	com	r22
 a96:	70 95       	com	r23
 a98:	80 95       	com	r24
 a9a:	90 95       	com	r25
 a9c:	30 95       	com	r19
 a9e:	40 95       	com	r20
 aa0:	50 95       	com	r21
 aa2:	21 95       	neg	r18
 aa4:	3f 4f       	sbci	r19, 0xFF	; 255
 aa6:	4f 4f       	sbci	r20, 0xFF	; 255
 aa8:	5f 4f       	sbci	r21, 0xFF	; 255
 aaa:	6f 4f       	sbci	r22, 0xFF	; 255
 aac:	7f 4f       	sbci	r23, 0xFF	; 255
 aae:	8f 4f       	sbci	r24, 0xFF	; 255
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	08 95       	ret

00000ab4 <__prologue_saves__>:
 ab4:	2f 92       	push	r2
 ab6:	3f 92       	push	r3
 ab8:	4f 92       	push	r4
 aba:	5f 92       	push	r5
 abc:	6f 92       	push	r6
 abe:	7f 92       	push	r7
 ac0:	8f 92       	push	r8
 ac2:	9f 92       	push	r9
 ac4:	af 92       	push	r10
 ac6:	bf 92       	push	r11
 ac8:	cf 92       	push	r12
 aca:	df 92       	push	r13
 acc:	ef 92       	push	r14
 ace:	ff 92       	push	r15
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
 adc:	ca 1b       	sub	r28, r26
 ade:	db 0b       	sbc	r29, r27
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	f8 94       	cli
 ae4:	de bf       	out	0x3e, r29	; 62
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	cd bf       	out	0x3d, r28	; 61
 aea:	09 94       	ijmp

00000aec <__epilogue_restores__>:
 aec:	2a 88       	ldd	r2, Y+18	; 0x12
 aee:	39 88       	ldd	r3, Y+17	; 0x11
 af0:	48 88       	ldd	r4, Y+16	; 0x10
 af2:	5f 84       	ldd	r5, Y+15	; 0x0f
 af4:	6e 84       	ldd	r6, Y+14	; 0x0e
 af6:	7d 84       	ldd	r7, Y+13	; 0x0d
 af8:	8c 84       	ldd	r8, Y+12	; 0x0c
 afa:	9b 84       	ldd	r9, Y+11	; 0x0b
 afc:	aa 84       	ldd	r10, Y+10	; 0x0a
 afe:	b9 84       	ldd	r11, Y+9	; 0x09
 b00:	c8 84       	ldd	r12, Y+8	; 0x08
 b02:	df 80       	ldd	r13, Y+7	; 0x07
 b04:	ee 80       	ldd	r14, Y+6	; 0x06
 b06:	fd 80       	ldd	r15, Y+5	; 0x05
 b08:	0c 81       	ldd	r16, Y+4	; 0x04
 b0a:	1b 81       	ldd	r17, Y+3	; 0x03
 b0c:	aa 81       	ldd	r26, Y+2	; 0x02
 b0e:	b9 81       	ldd	r27, Y+1	; 0x01
 b10:	ce 0f       	add	r28, r30
 b12:	d1 1d       	adc	r29, r1
 b14:	0f b6       	in	r0, 0x3f	; 63
 b16:	f8 94       	cli
 b18:	de bf       	out	0x3e, r29	; 62
 b1a:	0f be       	out	0x3f, r0	; 63
 b1c:	cd bf       	out	0x3d, r28	; 61
 b1e:	ed 01       	movw	r28, r26
 b20:	08 95       	ret

00000b22 <__ashldi3>:
 b22:	0f 93       	push	r16
 b24:	08 30       	cpi	r16, 0x08	; 8
 b26:	90 f0       	brcs	.+36     	; 0xb4c <__ashldi3+0x2a>
 b28:	98 2f       	mov	r25, r24
 b2a:	87 2f       	mov	r24, r23
 b2c:	76 2f       	mov	r23, r22
 b2e:	65 2f       	mov	r22, r21
 b30:	54 2f       	mov	r21, r20
 b32:	43 2f       	mov	r20, r19
 b34:	32 2f       	mov	r19, r18
 b36:	22 27       	eor	r18, r18
 b38:	08 50       	subi	r16, 0x08	; 8
 b3a:	f4 cf       	rjmp	.-24     	; 0xb24 <__ashldi3+0x2>
 b3c:	22 0f       	add	r18, r18
 b3e:	33 1f       	adc	r19, r19
 b40:	44 1f       	adc	r20, r20
 b42:	55 1f       	adc	r21, r21
 b44:	66 1f       	adc	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	0a 95       	dec	r16
 b4e:	b2 f7       	brpl	.-20     	; 0xb3c <__ashldi3+0x1a>
 b50:	0f 91       	pop	r16
 b52:	08 95       	ret

00000b54 <__adddi3>:
 b54:	2a 0d       	add	r18, r10
 b56:	3b 1d       	adc	r19, r11
 b58:	4c 1d       	adc	r20, r12
 b5a:	5d 1d       	adc	r21, r13
 b5c:	6e 1d       	adc	r22, r14
 b5e:	7f 1d       	adc	r23, r15
 b60:	80 1f       	adc	r24, r16
 b62:	91 1f       	adc	r25, r17
 b64:	08 95       	ret

00000b66 <__cmpdi2_s8>:
 b66:	00 24       	eor	r0, r0
 b68:	a7 fd       	sbrc	r26, 7
 b6a:	00 94       	com	r0
 b6c:	2a 17       	cp	r18, r26
 b6e:	30 05       	cpc	r19, r0
 b70:	40 05       	cpc	r20, r0
 b72:	50 05       	cpc	r21, r0
 b74:	60 05       	cpc	r22, r0
 b76:	70 05       	cpc	r23, r0
 b78:	80 05       	cpc	r24, r0
 b7a:	90 05       	cpc	r25, r0
 b7c:	08 95       	ret

00000b7e <_exit>:
 b7e:	f8 94       	cli

00000b80 <__stop_program>:
 b80:	ff cf       	rjmp	.-2      	; 0xb80 <__stop_program>
